<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>磊磊的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dreamleilei.github.io/"/>
  <updated>2018-09-01T00:59:42.211Z</updated>
  <id>http://dreamleilei.github.io/</id>
  
  <author>
    <name>dreamleilei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实习心得</title>
    <link href="http://dreamleilei.github.io/2017/03/11/%E5%AE%9E%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>http://dreamleilei.github.io/2017/03/11/实习心得/</id>
    <published>2017-03-11T02:14:52.000Z</published>
    <updated>2018-09-01T00:59:42.211Z</updated>
    
    <content type="html">&lt;h2 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h2&gt;&lt;p&gt; 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。&lt;/p&gt;
&lt;p&gt;  这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。&lt;/p&gt;
&lt;p&gt; 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。&lt;/p&gt;
&lt;p&gt; 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。&lt;/p&gt;
&lt;p&gt; 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反思&quot;&gt;&lt;a href=&quot;#反思&quot; class=&quot;headerlink&quot; title=&quot;反思&quot;&gt;&lt;/a&gt;反思&lt;/h2&gt;&lt;p&gt; 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的
    
    </summary>
    
    
      <category term="实习" scheme="http://dreamleilei.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>git权威指南读书笔记</title>
    <link href="http://dreamleilei.github.io/2016/08/03/git%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://dreamleilei.github.io/2016/08/03/git权威指南读书笔记/</id>
    <published>2016-08-03T12:15:51.000Z</published>
    <updated>2018-09-01T00:59:42.203Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="git" scheme="http://dreamleilei.github.io/categories/git/"/>
    
      <category term="读书笔记" scheme="http://dreamleilei.github.io/categories/git/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://dreamleilei.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>java问题定位技术</title>
    <link href="http://dreamleilei.github.io/2016/08/01/java%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%8A%80%E6%9C%AF/"/>
    <id>http://dreamleilei.github.io/2016/08/01/java问题定位技术/</id>
    <published>2016-08-01T13:11:06.000Z</published>
    <updated>2018-09-01T00:59:42.206Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西，&lt;br&gt;   从而确定出问题所在和系统的瓶颈所在。&lt;/p&gt;
&lt;h3 id=&quot;jps&quot;&gt;&lt;a href=&quot;#jps&quot; class=&quot;headerlink&quot; title=&quot;jps&quot;&gt;&lt;/a&gt;jps&lt;/h3&gt;&lt;p&gt; jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。&lt;br&gt; 参数:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; -l 打印详细的类的信息，包括类的全称名。&lt;br&gt; -m 打印出虚拟机的输入的参数,即args。&lt;br&gt; -v 打印出虚拟机的具体参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jstack&quot;&gt;&lt;a href=&quot;#jstack&quot; class=&quot;headerlink&quot; title=&quot;jstack&quot;&gt;&lt;/a&gt;jstack&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令&lt;br&gt;生成的内存快照，可以分析Java进程的内存信息。&lt;/p&gt;
&lt;p&gt;快照中的一些信息会具体再写一篇博文进行叙述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jstack &lt;pid&gt; 生成pid进程的java内存信息&lt;/pid&gt;&lt;/p&gt;
&lt;h3 id=&quot;jmap&quot;&gt;&lt;a href=&quot;#jmap&quot; class=&quot;headerlink&quot; title=&quot;jmap&quot;&gt;&lt;/a&gt;jmap&lt;/h3&gt;&lt;p&gt;jmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-heap &lt;pid&gt; 打印出内存堆的信息。&lt;br&gt;-histo &lt;pid&gt; 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。&lt;br&gt;-histo:live 先进行一次内存回收，然后再打印-histo的东西。&lt;br&gt;-dump:[live]format=b,file=&lt;filename&gt; 以proof二进制格式转储Java堆到指定filenanme&lt;br&gt;文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。&lt;/filename&gt;&lt;/pid&gt;&lt;/pid&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jhat&quot;&gt;&lt;a href=&quot;#jhat&quot; class=&quot;headerlink&quot; title=&quot;jhat&quot;&gt;&lt;/a&gt;jhat&lt;/h3&gt;&lt;p&gt;jhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。&lt;/p&gt;
&lt;h3 id=&quot;jinfo&quot;&gt;&lt;a href=&quot;#jinfo&quot; class=&quot;headerlink&quot; title=&quot;jinfo&quot;&gt;&lt;/a&gt;jinfo&lt;/h3&gt;&lt;p&gt;jinfo 是查看某个Java进程的JVM的具体的参数的。&lt;/p&gt;
&lt;h3 id=&quot;javap&quot;&gt;&lt;a href=&quot;#javap&quot; class=&quot;headerlink&quot; title=&quot;javap&quot;&gt;&lt;/a&gt;javap&lt;/h3&gt;&lt;p&gt;javap是生成java简单汇编代码的工具。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些
    
    </summary>
    
      <category term="-Java -Java进阶" scheme="http://dreamleilei.github.io/categories/Java-Java%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="-Java -Java进阶" scheme="http://dreamleilei.github.io/tags/Java-Java%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github博客的多机使用</title>
    <link href="http://dreamleilei.github.io/2016/07/31/hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%9A%E6%9C%BA%E4%BD%BF%E7%94%A8/"/>
    <id>http://dreamleilei.github.io/2016/07/31/hexo-github博客的多机使用/</id>
    <published>2016-07-31T13:22:46.000Z</published>
    <updated>2018-09-01T00:59:42.203Z</updated>
    
    <content type="html">&lt;h3 id=&quot;折腾&quot;&gt;&lt;a href=&quot;#折腾&quot; class=&quot;headerlink&quot; title=&quot;折腾&quot;&gt;&lt;/a&gt;折腾&lt;/h3&gt;&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。&lt;/p&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新&lt;a href=&quot;http://blog.dreamleilei.com/2016/06/21/createGithubPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装heox博客&lt;/a&gt;的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。&lt;/p&gt;
&lt;p&gt;首先在linux本地本地创建一个分支，命名为source &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。&lt;/p&gt;
&lt;p&gt;添加远程分支。 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git remote add &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; url&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后把远程添加的远程分支add，commit然后push上去&lt;br&gt;这里push的时候记得要&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git push origin &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个时候就在linux分支上把应该做的工作都完成了。&lt;br&gt;接下来换windows系统。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; &amp;lt;url&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch origin &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在合并过程中出错的话可以强制远程覆盖本地&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch -all&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git reset --hard origin/&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以后每次操作前都应该&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后写完后&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo clean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后切换到source分支&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git add&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git commit&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git push&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;origin &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;折腾&quot;&gt;&lt;a href=&quot;#折腾&quot; class=&quot;headerlink&quot; title=&quot;折腾&quot;&gt;&lt;/a&gt;折腾&lt;/h3&gt;&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用l
    
    </summary>
    
      <category term="-折腾 -博客搭建" scheme="http://dreamleilei.github.io/categories/%E6%8A%98%E8%85%BE-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="-blog -折腾" scheme="http://dreamleilei.github.io/tags/blog-%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>代理和vpn的区别</title>
    <link href="http://dreamleilei.github.io/2016/06/25/%E4%BB%A3%E7%90%86%E5%92%8Cvpn%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dreamleilei.github.io/2016/06/25/代理和vpn的区别/</id>
    <published>2016-06-25T12:54:12.000Z</published>
    <updated>2018-09-01T00:59:42.210Z</updated>
    
    <content type="html">&lt;p&gt;之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷&lt;br&gt;用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。&lt;/p&gt;
&lt;h2 id=&quot;VPN&quot;&gt;&lt;a href=&quot;#VPN&quot; class=&quot;headerlink&quot; title=&quot;VPN&quot;&gt;&lt;/a&gt;VPN&lt;/h2&gt;&lt;h3 id=&quot;VPN的简单介绍&quot;&gt;&lt;a href=&quot;#VPN的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;VPN的简单介绍&quot;&gt;&lt;/a&gt;VPN的简单介绍&lt;/h3&gt;&lt;p&gt;首先看一下&lt;strong&gt;VPN&lt;/strong&gt;的维基百科:&lt;br&gt;&lt;img src=&quot;http://blogpicture.dreamleilei.com/blog-vpn-wiki.png&quot; alt=&quot;VPN&quot;&gt;&lt;/p&gt;
&lt;p&gt;VPN : &lt;em&gt;Virtual Private Network&lt;/em&gt;，是私人网络的通信方法。之前可以通过VPN进行蕃蔷&lt;/p&gt;
&lt;p&gt;构建VPN的几种方式的比较&lt;br&gt;常见的VPN链有pptp,l2tp,openvpn&lt;br&gt;具体的介绍可以参见以下链接:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gxbay.com/1559.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gxbay.com/1559.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;VPN的蕃蔷原理&quot;&gt;&lt;a href=&quot;#VPN的蕃蔷原理&quot; class=&quot;headerlink&quot; title=&quot;VPN的蕃蔷原理&quot;&gt;&lt;/a&gt;VPN的蕃蔷原理&lt;/h3&gt;&lt;p&gt; &amp;nbsp;&amp;nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器&lt;br&gt;（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统&lt;br&gt;中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，&lt;br&gt;可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止&lt;br&gt;一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？&lt;br&gt;&amp;nbsp;&amp;nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡&lt;br&gt;进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器&lt;br&gt;再帮你把数据流转向到真正的目的地。&lt;br&gt;  &amp;nbsp;&amp;nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，&lt;br&gt;  GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器&lt;br&gt;  ，无形中就能达到翻墙的效果。&lt;/p&gt;
&lt;h2 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h2&gt;&lt;p&gt;代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome&lt;br&gt;插件下的switchsharp等&lt;/p&gt;
&lt;h3 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h3&gt;&lt;p&gt;简而言之，就是代替客户端去做某些事情。&lt;br&gt;举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么&lt;br&gt;办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交&lt;br&gt;给你，这个时候你的兄弟就是正向代理。&lt;/p&gt;
&lt;h3 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;&gt;&lt;/a&gt;反向代理&lt;/h3&gt;&lt;p&gt;反向代理就是代理服务器的行为ie。&lt;br&gt;还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好&lt;br&gt;兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你&lt;br&gt;要买东西而不是他买东西。&lt;/p&gt;
&lt;p&gt;在写博客的时候，室友说了一句特别经典的话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gxbay.com/1559.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gxbay.com/1559.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wenda.chinabaike.com/b/38322/2013/1208/713383.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wenda.chinabaike.com/b/38322/2013/1208/713383.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jingpin.org/proxy-ssh-vpn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jingpin.org/proxy-ssh-vpn&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/25143289&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/25143289&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷&lt;br&gt;用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。&lt;/p&gt;
&lt;h2 id=&quot;VPN&quot;&gt;&lt;a href=&quot;#VPN&quot; class=&quot;headerlink&quot; title=&quot;VPN&quot;&gt;&lt;
    
    </summary>
    
      <category term="折腾" scheme="http://dreamleilei.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="vpn" scheme="http://dreamleilei.github.io/tags/vpn/"/>
    
      <category term="代理" scheme="http://dreamleilei.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>用vim + chrome 实现markdown文章的编写和实时预览</title>
    <link href="http://dreamleilei.github.io/2016/06/25/%E7%94%A8vim-chrome-%E5%AE%9E%E7%8E%B0markdown%E6%96%87%E7%AB%A0%E7%9A%84%E7%BC%96%E5%86%99%E5%92%8C%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/"/>
    <id>http://dreamleilei.github.io/2016/06/25/用vim-chrome-实现markdown文章的编写和实时预览/</id>
    <published>2016-06-25T02:53:54.000Z</published>
    <updated>2018-09-01T00:59:42.211Z</updated>
    
    <content type="html">&lt;h1 id=&quot;用vim-chrome-编写markdown格式的文章&quot;&gt;&lt;a href=&quot;#用vim-chrome-编写markdown格式的文章&quot; class=&quot;headerlink&quot; title=&quot;用vim + chrome 编写markdown格式的文章&quot;&gt;&lt;/a&gt;用vim + chrome 编写markdown格式的文章&lt;/h1&gt;&lt;h2 id=&quot;vim-markdown&quot;&gt;&lt;a href=&quot;#vim-markdown&quot; class=&quot;headerlink&quot; title=&quot;vim-markdown&quot;&gt;&lt;/a&gt;vim-markdown&lt;/h2&gt;&lt;p&gt; 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做&lt;strong&gt;&lt;a href=&quot;https://github.com/plasticboy/vim-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim-markdown&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; 的插件，具体插件的安装方法可以参考&lt;a href=&quot;https://github.com/plasticboy/vim-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim-markdown&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Markdown-Preview-Plus&quot;&gt;&lt;a href=&quot;#Markdown-Preview-Plus&quot; class=&quot;headerlink&quot; title=&quot;Markdown Preview Plus&quot;&gt;&lt;/a&gt;Markdown Preview Plus&lt;/h2&gt;&lt;p&gt;在chrome中安装&lt;strong&gt;Markdown Preview Plus&lt;/strong&gt;插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开&lt;br&gt;md文档，实现markdown的预览。&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/plasticboy/vim-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/plasticboy/vim-markdown&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用vim-chrome-编写markdown格式的文章&quot;&gt;&lt;a href=&quot;#用vim-chrome-编写markdown格式的文章&quot; class=&quot;headerlink&quot; title=&quot;用vim + chrome 编写markdown格式的文章&quot;&gt;&lt;/a&gt;用vi
    
    </summary>
    
      <category term="折腾" scheme="http://dreamleilei.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="博客" scheme="http://dreamleilei.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="vim" scheme="http://dreamleilei.github.io/tags/vim/"/>
    
      <category term="markdown" scheme="http://dreamleilei.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>如何把wordpress博客导入到hexo静态博客中</title>
    <link href="http://dreamleilei.github.io/2016/06/24/%E5%A6%82%E4%BD%95%E6%8A%8Awordpress%E5%8D%9A%E5%AE%A2%E5%AF%BC%E5%85%A5%E5%88%B0hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%B8%AD/"/>
    <id>http://dreamleilei.github.io/2016/06/24/如何把wordpress博客导入到hexo静态博客中/</id>
    <published>2016-06-24T07:45:09.000Z</published>
    <updated>2018-09-01T00:59:42.211Z</updated>
    
    <content type="html">&lt;p&gt;搭建完&lt;strong&gt;&lt;a href=&quot;http://blog.dreamleilei.com/2016/06/21/createGithubPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo 博客&lt;/a&gt;&lt;/strong&gt;之后，准备把之前自己用&lt;em&gt;wordpress&lt;/em&gt;搭建的博客迁移到&lt;br&gt;&lt;strong&gt;hexo&lt;/strong&gt;博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy&lt;br&gt;然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件&lt;br&gt;,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现&lt;br&gt;了把wordpress博客迁徙到hexo静态博客中。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加&lt;strong&gt;hexo-migrator-wordpress&lt;/strong&gt;插件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo-migrator-wordpress --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把自己的wordpress博客中的文章导出为xml文件&lt;br&gt;在自己的wordpress博客里，找到工具，然后导出格式为xml文件。&lt;br&gt;wordpress导出xml文件参考下图:&lt;br&gt;&lt;img src=&quot;http://blogpicture.dreamleilei.com/blog-my-pic.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过工具把xml文件转换为多个md文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo migrate wordpress wordpress.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.chinaz.com/web/2014/0610/354945.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.chinaz.com/web/2014/0610/354945.shtml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;搭建完&lt;strong&gt;&lt;a href=&quot;http://blog.dreamleilei.com/2016/06/21/createGithubPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo 博客&lt;/a&gt;&lt;/strong&gt;之后，准备把之前
    
    </summary>
    
      <category term="折腾" scheme="http://dreamleilei.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="博客" scheme="http://dreamleilei.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://dreamleilei.github.io/tags/hexo/"/>
    
      <category term="博客迁移" scheme="http://dreamleilei.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
      <category term="wordpress" scheme="http://dreamleilei.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo 搭建个人博客小结</title>
    <link href="http://dreamleilei.github.io/2016/06/21/github%20+%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%BB%93/"/>
    <id>http://dreamleilei.github.io/2016/06/21/github + hexo 搭建个人博客小结/</id>
    <published>2016-06-21T11:16:01.000Z</published>
    <updated>2018-09-01T01:36:40.905Z</updated>
    
    <content type="html">&lt;p&gt;最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hexo 是一款开源的&lt;strong&gt;静态博客&lt;/strong&gt;生成器，用&lt;em&gt;node.js&lt;/em&gt;语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install nodejs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装nodejs,安装完node.js之后也要安装&lt;em&gt;npm&lt;/em&gt;工具，npm安装同样用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install npm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成之后，需要用npm安装hexo，安装命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; install hexo -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;记得要-g参数，-g表示全局安装，不加-g表示非全局安装&lt;/p&gt;
&lt;h2 id=&quot;如何写博客&quot;&gt;&lt;a href=&quot;#如何写博客&quot; class=&quot;headerlink&quot; title=&quot;如何写博客&quot;&gt;&lt;/a&gt;如何写博客&lt;/h2&gt;&lt;p&gt;先介绍几个简单的命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hexo clean&lt;/strong&gt; （清空hexo的public文件夹)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hexo generate&lt;/strong&gt; （第一次用的时候调用，表示生成静态文件)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hexo new [article]&lt;/strong&gt; (生成一片新文章）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hexo deploy&lt;/strong&gt; (提交文章）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用&lt;strong&gt;hexo new [article]&lt;/strong&gt; 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦&lt;/p&gt;
&lt;h2 id=&quot;如何更换主题&quot;&gt;&lt;a href=&quot;#如何更换主题&quot; class=&quot;headerlink&quot; title=&quot;如何更换主题&quot;&gt;&lt;/a&gt;如何更换主题&lt;/h2&gt;&lt;p&gt;如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的&lt;a href=&quot;https://www.zhihu.com/question/24422335&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的&lt;strong&gt;themes&lt;/strong&gt;文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后&lt;br&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;hexo clean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦&lt;/p&gt;
&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了&lt;/p&gt;
&lt;p&gt;##使用标签&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new page tags&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后会生成一个&lt;code&gt;./source/tags/index.md&lt;/code&gt;文件,在文件中指定 &lt;code&gt;type: &amp;quot;tags&amp;quot;&lt;/code&gt;，重新部署即可&lt;/p&gt;
&lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接:&quot;&gt;&lt;/a&gt;参考链接:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/AfQnQjy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.tuicool.com/articles/AfQnQjy/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/465830080ea9&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/739bf1305e66&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/739bf1305e66&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.isetsuna.com/hexo/install-config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.isetsuna.com/hexo/install-config/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/619dab2d3c08&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/619dab2d3c08&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; t
    
    </summary>
    
      <category term="折腾" scheme="http://dreamleilei.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="博客" scheme="http://dreamleilei.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://dreamleilei.github.io/tags/hexo/"/>
    
      <category term="折腾" scheme="http://dreamleilei.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java日期类的总结</title>
    <link href="http://dreamleilei.github.io/2016/05/19/java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93/"/>
    <id>http://dreamleilei.github.io/2016/05/19/java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93/</id>
    <published>2016-05-19T07:42:27.000Z</published>
    <updated>2018-09-01T00:59:42.205Z</updated>
    
    <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下:&lt;/p&gt;
&lt;p&gt;[java]Date date = new Date(126, 4, 20);[/java]&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;初始化一个Calendar类的语句:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[java]Calendar calendar = Calendar.getInstance();[/java]&lt;/p&gt;
&lt;p&gt;如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。&lt;/p&gt;
&lt;p&gt;其中key值包含Calendar.YEAR等枚举类型。&lt;/p&gt;
&lt;p&gt;要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日&lt;/p&gt;
&lt;p&gt;除了年月日的获取，对时间的操作也是类似的。&lt;/p&gt;
&lt;p&gt;说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat&lt;/p&gt;
&lt;p&gt;创建方式如下:&lt;/p&gt;
&lt;p&gt;[java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;amp;quot;yyyy-MM-dd HH:mm:ss&amp;amp;quot;);[/java]&lt;/p&gt;
&lt;p&gt;对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java 8中已经增加了time包了，但是如果由于条
    
    </summary>
    
      <category term="Java date" scheme="http://dreamleilei.github.io/categories/Java-date/"/>
    
      <category term="Java复习" scheme="http://dreamleilei.github.io/categories/Java-date/Java%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://dreamleilei.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>初学Spring MVC</title>
    <link href="http://dreamleilei.github.io/2016/04/27/%E5%88%9D%E5%AD%A6spring-mvc/"/>
    <id>http://dreamleilei.github.io/2016/04/27/初学spring-mvc/</id>
    <published>2016-04-27T05:06:34.000Z</published>
    <updated>2018-09-01T00:59:42.202Z</updated>
    
    <content type="html">&lt;p&gt;学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.&lt;/p&gt;
&lt;p&gt;(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签&lt;/p&gt;
&lt;p&gt;&amp;lt;context:component-scan base-package=&amp;quot;&amp;quot; &amp;gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &amp;#39;context:component-scan&amp;#39; 的声明 ,同理,其它的标签也是一样.&lt;/p&gt;
&lt;p&gt;(2)在Controller中@RequestMapping(value=&amp;quot;&amp;quot;)愚蠢的写成了@RequestMapping(name=&amp;quot;&amp;quot;)于是报错了..&lt;/p&gt;
&lt;p&gt;(3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&lt;/p&gt;
&lt;p&gt;(4)在配置REST风格的应用的时候,jackson-databind是不可缺少的&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.&lt;/p&gt;
&lt;p&gt;(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的
    
    </summary>
    
      <category term="Spring MVC" scheme="http://dreamleilei.github.io/categories/Spring-MVC/"/>
    
    
      <category term="spring MVC" scheme="http://dreamleilei.github.io/tags/spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Redis 使用</title>
    <link href="http://dreamleilei.github.io/2016/04/25/Redis%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://dreamleilei.github.io/2016/04/25/Redis 使用/</id>
    <published>2016-04-25T05:01:13.000Z</published>
    <updated>2018-09-01T00:59:42.209Z</updated>
    
    <content type="html">&lt;p&gt;(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &amp;nbsp; password&lt;/p&gt;
&lt;p&gt;(2)在登录的时候需要redis-cli -a password &amp;nbsp;或者登录之后调用auth命令输入密码&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &amp;nbsp; password&lt;/p&gt;
&lt;p&gt;(2)在登录的时候需要redis-cli -a password &amp;nbsp;或者登录之后调用auth命令输入密码&lt;/p&gt;

    
    </summary>
    
      <category term="redis" scheme="http://dreamleilei.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="http://dreamleilei.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mysql主从复制的实现</title>
    <link href="http://dreamleilei.github.io/2016/04/25/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://dreamleilei.github.io/2016/04/25/Mysql主从复制的实现/</id>
    <published>2016-04-25T01:44:46.000Z</published>
    <updated>2018-09-01T00:59:42.208Z</updated>
    
    <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server-id=2&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;host-name=&amp;lt;hostname&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;host-user=&amp;lt;user&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;host-password=&amp;lt;password&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;master-log-file=&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; 然后重启数据库&lt;/p&gt;
&lt;p&gt;(2)在启动mysql后输入命令:&lt;/p&gt;
&lt;p&gt;&amp;nbsp; CHANGE MASTER TO&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; MASTER_NAME=&amp;#39;&amp;#39;,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; MASTER_USER=&amp;#39;&amp;#39;,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; MASTER_PASSWORD=&amp;#39;&amp;#39;,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; MASTER_LOG_FILE=&amp;#39;&amp;#39;,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; MASTER_LOG_POS&amp;#39;&amp;#39;;&lt;/p&gt;
&lt;p&gt;START SLAVE;&lt;/p&gt;
&lt;p&gt;后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://blog.csdn.net/hw_libo/article/details/38072287&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/hw_libo/article/details/38072287&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (1)修改 /etc/my.cnf 文件,
    
    </summary>
    
      <category term="数据库" scheme="http://dreamleilei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://dreamleilei.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://dreamleilei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>本机Redis多端口启动</title>
    <link href="http://dreamleilei.github.io/2016/04/23/%E6%9C%AC%E6%9C%BAredis%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%90%AF%E5%8A%A8/"/>
    <id>http://dreamleilei.github.io/2016/04/23/本机redis多端口启动/</id>
    <published>2016-04-22T22:09:04.000Z</published>
    <updated>2018-09-01T00:59:42.202Z</updated>
    
    <content type="html">&lt;p&gt;最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.&lt;/p&gt;
&lt;p&gt;根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的,&lt;/p&gt;
&lt;p&gt;应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.&lt;/p&gt;
&lt;p&gt;根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过fin
    
    </summary>
    
      <category term="redis" scheme="http://dreamleilei.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="http://dreamleilei.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>第三方登录</title>
    <link href="http://dreamleilei.github.io/2016/04/21/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://dreamleilei.github.io/2016/04/21/第三方登录/</id>
    <published>2016-04-21T01:45:44.000Z</published>
    <updated>2018-09-01T01:35:20.887Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.&lt;/p&gt;
&lt;p&gt;   首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址,&lt;/p&gt;
&lt;p&gt;这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误.&lt;/p&gt;
&lt;p&gt;  目前所做的开发流程:&lt;/p&gt;
&lt;p&gt;  (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:&lt;a href=&quot;http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;qq互联api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ&lt;/p&gt;
&lt;p&gt;  (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url&lt;/p&gt;
&lt;p&gt;自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑:&lt;/p&gt;
&lt;p&gt;(1)idea开发中没有正确的把包导入&lt;/p&gt;
&lt;p&gt;(2)servlet的api的mvn包导入错误&lt;/p&gt;
&lt;p&gt;(3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的&lt;/p&gt;
&lt;p&gt;后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见: &lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&lt;/a&gt;&lt;br&gt;oauth授权模式可以更方便的保护密码,实现资源的限制访问.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.&lt;/p&gt;
&lt;p&gt; 
    
    </summary>
    
      <category term="第三方登陆" scheme="http://dreamleilei.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/"/>
    
    
      <category term="oauth" scheme="http://dreamleilei.github.io/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>struts2实现rest</title>
    <link href="http://dreamleilei.github.io/2015/12/09/struts2%E5%AE%9E%E7%8E%B0rest/"/>
    <id>http://dreamleilei.github.io/2015/12/09/struts2实现rest/</id>
    <published>2015-12-08T23:11:24.000Z</published>
    <updated>2018-09-01T00:59:42.210Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的&lt;/span&gt;&lt;a href=&quot;http://korent.dreamleilei.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;软酷网&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;重构,把后天重构成rest格式的,试着用了一下strus2的rest插件.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先说明一下什么是rest.&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;rest介绍&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt; 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth)&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定&lt;/span&gt;&lt;/p&gt;
&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&amp;#39;Source Code Pro&amp;#39;;font-size:16pt;&quot;&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;span style=&quot;font-size: 20px; color: rgb(232, 191, 106);&quot;&gt;&amp;lt;constant &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(186, 186, 186);&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(165, 194, 97);&quot;&gt;=&amp;quot;struts.mapper.class&amp;quot; &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(186, 186, 186);&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(165, 194, 97);&quot;&gt;=&amp;quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&amp;quot; &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(232, 191, 106);&quot;&gt;/&amp;gt;
&amp;lt;constant &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(186, 186, 186);&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(165, 194, 97);&quot;&gt;=&amp;quot;struts.mapper.prefixMapping&amp;quot; &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(186, 186, 186);&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(165, 194, 97);&quot;&gt;=&amp;quot;/rest:rest,:struts&amp;quot; &lt;/span&gt;&lt;span style=&quot;font-size: 20px; color: rgb(232, 191, 106);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;即可让config-browser生效.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;参考链接:&amp;nbsp;&lt;a href=&quot;http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的&lt;/span&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="struts2" scheme="http://dreamleilei.github.io/categories/struts2/"/>
    
    
      <category term="struts2" scheme="http://dreamleilei.github.io/tags/struts2/"/>
    
      <category term="Rest" scheme="http://dreamleilei.github.io/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>软酷实训总结</title>
    <link href="http://dreamleilei.github.io/2015/09/15/%E8%BD%AF%E9%85%B7%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://dreamleilei.github.io/2015/09/15/软酷实训总结/</id>
    <published>2015-09-15T01:33:24.000Z</published>
    <updated>2018-09-01T00:59:42.203Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的&amp;lt;/span&amp;gt;,前端的收货对我来说是最大的&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&amp;amp;lt;&amp;amp;lt;jquery基础教程&amp;amp;gt;&amp;amp;gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;c
    
    </summary>
    
      <category term="实习" scheme="http://dreamleilei.github.io/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="软酷实训总结" scheme="http://dreamleilei.github.io/tags/%E8%BD%AF%E9%85%B7%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习总结(一)</title>
    <link href="http://dreamleilei.github.io/2015/08/03/hibernate%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E4%B8%80)/"/>
    <id>http://dreamleilei.github.io/2015/08/03/hibernate学习总结(一)/</id>
    <published>2015-08-02T19:45:32.000Z</published>
    <updated>2018-09-01T00:59:42.204Z</updated>
    
    <content type="html">&lt;p&gt;#&lt;br&gt;    &amp;nbsp; &amp;nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&amp;amp;nbsp;,xml的根元素是hibernate-configuration,然后还有&amp;amp;lt;session-factory&amp;amp;gt;子元素,里面是&amp;amp;lt;property&amp;amp;nbsp;name = &amp;amp;quot;&amp;amp;quot; &amp;amp;gt; &amp;amp;lt; /property&amp;amp;gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &amp;amp;nbsp;Configuration conf &amp;amp;nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&amp;amp;quot;name&amp;amp;quot;, &amp;amp;quot;value&amp;amp;#39;)来进行创建.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &amp;amp;quot; &amp;amp;quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&amp;amp;quot; &amp;amp;quot;, length = &amp;amp;quot; &amp;amp;quot;, unique= &amp;amp;quot; &amp;amp;quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&amp;amp;quot;&amp;amp;quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &amp;amp;quot;()&amp;amp;quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &amp;amp;quot; &amp;amp;quot;, joinColumns={@JoinColumn(name = &amp;amp;quot; &amp;amp;quot;, referenceColumn=&amp;amp;quot; &amp;amp;#39; ... ) })映射,&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;如果是List,需要指定@OrderColumn(name = &amp;amp;quot;&amp;amp;quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &amp;amp;nbsp;@AttributeOverrides(@AttributeOverride(name = &amp;amp;quot; &amp;amp;quot;, column=@Column()),..);进行注解修饰.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.&amp;lt;/span&amp;gt;

&amp;amp;nbsp;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;#&lt;br&gt;    &amp;nbsp; &amp;nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span style=&amp;
    
    </summary>
    
      <category term="hibernate" scheme="http://dreamleilei.github.io/categories/hibernate/"/>
    
    
      <category term="hibernate" scheme="http://dreamleilei.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>struts2 学习总结</title>
    <link href="http://dreamleilei.github.io/2015/07/26/struts2%20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://dreamleilei.github.io/2015/07/26/struts2 学习总结/</id>
    <published>2015-07-26T07:35:01.000Z</published>
    <updated>2018-09-01T00:59:42.209Z</updated>
    
    <content type="html">&lt;p&gt;#&lt;br&gt;    从昨天开始看李刚的&amp;lt;&amp;lt;轻量级JavaEE&amp;gt;&amp;gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.&lt;/p&gt;
&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&amp;amp;lt;s:debug /&amp;amp;gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;line-height: 32px;&amp;quot;&amp;gt;假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&amp;amp;quot;&amp;amp;quot;和use.password=&amp;amp;quot;&amp;amp;#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;Map类型的参数格式为Key_&amp;lt;MapPropName&amp;gt;=&amp;lt;key&lt;em&gt;type&amp;gt; Element&lt;/em&gt;&amp;lt;MapPropName&amp;gt;=&amp;lt;key_type&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&amp;lt;s:filederror /&amp;gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&amp;lt;propName&amp;gt;=&amp;lt;tipMsg&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;valiators&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;lt;fieldName=&amp;quot;name&amp;quot; &amp;gt;(可以有多个)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;fileld-validator type=&amp;quot;type&amp;quot;&amp;gt;(可以有多个)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;param name=&amp;quot;条件&amp;#39;&amp;gt;条件&amp;lt;/param&amp;gt;(可以有多个)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;message key=&amp;quot;国际化提示消息&amp;quot;&amp;gt;如果校验错误,就输出这个信息&amp;lt;/message&amp;gt;(这个是必须的)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/field-validator&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;field-validator type=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; ………..&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/field-validator&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/fieldName&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;lt;/valiators&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;客户端校验:在&amp;lt;s:form中设置 validate=&amp;quot;true&amp;quot; &amp;gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;除了字段校验风格的校验器还有非字段校验风格的校验器.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;validators&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;lt;validator&amp;nbsp;type=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;param name=&amp;quot;filelName&amp;quot;&amp;gt;字段的名字&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;param name=&amp;quot;参数名&amp;quot;&amp;gt;参数值&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;…&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;lt;message key=&amp;quot;国际化消息&amp;quot;&amp;gt;..&amp;lt;/message&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;lt;/validator-type&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;设置格式是:在&amp;lt;filed-name short-circuit=&amp;quot;true&amp;quot; &amp;gt; 和&amp;lt;validator short-circuit=&amp;quot;true&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;校验文件的搜索规则:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;SuperActonName&amp;gt;-validation.xml&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;SuperActionName&amp;gt;-&amp;lt;MethodName&amp;gt;-validation.xml&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;ActionName&amp;gt;-validation.xml&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;ActionName&amp;gt;-&amp;lt;methodName&amp;gt;-validation.xml&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;输入校验的步骤:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)使用struts2配置的校验器进行输入校验&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)通过反射调用validteXxx方法&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;a href=&quot;http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏-300x82.png&quot; alt=&quot;2015-07-26 23:11:15 的截屏&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;利用struts2实现文件的上传&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;struts.multipart.parser=jakarta&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;说明struts2的解析器是用到jakarta&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;文件上传中用到struts标签库中的一个标签&amp;lt;s:file &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;然后需要配置相应的action:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;需要额外配置三个参数:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;File xxx;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;String xxxContentType;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;String xxxFileName;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;实现文件下载:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;action&amp;gt;的配置:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;result type=&amp;quot;stream&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;lt;param name =&amp;quot;inputName&amp;#39; &amp;gt;xxxx(和上面的返回的InputStream的方法名相对应)&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;lt;param name=&amp;quot;contentType&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;lt;param name=&amp;quot;contentDisposition&amp;quot; /&amp;gt;下载的文件名&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;param name=&amp;quot;bufferSize&amp;quot;&amp;gt;下载缓冲区大小&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;    &amp;nbsp;&lt;br&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#&lt;br&gt;    从昨天开始看李刚的&amp;lt;&amp;lt;轻量级JavaEE&amp;gt;&amp;gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.&lt;/p&gt;
&lt;div&gt;&lt;br&gt;    &lt;span style=&quot;font-size:20px;&quot;&gt;
    
    </summary>
    
      <category term="struts2" scheme="http://dreamleilei.github.io/categories/struts2/"/>
    
    
      <category term="strus2" scheme="http://dreamleilei.github.io/tags/strus2/"/>
    
      <category term="学习总结" scheme="http://dreamleilei.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JSP复习</title>
    <link href="http://dreamleilei.github.io/2015/07/24/jsp-e5-a4-8d-e4-b9-a0/"/>
    <id>http://dreamleilei.github.io/2015/07/24/jsp-e5-a4-8d-e4-b9-a0/</id>
    <published>2015-07-24T08:14:22.000Z</published>
    <updated>2018-09-01T00:59:42.207Z</updated>
    
    <content type="html">&lt;p&gt;#&lt;br&gt;    &lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&amp;nbsp;复习了JSP 的一些基础的东西,总结一下.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;

&amp;lt;span style=&amp;quot;font-family:arial,helvetica,sans-serif;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-family:arial,helvetica,sans-serif;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;jsp的四种基本语法:&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)jsp注释&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)jsp表达式的输出&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)jsp声明&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(4)jsp脚本&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)jsp注释:&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;注释的格式&amp;amp;lt;%-- --%&amp;amp;gt; html的注释格式&amp;amp;lt;!-- --&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)jsp表达式的输出&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;%=表达式%&amp;amp;gt;(注意后面没有分号);&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)jsp声明&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;%!&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;%&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;nbsp;在此声明,多次请求一个jsp只会初始化一次声明.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(4)jsp脚本&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;% 脚本 %&amp;amp;gt;凡是在&amp;amp;lt;% %&amp;amp;gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;jsp的三个编译指令&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)page指令 &amp;amp;lt;%@ page .... %&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;这是对整个页面的一个描述后面可以加language=&amp;amp;quot;&amp;amp;quot; , charset=&amp;amp;quot;&amp;amp;quot;, contenttype=&amp;amp;quot;&amp;amp;quot;, import=&amp;amp;quot;&amp;amp;quot;, isErrorPage=&amp;amp;quot;&amp;amp;quot;, isElIgnored=&amp;amp;quot;&amp;amp;quot;, extends=&amp;amp;quot;&amp;amp;quot;.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)taglib指令&amp;amp;lt;%@ taglib uri=&amp;amp;quot;&amp;amp;quot; prefix=&amp;amp;quot;&amp;amp;quot;%&amp;amp;gt;(后面提到的两个属性都是必需的)&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)include指令&amp;amp;lt;%@ include file=&amp;amp;quot;&amp;amp;quot;(必需的,且只有一个) %&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;JSP的七个指令动作:&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)jsp:forward 转发&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&amp;amp;lt;jsp:param name=&amp;amp;quot;&amp;amp;quot; value=&amp;amp;quot;&amp;amp;quot; &amp;amp;gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)jsp:include 用于动态引入一个JSP页面&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;也可以通过&amp;amp;lt;jsp:param&amp;amp;gt;设置参数&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;page=&amp;amp;quot;&amp;amp;quot;该属性是必需的&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;autoflash=&amp;amp;quot;&amp;amp;quot;&amp;amp;gt;设置是否自动刷新&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)jsp:param 初始化参数&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;一般和jsp:forward和jsp:include混合使用&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(4)jsp:plugin&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(5)jsp:useBean 引入JavaBean实例&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;lt;jsp:useBean id=&amp;amp;quot;&amp;amp;quot;(必需的)&amp;amp;nbsp;class=&amp;amp;quot;&amp;amp;#39; beanName=&amp;amp;quot;&amp;amp;quot; scope=&amp;amp;quot;&amp;amp;quot;(可选属性application,page,request,session)&amp;lt;/span&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(6)jsp:setProperty 设置javaBean实例中的属性&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;jsp:setProerty property = &amp;amp;quot;&amp;amp;quot;(必需的) name=&amp;amp;quot;&amp;amp;quot;(必需的) &amp;amp;nbsp;value=&amp;amp;quot;&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(7)jsp:getProperty 获取javaBean实例中的属性&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;&amp;amp;lt;jsp:getProperty property =&amp;amp;quot;&amp;amp;quot; name=&amp;amp;quot;&amp;amp;quot;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;jsp的9个内置对象.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)request&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于Servlet中HttpRequest对象,&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)response&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于Servlet中HttpResponse对象&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)session&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应与Servlet中HttpSession对象&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(4)page&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于pageContext实例.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(5)config&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于ServletConfig对象&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(6)application&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;ServletContext实例&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于整个web应用&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(7)out&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(8)exception&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(9)pageContext&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;对应于ServletContext对象.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;amp;nbsp;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;JSP的生命周期:&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(2)翻译阶段:将JSP代码翻译成Servlet代码&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(4)初始化阶段:&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(5)运行阶段&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;

&amp;lt;font face=&amp;quot;arial, helvetica, sans-serif&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px; line-height: 32px;&amp;quot;&amp;gt;(6)销毁阶段&amp;lt;/span&amp;gt;&amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;#&lt;br&gt;    &lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&amp;nbsp;复习了JSP 的一些基础的东西,总结一下.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;

&amp;lt;span sty
    
    </summary>
    
      <category term="Java复习" scheme="http://dreamleilei.github.io/categories/Java%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://dreamleilei.github.io/tags/Java/"/>
    
      <category term="JSP" scheme="http://dreamleilei.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Servlet复习</title>
    <link href="http://dreamleilei.github.io/2015/07/24/Servlet%E5%A4%8D%E4%B9%A0/"/>
    <id>http://dreamleilei.github.io/2015/07/24/Servlet复习/</id>
    <published>2015-07-23T17:42:27.000Z</published>
    <updated>2018-09-01T00:59:42.209Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;我学的都是最基础的,最简单的东西.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件.

根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了.

最基础的是&amp;amp;lt;servlet&amp;amp;gt;元素一定在&amp;amp;lt;servlet-mapping&amp;amp;gt;元素之后,而&amp;amp;lt;context&amp;amp;gt;元素在&amp;amp;lt;servlet&amp;amp;gt;元素之前,&amp;amp;lt;context-param&amp;amp;gt;在&amp;amp;lt;servlet&amp;amp;gt;元素之前,在此列出一下最常用的一些元素的顺序:&amp;amp;lt;display-name&amp;amp;gt; , &amp;amp;lt;description&amp;amp;gt;, &amp;amp;lt;filter&amp;amp;gt;,&amp;amp;lt;filter-mapping&amp;amp;gt;, &amp;amp;lt;listener&amp;amp;gt;,&amp;amp;lt;servlet&amp;amp;gt; ,&amp;amp;lt;servlet-mapping&amp;amp;gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;lt;servlet&amp;amp;gt;配置:需要的子元素&amp;amp;lt;servlet-name&amp;amp;gt; &amp;amp;lt;servlet-classs&amp;amp;gt;(这两个元素是必须的)

&amp;amp;nbsp;&amp;amp;lt;servlet-mapping&amp;amp;gt;配置:需要子元素&amp;amp;lt;servlet-name&amp;amp;gt;(此元素的值必须与&amp;amp;lt;servlet&amp;amp;gt;中的某个值匹配) &amp;amp;lt;url-pattern&amp;amp;gt;(次元素可以有多个值) (这两个元素是必须的)

也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下:

@WebServlet(name=&amp;amp;quot;name&amp;amp;quot;, urlPatterns={&amp;amp;quot;pattern1&amp;amp;quot;, &amp;amp;quot;pattern2&amp;amp;#39;}, initParams={@WebInitParam(name=&amp;amp;quot;name&amp;amp;quot;, value=&amp;amp;quot;value&amp;amp;quot;), @WebInitParam(name=&amp;amp;quot;name1&amp;amp;quot;, value=&amp;amp;quot;value1&amp;amp;quot;)})&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;lt;filter&amp;amp;gt;配置:和servlet的配置基本一致,在此就不再重复.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;lt;listener&amp;amp;gt;配置:只需要&amp;amp;lt; listener-class&amp;amp;gt;子元素&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;&amp;amp;lt;context-param&amp;amp;gt;配置:需要的子元素&amp;amp;lt;param-name&amp;amp;gt;和&amp;amp;lt;param-value&amp;amp;gt;(至少这两个元素,且只准出现一次)&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name),

getAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(),

HttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&amp;amp;lt;servlet&amp;amp;gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;Cookie接口:&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;列举完了几个常用的Servlet接口,接下来谈一下Web应用,

Web应用的生命周期:

(1)启动阶段

(2)运行阶段

(3)终止阶段&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;Web应用的启动阶段:

(1)将web.xml读入内存中

(2)创建一个ServletContext实例

(3)初始化Filter

(4)初始化必要的Servlet(load-on-startup)&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;Web应用的运行阶段:Servlet都处于待命的状态&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;Web应用的终止阶段:

(1)销毁Servlet实例

(2)销毁Filter

(3)销毁与JavaWeb应用有关的对象,如ServletContext&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;谈一下Servlet的生命周期:

(1)初始化阶段

(2)运行阶段

(3)销毁阶段&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;初始化阶段:

(1)加载.class文件到内存中

(2)Servlet创建ServletConfig对象.

(3)创建Servlet对象

(4)调用Servlet的Init()方法&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;运行阶段:&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;销毁阶段;

调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;包含与转发:

ServletContext对象的getRequestDispatcher().forward() 或者.include();

或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.&amp;lt;/span&amp;gt;

&amp;lt;span style=&amp;quot;font-size:20px;&amp;quot;&amp;gt;重定向:

response.sendRedirect(String location)重定向会丢失所有的请求参数.&amp;lt;/span&amp;gt;

&amp;amp;nbsp;

&amp;amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复
    
    </summary>
    
      <category term="Java复习" scheme="http://dreamleilei.github.io/categories/Java%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://dreamleilei.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="http://dreamleilei.github.io/tags/Servlet/"/>
    
  </entry>
  
</feed>
