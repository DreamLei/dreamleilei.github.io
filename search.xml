<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[redis知识总结]]></title>
    <url>%2F2018%2F09%2F01%2Fredis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E8%B7%B5%E9%98%85%E8%AF%BB%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[最近在阅读《redis设计与实践》这本书，阅读这本书，了解了很多redis的内部实现，从开始会用，慢慢的向开始了解原理进军， 在此记录一下，方便后续记录和复习。 ##redis数据类型redis的数据类型如下，目前有且只有以下五中数据类型: String list hash set zset StringString 类型应该是redis五种数据类型中用到的最频繁的类型了，]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习心得]]></title>
    <url>%2F2017%2F03%2F11%2F%E5%AE%9E%E4%B9%A0%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[反思 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。 这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！]]></content>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git权威指南读书笔记]]></title>
    <url>%2F2016%2F08%2F03%2Fgit%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
      <categories>
        <category>git</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java问题定位技术]]></title>
    <url>%2F2016%2F08%2F01%2Fjava%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[简介 &nbsp;&nbsp;&nbsp;&nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西， 从而确定出问题所在和系统的瓶颈所在。 jps jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。 参数: -l 打印详细的类的信息，包括类的全称名。 -m 打印出虚拟机的输入的参数,即args。 -v 打印出虚拟机的具体参数。 jstack 既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令生成的内存快照，可以分析Java进程的内存信息。 快照中的一些信息会具体再写一篇博文进行叙述。 jstack 生成pid进程的java内存信息 jmapjmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。 -heap 打印出内存堆的信息。-histo 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。-histo:live 先进行一次内存回收，然后再打印-histo的东西。-dump:[live]format=b,file= 以proof二进制格式转储Java堆到指定filenanme文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。 jhatjhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。 jinfojinfo 是查看某个Java进程的JVM的具体的参数的。 javapjavap是生成java简单汇编代码的工具。]]></content>
      <categories>
        <category>-Java -Java进阶</category>
      </categories>
      <tags>
        <tag>-Java -Java进阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github博客的多机使用]]></title>
    <url>%2F2016%2F07%2F31%2Fhexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%9A%E6%9C%BA%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[折腾 &nbsp;&nbsp;&nbsp;&nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。 &nbsp;&nbsp;&nbsp;&nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新安装heox博客的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。 首先在linux本地本地创建一个分支，命名为source 1git checkout -b source 在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。 添加远程分支。 1git remote add source url 然后把远程添加的远程分支add，commit然后push上去这里push的时候记得要 1git push origin source 这个时候就在linux分支上把应该做的工作都完成了。接下来换windows系统。 1git clone &lt;url&gt; 然后 1git checkout -b source 1git fetch origin source 如果在合并过程中出错的话可以强制远程覆盖本地 1git fetch -all 然后 1git reset --hard origin/source 最后 1git fetch 以后每次操作前都应该 1git fetch 然后写完后 12hexo cleanhexo deploy 然后切换到source分支 1git add 1git commit 1git push 1origin source 这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。]]></content>
      <categories>
        <category>-折腾 -博客搭建</category>
      </categories>
      <tags>
        <tag>-blog -折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代理和vpn的区别]]></title>
    <url>%2F2016%2F06%2F25%2F%E4%BB%A3%E7%90%86%E5%92%8Cvpn%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。 VPNVPN的简单介绍首先看一下VPN的维基百科: VPN : Virtual Private Network，是私人网络的通信方法。之前可以通过VPN进行蕃蔷 构建VPN的几种方式的比较常见的VPN链有pptp,l2tp,openvpn具体的介绍可以参见以下链接: http://www.gxbay.com/1559.html VPN的蕃蔷原理 &nbsp;&nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？&nbsp;&nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器再帮你把数据流转向到真正的目的地。 &nbsp;&nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来， GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器 ，无形中就能达到翻墙的效果。 代理代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome插件下的switchsharp等 正向代理简而言之，就是代替客户端去做某些事情。举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交给你，这个时候你的兄弟就是正向代理。 反向代理反向代理就是代理服务器的行为ie。还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你要买东西而不是他买东西。 在写博客的时候，室友说了一句特别经典的话: 正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。 参考链接 http://www.gxbay.com/1559.htmlhttp://wenda.chinabaike.com/b/38322/2013/1208/713383.htmlhttp://jingpin.org/proxy-ssh-vpnhttps://www.zhihu.com/question/25143289https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.htmlhttps://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMAhttp://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>vpn</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用vim + chrome 实现markdown文章的编写和实时预览]]></title>
    <url>%2F2016%2F06%2F25%2F%E7%94%A8vim-chrome-%E5%AE%9E%E7%8E%B0markdown%E6%96%87%E7%AB%A0%E7%9A%84%E7%BC%96%E5%86%99%E5%92%8C%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%2F</url>
    <content type="text"><![CDATA[用vim + chrome 编写markdown格式的文章vim-markdown 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做vim-markdown 的插件，具体插件的安装方法可以参考vim-markdown Markdown Preview Plus在chrome中安装Markdown Preview Plus插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开md文档，实现markdown的预览。 参考链接 http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.htmlhttps://github.com/plasticboy/vim-markdown]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vim</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何把wordpress博客导入到hexo静态博客中]]></title>
    <url>%2F2016%2F06%2F24%2F%E5%A6%82%E4%BD%95%E6%8A%8Awordpress%E5%8D%9A%E5%AE%A2%E5%AF%BC%E5%85%A5%E5%88%B0hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[搭建完hexo 博客之后，准备把之前自己用wordpress搭建的博客迁移到hexo博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现了把wordpress博客迁徙到hexo静态博客中。 步骤 添加hexo-migrator-wordpress插件 1npm install hexo-migrator-wordpress --save 把自己的wordpress博客中的文章导出为xml文件在自己的wordpress博客里，找到工具，然后导出格式为xml文件。wordpress导出xml文件参考下图: 通过工具把xml文件转换为多个md文件 1hexo migrate wordpress wordpress.xml 参考链接 http://www.chinaz.com/web/2014/0610/354945.shtml]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>博客迁移</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github + hexo 搭建个人博客小结]]></title>
    <url>%2F2016%2F06%2F21%2Fgithub%20%2B%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。 如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考简书 hexo 是一款开源的静态博客生成器，用node.js语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用 1sudo yum install nodejs 安装nodejs,安装完node.js之后也要安装npm工具，npm安装同样用1sudo yum install npm 安装完成之后，需要用npm安装hexo，安装命令:12npm install hexo -g 记得要-g参数，-g表示全局安装，不加-g表示非全局安装 如何写博客先介绍几个简单的命令: hexo clean （清空hexo的public文件夹) hexo generate （第一次用的时候调用，表示生成静态文件) hexo new [article] (生成一片新文章） hexo deploy (提交文章） 调用hexo new [article] 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦 如何更换主题如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的链接进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的themes文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后12hexo cleanhexo deploy 就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦 安装插件配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了 ##使用标签1hexo new page tags 然后会生成一个./source/tags/index.md文件,在文件中指定 type: &quot;tags&quot;，重新部署即可 参考链接: http://www.tuicool.com/articles/AfQnQjy/http://www.jianshu.com/p/465830080ea9http://www.jianshu.com/p/739bf1305e66http://www.isetsuna.com/hexo/install-config/http://www.jianshu.com/p/619dab2d3c08]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java日期类的总结]]></title>
    <url>%2F2016%2F05%2F19%2FJava%E6%97%A5%E6%9C%9F%E7%B1%BB%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。 &nbsp;&nbsp;&nbsp;&nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了 &nbsp;&nbsp;&nbsp;&nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。 &nbsp;&nbsp;&nbsp;&nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下: [java]Date date = new Date(126, 4, 20);[/java] &nbsp;&nbsp;&nbsp;&nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。 &nbsp;&nbsp;&nbsp;&nbsp;初始化一个Calendar类的语句: &nbsp;&nbsp;&nbsp;&nbsp;[java]Calendar calendar = Calendar.getInstance();[/java] 如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。 其中key值包含Calendar.YEAR等枚举类型。 要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日 除了年月日的获取，对时间的操作也是类似的。 说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat 创建方式如下: [java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);[/java] 对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。]]></content>
      <categories>
        <category>Java date</category>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学Spring MVC]]></title>
    <url>%2F2016%2F04%2F27%2F%E5%88%9D%E5%AD%A6spring-mvc%2F</url>
    <content type="text"><![CDATA[学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑. (1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签 &lt;context:component-scan base-package=&quot;&quot; &gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &#39;context:component-scan&#39; 的声明 ,同理,其它的标签也是一样. (2)在Controller中@RequestMapping(value=&quot;&quot;)愚蠢的写成了@RequestMapping(name=&quot;&quot;)于是报错了.. (3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter (4)在配置REST风格的应用的时候,jackson-databind是不可缺少的]]></content>
      <categories>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 使用]]></title>
    <url>%2F2016%2F04%2F25%2FRedis%20%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &nbsp; password (2)在登录的时候需要redis-cli -a password &nbsp;或者登录之后调用auth命令输入密码]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql主从复制的实现]]></title>
    <url>%2F2016%2F04%2F25%2FMysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式, &nbsp; &nbsp; &nbsp; &nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-id=2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-name=&lt;hostname&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-user=&lt;user&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-password=&lt;password&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;master-log-file= &nbsp; &nbsp; 然后重启数据库 (2)在启动mysql后输入命令: &nbsp; CHANGE MASTER TO &nbsp; &nbsp; MASTER_NAME=&#39;&#39;, &nbsp; &nbsp; MASTER_USER=&#39;&#39;, &nbsp; &nbsp; MASTER_PASSWORD=&#39;&#39;, &nbsp; &nbsp; MASTER_LOG_FILE=&#39;&#39;, &nbsp; &nbsp; MASTER_LOG_POS&#39;&#39;; START SLAVE; 后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现 参考链接：http://blog.csdn.net/hw_libo/article/details/38072287 &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本机Redis多端口启动]]></title>
    <url>%2F2016%2F04%2F23%2F%E6%9C%AC%E6%9C%BAredis%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制. 根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的, 应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三方登录]]></title>
    <url>%2F2016%2F04%2F21%2F%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下. 首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录. 首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址, 这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误. 目前所做的开发流程: (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:qq互联api (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url 自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑: (1)idea开发中没有正确的把包导入 (2)servlet的api的mvn包导入错误 (3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的 后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见: http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.htmloauth授权模式可以更方便的保护密码,实现资源的限制访问.]]></content>
      <categories>
        <category>第三方登陆</category>
      </categories>
      <tags>
        <tag>oauth</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts2实现rest]]></title>
    <url>%2F2015%2F12%2F09%2Fstruts2%E5%AE%9E%E7%8E%B0rest%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的软酷网重构,把后天重构成rest格式的,试着用了一下strus2的rest插件. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先说明一下什么是rest.&nbsp;rest介绍 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定 &lt;constant name=&quot;struts.mapper.class&quot; value=&quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&quot; /&gt; &lt;constant name=&quot;struts.mapper.prefixMapping&quot; value=&quot;/rest:rest,:struts&quot; /&gt; 即可让config-browser生效. 上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射. &nbsp;&nbsp; &nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法 &nbsp;&nbsp;&nbsp;&nbsp;参考链接:&nbsp;http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html]]></content>
      <categories>
        <category>struts2</category>
      </categories>
      <tags>
        <tag>struts2</tag>
        <tag>Rest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软酷实训总结]]></title>
    <url>%2F2015%2F09%2F15%2F%E8%BD%AF%E9%85%B7%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&nbsp; &nbsp; &nbsp; &nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西. &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的&lt;/span&gt;,前端的收货对我来说是最大的&lt;span style=&quot;font-size:20px;&quot;&gt;jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&amp;lt;&amp;lt;jquery基础教程&amp;gt;&amp;gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!&lt;/span&gt;]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>软酷实训总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate学习总结(一)]]></title>
    <url>%2F2015%2F08%2F03%2Fhibernate%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[# &nbsp; &nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下. &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&amp;nbsp;,xml的根元素是hibernate-configuration,然后还有&amp;lt;session-factory&amp;gt;子元素,里面是&amp;lt;property&amp;nbsp;name = &amp;quot;&amp;quot; &amp;gt; &amp;lt; /property&amp;gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &amp;nbsp;Configuration conf &amp;nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&amp;quot;name&amp;quot;, &amp;quot;value&amp;#39;)来进行创建.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &amp;quot; &amp;quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&amp;quot; &amp;quot;, length = &amp;quot; &amp;quot;, unique= &amp;quot; &amp;quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&amp;quot;&amp;quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &amp;quot;()&amp;quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &amp;quot; &amp;quot;, joinColumns={@JoinColumn(name = &amp;quot; &amp;quot;, referenceColumn=&amp;quot; &amp;#39; ... ) })映射,&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;如果是List,需要指定@OrderColumn(name = &amp;quot;&amp;quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &amp;nbsp;@AttributeOverrides(@AttributeOverride(name = &amp;quot; &amp;quot;, column=@Column()),..);进行注解修饰.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts2 学习总结]]></title>
    <url>%2F2015%2F07%2F26%2Fstruts2%20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[# 从昨天开始看李刚的&lt;&lt;轻量级JavaEE&gt;&gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下. &nbsp;&nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载. &nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&amp;lt;s:debug /&amp;gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;line-height: 32px;&quot;&gt;假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&amp;quot;&amp;quot;和use.password=&amp;quot;&amp;#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&amp;nbsp;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.&lt;/span&gt; 类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种. 局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字. 全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的. 如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类 Map类型的参数格式为Key_&lt;MapPropName&gt;=&lt;keytype&gt; Element&lt;MapPropName&gt;=&lt;key_type&gt; &nbsp; 如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&lt;s:filederror /&gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&lt;propName&gt;=&lt;tipMsg&gt;. &nbsp; 接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式: &lt;valiators&gt; &nbsp; &nbsp;&lt;fieldName=&quot;name&quot; &gt;(可以有多个) &nbsp; &nbsp; &nbsp; &lt;fileld-validator type=&quot;type&quot;&gt;(可以有多个) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;param name=&quot;条件&#39;&gt;条件&lt;/param&gt;(可以有多个) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;message key=&quot;国际化提示消息&quot;&gt;如果校验错误,就输出这个信息&lt;/message&gt;(这个是必须的) &nbsp; &nbsp; &nbsp; &nbsp; &lt;/field-validator&gt;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&lt;field-validator type=&quot;&quot;&gt; &nbsp;&nbsp; &nbsp; ……….. &nbsp;&nbsp; &nbsp; &nbsp;&lt;/field-validator&gt; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/fieldName&gt; &nbsp;&lt;/valiators&gt; &nbsp; 客户端校验:在&lt;s:form中设置 validate=&quot;true&quot; &gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发. &nbsp; 除了字段校验风格的校验器还有非字段校验风格的校验器. &lt;validators&gt; &nbsp;&nbsp;&lt;validator&nbsp;type=&quot;&quot;&gt; &nbsp;&nbsp; &nbsp;&lt;param name=&quot;filelName&quot;&gt;字段的名字&lt;/param&gt; &nbsp;&nbsp; &nbsp;&lt;param name=&quot;参数名&quot;&gt;参数值&lt;/param&gt; &nbsp; &nbsp;… &nbsp;&nbsp; &nbsp; &lt;message key=&quot;国际化消息&quot;&gt;..&lt;/message&gt; &nbsp;&lt;/validator-type&gt; &nbsp; 短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息. 设置格式是:在&lt;filed-name short-circuit=&quot;true&quot; &gt; 和&lt;validator short-circuit=&quot;true&quot; &gt; 校验文件的搜索规则: &lt;SuperActonName&gt;-validation.xml &lt;SuperActionName&gt;-&lt;MethodName&gt;-validation.xml &lt;ActionName&gt;-validation.xml &lt;ActionName&gt;-&lt;methodName&gt;-validation.xml 规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载. 除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验. 手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法. &nbsp; 输入校验的步骤: (1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式 (2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步. (3)使用struts2配置的校验器进行输入校验 (4)通过反射调用validteXxx方法 (6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源. &nbsp; 利用struts2实现文件的上传 在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行 struts.multipart.parser=jakarta 说明struts2的解析器是用到jakarta 然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar &nbsp; 文件上传中用到struts标签库中的一个标签&lt;s:file &gt; 然后需要配置相应的action: 需要额外配置三个参数: File xxx; String xxxContentType; String xxxFileName; 这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可. &nbsp; 实现文件下载: 配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可. &lt;action&gt;的配置: &lt;result type=&quot;stream&quot;&gt; &nbsp;&nbsp; &nbsp; &lt;param name =&quot;inputName&#39; &gt;xxxx(和上面的返回的InputStream的方法名相对应)&lt;/param&gt; &nbsp;&nbsp; &lt;param name=&quot;contentType&quot;&gt;&lt;/param&gt; &nbsp;&nbsp;&lt;param name=&quot;contentDisposition&quot; /&gt;下载的文件名&lt;/param&gt; &lt;param name=&quot;bufferSize&quot;&gt;下载缓冲区大小&lt;/param&gt; &nbsp; &nbsp;]]></content>
      <categories>
        <category>struts2</category>
      </categories>
      <tags>
        <tag>strus2</tag>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP复习]]></title>
    <url>%2F2015%2F07%2F24%2Fjsp-e5-a4-8d-e4-b9-a0%2F</url>
    <content type="text"><![CDATA[# &nbsp;复习了JSP 的一些基础的东西,总结一下. &amp;nbsp; &lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.&lt;/span&gt;&lt;/span&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的四种基本语法:&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释:&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;注释的格式&amp;lt;%-- --%&amp;gt; html的注释格式&amp;lt;!-- --&amp;gt;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%=表达式%&amp;gt;(注意后面没有分号);&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%!&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;在此声明,多次请求一个jsp只会初始化一次声明.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;% 脚本 %&amp;gt;凡是在&amp;lt;% %&amp;gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的三个编译指令&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)page指令 &amp;lt;%@ page .... %&amp;gt;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;这是对整个页面的一个描述后面可以加language=&amp;quot;&amp;quot; , charset=&amp;quot;&amp;quot;, contenttype=&amp;quot;&amp;quot;, import=&amp;quot;&amp;quot;, isErrorPage=&amp;quot;&amp;quot;, isElIgnored=&amp;quot;&amp;quot;, extends=&amp;quot;&amp;quot;.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)taglib指令&amp;lt;%@ taglib uri=&amp;quot;&amp;quot; prefix=&amp;quot;&amp;quot;%&amp;gt;(后面提到的两个属性都是必需的)&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)include指令&amp;lt;%@ include file=&amp;quot;&amp;quot;(必需的,且只有一个) %&amp;gt;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的七个指令动作:&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp:forward 转发&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&amp;lt;jsp:param name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot; &amp;gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp:include 用于动态引入一个JSP页面&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;也可以通过&amp;lt;jsp:param&amp;gt;设置参数&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;page=&amp;quot;&amp;quot;该属性是必需的&amp;gt;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;autoflash=&amp;quot;&amp;quot;&amp;gt;设置是否自动刷新&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp:param 初始化参数&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;一般和jsp:forward和jsp:include混合使用&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp:plugin&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)jsp:useBean 引入JavaBean实例&lt;/span&gt;&lt;/font&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;jsp:useBean id=&amp;quot;&amp;quot;(必需的)&amp;nbsp;class=&amp;quot;&amp;#39; beanName=&amp;quot;&amp;quot; scope=&amp;quot;&amp;quot;(可选属性application,page,request,session)&lt;/span&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)jsp:setProperty 设置javaBean实例中的属性&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:setProerty property = &amp;quot;&amp;quot;(必需的) name=&amp;quot;&amp;quot;(必需的) &amp;nbsp;value=&amp;quot;&amp;quot;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)jsp:getProperty 获取javaBean实例中的属性&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:getProperty property =&amp;quot;&amp;quot; name=&amp;quot;&amp;quot;&amp;nbsp;&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的9个内置对象.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)request&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpRequest对象,&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)response&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpResponse对象&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)session&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应与Servlet中HttpSession对象&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)page&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于pageContext实例.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)config&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletConfig对象&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)application&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;ServletContext实例&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于整个web应用&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)out&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(8)exception&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(9)pageContext&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletContext对象.&lt;/span&gt;&lt;/font&gt; &amp;nbsp; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的生命周期:&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)翻译阶段:将JSP代码翻译成Servlet代码&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)初始化阶段:&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)运行阶段&lt;/span&gt;&lt;/font&gt; &lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)销毁阶段&lt;/span&gt;&lt;/font&gt;]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet复习]]></title>
    <url>%2F2015%2F07%2F24%2FServlet%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[&nbsp; 之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;我学的都是最基础的,最简单的东西.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件. 根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了. 最基础的是&amp;lt;servlet&amp;gt;元素一定在&amp;lt;servlet-mapping&amp;gt;元素之后,而&amp;lt;context&amp;gt;元素在&amp;lt;servlet&amp;gt;元素之前,&amp;lt;context-param&amp;gt;在&amp;lt;servlet&amp;gt;元素之前,在此列出一下最常用的一些元素的顺序:&amp;lt;display-name&amp;gt; , &amp;lt;description&amp;gt;, &amp;lt;filter&amp;gt;,&amp;lt;filter-mapping&amp;gt;, &amp;lt;listener&amp;gt;,&amp;lt;servlet&amp;gt; ,&amp;lt;servlet-mapping&amp;gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;servlet&amp;gt;配置:需要的子元素&amp;lt;servlet-name&amp;gt; &amp;lt;servlet-classs&amp;gt;(这两个元素是必须的) &amp;nbsp;&amp;lt;servlet-mapping&amp;gt;配置:需要子元素&amp;lt;servlet-name&amp;gt;(此元素的值必须与&amp;lt;servlet&amp;gt;中的某个值匹配) &amp;lt;url-pattern&amp;gt;(次元素可以有多个值) (这两个元素是必须的) 也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下: @WebServlet(name=&amp;quot;name&amp;quot;, urlPatterns={&amp;quot;pattern1&amp;quot;, &amp;quot;pattern2&amp;#39;}, initParams={@WebInitParam(name=&amp;quot;name&amp;quot;, value=&amp;quot;value&amp;quot;), @WebInitParam(name=&amp;quot;name1&amp;quot;, value=&amp;quot;value1&amp;quot;)})&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;filter&amp;gt;配置:和servlet的配置基本一致,在此就不再重复.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;listener&amp;gt;配置:只需要&amp;lt; listener-class&amp;gt;子元素&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;context-param&amp;gt;配置:需要的子元素&amp;lt;param-name&amp;gt;和&amp;lt;param-value&amp;gt;(至少这两个元素,且只准出现一次)&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name), getAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(), HttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&amp;lt;servlet&amp;gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;Cookie接口:&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;列举完了几个常用的Servlet接口,接下来谈一下Web应用, Web应用的生命周期: (1)启动阶段 (2)运行阶段 (3)终止阶段&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的启动阶段: (1)将web.xml读入内存中 (2)创建一个ServletContext实例 (3)初始化Filter (4)初始化必要的Servlet(load-on-startup)&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的运行阶段:Servlet都处于待命的状态&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的终止阶段: (1)销毁Servlet实例 (2)销毁Filter (3)销毁与JavaWeb应用有关的对象,如ServletContext&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;谈一下Servlet的生命周期: (1)初始化阶段 (2)运行阶段 (3)销毁阶段&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;初始化阶段: (1)加载.class文件到内存中 (2)Servlet创建ServletConfig对象. (3)创建Servlet对象 (4)调用Servlet的Init()方法&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;运行阶段:&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;销毁阶段; 调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;包含与转发: ServletContext对象的getRequestDispatcher().forward() 或者.include(); 或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;重定向: response.sendRedirect(String location)重定向会丢失所有的请求参数.&lt;/span&gt; &amp;nbsp; &amp;nbsp;]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql triggle 遇到的小问题]]></title>
    <url>%2F2015%2F07%2F22%2Fmysql%20triggle%20%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp; &nbsp;今天在做小组的faq的问答用到了mysql,遇到了一点小问题(mysql创建触发器的问题) &lt;span style=&quot;font-size:20px;&quot;&gt;首先创建触发器的格式 : CREATE TRIGGER &amp;lt;trigger_name&amp;gt; [BEFROE][AFTER]+[UPDATE][DELETE][INSERT] ON 表名 FOR EACH ROW BEGIN + sql语句 +END;&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;在表myTable中想要实现a字段根据b字段的变化而变化,定义的触发器是&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; AFTER UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;UPDATE myTable SET a=new.b WHERE myTable.b = new.b;这样之后可以编译成功,但是在用的时候会报错,&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;Can&amp;#39;t update table &amp;#39;app_faq_question&amp;#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.出现了这个问题,这个问题的原因是循环更新了,网上查了一下资料,说是不要用UPDATE,直接用SET,于是改为&lt;/span&gt; &lt;span style=&quot;font-size: 20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; BEFORE&amp;nbsp;UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt; &lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;SET a = new.b;最后还是失败了,然后把BEFORE改为AFTER成功.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px;&quot;&gt;还有学到了一点是mysql的timestamp类型,如果你设置:DEFAULT CURRENT_TIMESTAMP的话,它是会默认创建ON UPDATE CURRENT_TIMESTAMP只要你对这一行的记录有所更新,这个值就会更新,所以如果你想要取消掉这个特性,可以设置&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;DEFAULT&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;CURRENT_TIMESTAMP NULL, 或者直接给初始值 设置为0,还有就是mysql的NOW()函数,返回当前的时间,除此之外,每个表中只能有一个默CURRENT_TIMESTAMP,&lt;/span&gt; &lt;span style=&quot;font-size: 20px;&quot;&gt;所以你要实现两个,就要向上面我说的那样,创建一个触发器,来实现同步.&lt;/span&gt; &amp;nbsp;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
        <tag>mysql triggl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下java的JNI技术(入门)]]></title>
    <url>%2F2015%2F07%2F15%2FLinux%E4%B8%8Bjava%E7%9A%84JNI%E6%8A%80%E6%9C%AF(%E5%85%A5%E9%97%A8)%2F</url>
    <content type="text"><![CDATA[&nbsp; &nbsp; &nbsp; 今天下午,舍友都已经离校了,宿舍里只剩下了两个人,于是我想到了如果另一个舍友也离开之后我一个人,我的联通网怎么激活上网(我用的是Linux系统),于是我想起了之前我们学校贴吧曾经公开的激活工具的源码,核心代码是用C写的,于是我想可不可以自己写了Java程序,这样就可以跨平台激活了,然而要用C作为核心,于是我就想到了JNI技术. &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;好了,闲话不多说,开始进入我们的正题,JNI技术&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;是Java Native Interface的缩写，它提供了若干的&lt;/span&gt;[API](http://baike.baidu.com/subview/16068/5889234.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;实现了Java和其他语言的通信（主要是&lt;/span&gt;[C](http://baike.baidu.com/subview/10075/6770152.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;amp;&lt;/span&gt;[C++](http://baike.baidu.com/view/824.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;）,Object类中的clone方法就是native方法.&lt;/span&gt;&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先,创建一个Java文件,然后如果想要用到本地的方法,就是简单的声明方法,而不用实现,记得要加上native.&lt;/span&gt;&lt;/span&gt; [![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png) &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;例如,我写的这个sayHelloWorld方法就是一个本地的方法,完成之后,在命令行下调用javah命令. javah -jni TestJni (这里需要注意的是后面跟的参数是类名而不是文件名)&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;然后你会发现生成了一个和你的类名相同的.h文件,打开文件,格式如下:&lt;/span&gt; [![2015-07-15 18:01:11 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏-300x159.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏.png) &lt;span style=&quot;font-size:20px;&quot;&gt;请看第15和第16行,这就是你要写的函数的声明,刚才的命令已经把格式写好,你只需要创建相应的C文件或CPP文件即可(c文件和cpp文件命名无要求,但是必须包含之前生成的.h文件),我在这里创建的是sayHello.cpp&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;内容如下:&lt;/span&gt; [![2015-07-15 18:04:52 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏-300x102.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏.png) &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;你会发现该函数没有main函数,然后函数的返回值和参数以及函数名与之前生成的.h文件的是一样的,这个是必须的,然后里面写具体的实现就好.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 写完之后,需要编译生成动态链接库,(Linux下的动态链接库的格式为libXXXX.so),用gcc 命令 gcc -shared -fPIC -I /path&amp;nbsp;-I /path/ -I /usr/include -I ./ xxx.c -o libxxx.so (其中path是路径,一般在jdk下的include 里面包含头文件jni.h 在该目录下 有一个linux子目录,里面有jni_md.h这两个文件是我们所需要的,/usr/include 是我们C和CPP文件中一些必要的头文件,然后./表示是当前路径下生成.h文件 -o 表示生成的动态链接库的名称, -fPIC&amp;nbsp;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真 正代码段共享的目的.&amp;nbsp;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 接下来只需要导入这个库即可,导入的时候用System.loadLibrary(&amp;quot;库名&amp;quot;) (比如你之前生成的库名叫做libxxx.so,这里库名要填xxx不要前面的lib和后面 的.so).&lt;/span&gt;&lt;/span&gt; [![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png) &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;最后java 类名,运行,可能报异常这个时候要用java -Djava.library.path=./ 类名或者把相应的动态链接库复制到相应的u路径下即可.&lt;/span&gt;]]></content>
      <categories>
        <category>Java JNI入门</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的ArrayList的实现]]></title>
    <url>%2F2015%2F07%2F08%2F%E7%AE%80%E5%8D%95%E7%9A%84ArrayList%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[[code lang=”java”]import java.util.ArrayList;import java.util.Arrays;import java.util.Collection; /** Created by lei on 15-7-8.*/public class MyArrayList&lt;E&gt; { private Object[] element; @Override public String toString() { StringBuilder toString= new StringBuilder(&amp;quot;&amp;quot;); for (int i = 0; i &amp;lt; size; i++) { toString.append(i + &amp;quot;: &amp;quot; + element[i] + &amp;quot; &amp;quot;); } return toString.toString(); } private static final int defaultCapacity = 10; private int size = 0; private int capacity; public MyArrayList() { element = new Object[defaultCapacity]; this.capacity = defaultCapacity; } public MyArrayList(int capacity) { if (capacity &amp;lt; 0) { throw new IllegalArgumentException(&amp;quot;hello&amp;quot;); } element = new Object[capacity]; this.capacity = capacity; } public MyArrayList(Collection&lt;? extends E&gt; c) { element = c.toArray(); size = element.length; System.out.println(element.getClass()); System.out.println(Object[].class); if (element.getClass() != Object[].class) { Arrays.copyOf(element, element.length, Object[].class); } } public void add(E e) { ensureCapacity(size); element[size++] = e; } public void add(int index, E e) { rangeCheck(index); ensureCapacity(size + 1); int num = size - index; System.arraycopy(element, index, element, index + 1, num); element[index] = e; size++; } public boolean addAll(int index, Collection&lt;? extends E&gt; e) { rangeCheck(index); Object[] temp = e.toArray(); int num = size - index + temp.length; ensureCapacity(size + temp.length); System.arraycopy(element, index , element, index + temp.length , size - index ); System.arraycopy(temp, 0, element, index, temp.length); this.size += temp.length; return temp.length != 0; } public boolean addAll(Collection&lt;? extends E&gt; e) { Object[] temp = e.toArray(); ensureCapacity(size + temp.length); System.arraycopy(temp, 0, element, size, temp.length); this.size += temp.length; return temp.length != 0; } @SuppressWarnings(&quot;unchecked&quot;) public E element(int index) { rangeCheck(index); Object oldData = element[index]; return (E) oldData; } public E remove(int index) { rangeCheck(index); E oldData = element(index); System.arraycopy(element, index + 1, element, index, size - index - 1); element[--size] = null; return oldData; } public E remove() { E removeData; removeData = remove(size - 1); return removeData; } @SuppressWarnings(&quot;unchecked&quot;) public E get(int index) { rangeCheck(index); return element(index); } public boolean remove(Object o) { if (o == null) { for (int i = 0; i &amp;lt; size; i++) { if (element[i] == null) { fastRemove(i); return true; } } } else { for (int i = 0; i &amp;lt; size; i++) { if(element[i].equals(o)){ fastRemove(i); return true; } } } return false; } public int size(){ return this.size; } public int indexOf(Object o){ if(o == null){ for (int index = 0; index &amp;lt; size; index++) { if(element[index]==null) return index; } } else { for (int index = 0; index &amp;lt; size; index++) { if (element[index].equals(o)) { return index; } } } return -1; } public boolean contains(Object o){ return indexOf(o) &amp;gt; -1; } public boolean isEmpty(){ return size == 0; } public E set(int index, E e){ rangeCheck(index); E oldData = element(index); element[index] = e; return oldData; } public void clear(){ for (int i = 0; i &amp;lt; size; i++) { element[i] = null; } this.size = 0; } protected void removeRange(int fromIndex, int toIndex) { rangeCheck(fromIndex); rangeCheck(toIndex); int numMove = size - toIndex ; if(numMove &amp;gt; 0) { System.arraycopy(element, toIndex, element, fromIndex, numMove); } int newSize = size - (toIndex - fromIndex); for (int i = newSize; i &amp;lt; size; i++) { element[i] = null; } this.size = newSize; } private void fastRemove(int index) { System.arraycopy(element, index + 1, element, index, size - index - 1); element[--size] = null; } private void rangeCheck(int range) { if (range &amp;lt; 0 || range &amp;gt; size - 1) { throw new ArrayIndexOutOfBoundsException(range); } } public Object[] toArray(){ return Arrays.copyOf(element, size); } private void ensureCapacity(int capacity) { if (capacity &amp;gt;= this.capacity) { this.capacity = (this.capacity * 3) / 2 +1; if (this.capacity &amp;lt;= capacity) { this.capacity = capacity; } element = Arrays.copyOf(element, this.capacity); } } public static void main(String[] args) { MyArrayList&amp;lt;String&amp;gt; myList = new MyArrayList&amp;lt;String&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { myList.add(&amp;quot;hello world&amp;quot;); } ArrayList&amp;lt;String&amp;gt; addList = new ArrayList&amp;lt;String&amp;gt;(10); addList.add(&amp;quot;hello&amp;quot;); addList.add(&amp;quot;leilei&amp;quot;); addList.add(&amp;quot;leilei2&amp;quot;); myList.addAll(addList); System.out.println(addList); System.out.println(myList); System.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;)); System.out.println(myList.contains(&amp;quot;sf&amp;quot;)); System.out.println(myList.remove(&amp;quot;leilei&amp;quot;)); System.out.println(myList); System.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;)); myList.addAll(8, addList); System.out.println(myList); } }[/code]]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Idea + maven + struts2]]></title>
    <url>%2F2015%2F06%2F19%2Fidea-maven-struts2%2F</url>
    <content type="text"><![CDATA[今天下午花了两个 多小时才把maven +struts 2 + idea 的环境给搞定,正可谓是坑爹啊! &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;首先,还是之前一样,创建maven项目,然后选项一个webPP,创建完成后,在依赖管理中,添加struts2的依赖关系,&lt;/span&gt; ![2015-06-19 18:09:29 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏-300x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏.png)[![2015-06-19 18:09:54 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏-283x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏.png) &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;添加这两个依赖就好了,然后配置web.xml&lt;/span&gt; [![2015-06-19 18:12:51 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏-300x58.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏.png) &lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;然后还要配置struts.&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;xml 这个标记要放在resources下&lt;/span&gt;&lt;/span&gt; &amp;nbsp; ![2015-06-19 20:32:32 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏-300x204.png)(http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏.png) &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;这样就配置好了struts2的开发环境,(当时因为不知道struts2.xml,放置在哪个路径下,所以走了好多弯路).&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;配置国际化的时候出现乱码的情况,首先,写好的相应的properties文件,然后在终端下用native2ascii -encoding UTF-8 input.properties output.properties 最终生成utf8编码的文件,然后还应该设置struts的国际化资源的编码,在struts.xml中配置如:&lt;/span&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;然后在JSP的文件,设置JSP文件的编码格式,内容如下:&lt;/span&gt; &amp;nbsp; &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;这样就完成了,字符编码的统一.&lt;/span&gt;]]></content>
      <categories>
        <category>IDE 使用</category>
      </categories>
      <tags>
        <tag>Intellij IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql的简单语句]]></title>
    <url>%2F2015%2F06%2F15%2Fmysql%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[&nbsp; &nbsp; &nbsp; &nbsp; 最近在做一个小型的图书管理系统,用到了mysql的一点操作,不用不知道,一用吓一跳,码了一小会sql的语句,才发现自己的sql学的是如此的差,连基本的语句都不会了,更不用说是设计数据库了. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;基本的操作语句就不再陈述了,简单的,一些技巧性的东西,在此罗列一下,比如说想要让某一列的数值自动的增长,可以在建表的时候给某个列设置auto_increment 属性,然后设置在建表后的括号后面加上语句auto_increment=n ,n表示增长的基数. 然后移动字段,比如说你想把一个叫做Id的列移动到首行,这时候你要用到alter table &amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; first; 或者你想把某一个列移动到某个列的后面,这时候要用alter tabke&amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; after &amp;lt;列名&amp;gt;. 如果想要更改某个表的字符编码可以用alte table &amp;lt;表名&amp;gt; convert to character set &amp;lt;字符编码&amp;gt;.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来,谈谈用户的增加删除,修改密码.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;增加用户: 可以用create user &amp;#39;&amp;lt;username&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; identitied by &amp;#39;password&amp;#39;&amp;nbsp;&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 或者是insert into mysql.user(Host, User, Password) valuse(&amp;#39;%&amp;#39;, &amp;#39;test&amp;#39;, password(&amp;#39;test&amp;#39;)) &amp;#39;%&amp;#39;表示在任意主机可以登录,上条语句表示创建了一个test用户,密码为test. 要使命令生效,必须调用flush privileges.&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;删除用户:和增加用户相对立,drop user &amp;#39;&amp;lt;usernaem&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; ;&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;或者是通过修改mysql.user表来进行删除修改 delete from user where User = &amp;#39;user&amp;#39; and &amp;nbsp;Host = &amp;#39;host&amp;#39;;&lt;/span&gt; &amp;nbsp;&amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户授权: grant &amp;lt;privileges&amp;gt; on db.tb to &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;其中db.db表示给用户某个表授权,如果是*.*表示对所有的数据库授权,db.*表示对db数据库里面的所有表授权,然后&amp;lt;privileges&amp;gt; 有select , update, delete , alter, index, 等权限.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 看一下某一个用户有哪些权限可以通过 show grants for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;查看&amp;nbsp;&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户删除权利: revoke&amp;lt;privileges&amp;gt; on db.tb from &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; 其中,所有的参数与授权的时候的参数是一致的.&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;这个时候注意的是,如果你在授权的时候 grant all on db.special to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39; 和 grant all on db.* to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39;, 但是再给用户删除权利的时候只是调用revoke all on db.* 这个时候用户仍然具有 db.special的所有权限，这是一个比较特别的地方，具体的原因我也不知道．&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt; 用户密码的修改：可以通过 set password for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; = password(&amp;#39;newpassword&amp;#39;)来进行修改,也可以通过修改 mysql.user表来进行修改.&lt;/span&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改root密码:(1)在mysql.cnf中加上skip-grant-table然后重启mysql的服务,然后通过修改mysql的user表中的部分来进行密码的修改 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)mysqladmin -u root -p password newpasswd 然后输入密码,这个时候要用root权限,输入新密码 &nbsp; &amp;nbsp; &amp;nbsp;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mariadb 修改字符编码]]></title>
    <url>%2F2015%2F06%2F15%2FMariadb%20%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[&nbsp; &nbsp;最近在数据库的时候遇到了字符编码的问题,用了一点时间终于解决了这个问题,现在来分享一下解决的方法. &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; 首先,在mariadb中输入 show variables like &amp;#39;character%&amp;#39;,然后就会看到你的字符编码,结果如图:&lt;/span&gt;[![2015-06-15 20:12:09 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏-300x154.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏.png) &lt;span style=&quot;font-size:20px;&quot;&gt;从图片中可以看到你的server字符编码是latinl的,而client的字符编码是utf8的,你的database的编码也是utf8的,为了正常显示中文,需要将你的server和database的编码都设置成utf8的,&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;vim打开/etc/my.cnf&lt;/span&gt; [![2015-06-15 20:13:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏-300x183.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏.png)￼ &lt;span style=&quot;font-size:20px;&quot;&gt;找到[mysqld] 和[mysql],连个模块,然后添加character_set_server=utf8 和 character-set = utf8 然后保存,重启一下数据库&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;mariadb的重启命令是systemctl restart maria.db然后登录mariadb&amp;nbsp;&lt;span style=&quot;line-height: 32px;&quot;&gt;&amp;nbsp;show variables like &amp;#39;character%&lt;/span&gt;&lt;/span&gt;[![2015-06-15 20:17:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏-300x127.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏.png) &lt;span style=&quot;font-size:20px;&quot;&gt;看到字符编码都统一了为utf8,这样就解决了字符编码的乱码问题.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;对于以前已经创建好的表,可以用alter table db.tb convert to character set &amp;lt;字符编码&amp;gt;来实现问题的解决.&lt;/span&gt; &amp;nbsp; &amp;nbsp;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java复习资料小整理]]></title>
    <url>%2F2015%2F06%2F05%2FJava%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99%E5%B0%8F%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[&nbsp; &nbsp; &nbsp; &nbsp; 今天下午去听了一位学长的Java Web后台开发的讲座,受益匪浅,不过也深受打击了,学长告诉我他一周学完了SSH框架的struts和Hibernate,然后用两周的时间学完了Spring,整个学习Java EE的过程只用了一个多月,听了学长的一席话,整个人都不好了,曾经认为自己的学习能力是可以的,没想到学长的学习能力是如此的强大,看来还是要努力进取啊,不过比较高兴的一点是见到了一位好长时间都不见的好友,虽然不知道如何跟她说话,不过感觉还是可以的,好了,闲话不多说,现在开始步入正题. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;最近一周的时间一直在复习java SE,不妨趁着有时间,整理一下自己找到的一些学习资料&lt;/span&gt; &lt;span style=&quot;font-size:20px;&quot;&gt;首先是一些Java SE的基础资料,[http://www.cnblogs.com/dolphin0520/category/361055.html](http://www.cnblogs.com/dolphin0520/category/361055.html)(海子的博客,适合新手看)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/java-2014.html](http://blog.csdn.net/column/details/java-2014.html)(Thinking in Java的读书笔记,适合边读书边看)&lt;/span&gt; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1415453057980.html](http://www.open-open.com/lib/view/open1415453057980.html)(Java 数据类型的简介)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)(Java内部类介绍)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html)(Java闭包的介绍)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html](http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html)(正则表达式)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html](http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html)(正则表达式大全)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034895953.html](http://www.open-open.com/lib/view/open1421034895953.html)&amp;nbsp;(Java正则基础)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034806796.html](http://www.open-open.com/lib/view/open1421034806796.html)&amp;nbsp;(Java正则)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/concurrency.html](http://blog.csdn.net/column/details/concurrency.html)&amp;nbsp; (Java 并发编程)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog](http://zhangshixi.iteye.com/blog/679959)&lt;/span&gt;http://blog.csdn.net/ns_code/article/category/1823903&lt;span style=&quot;font-size:20px;&quot;&gt;[/679959](http://zhangshixi.iteye.com/blog/679959)&amp;nbsp; (Java nio)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/ns_code/article/category/1823903](http://blog.csdn.net/ns_code/article/category/1823903)&amp;nbsp;(深入理解Java虚拟机)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog/674856](http://zhangshixi.iteye.com/blog/674856)&amp;nbsp; (java一些集合类和其他类的源码解析)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;以上的链接差不多就是最近一周有在看的东西,希望自己能够向赵琛学长看齐,同时希望自己能过不浮躁,踏实一点,自己给自己鼓舞,加油!&amp;nbsp;&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>资料整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java nio]]></title>
    <url>%2F2015%2F06%2F04%2Fjava-nio%2F</url>
    <content type="text"><![CDATA[## 最近再看I/O的一些东西,写出来,感觉有点水,仅供自己复习的时候看 &lt;span style=&quot;font-size:20px;&quot;&gt;前面基本的I/O流都差不多有看过,根据字节流和字符流也是比较容易区分的,但是有时候需要写入固定格式的数据,这时候就有点头疼,比如说我要写书10条double类型的数据和10条int类型的数据到文件中,用基本的输入输出流有点麻烦,必须把double和int类型转换成String才能写入,这个时候就可以用到DataInputStream 和 OutputStream的字节流来写入,如果想要用字符流写入Int和double类型,用PrintWriter可以方便的写入,不过读出的时候却比较麻烦.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;还有之前遗忘的一点就是Sytstem.setIn(InputStream) System.setOut(InputStream) System.setErr(inputStream)这三个是系统的输入输出流重定向用的.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;字节流和字符流的区别除了基本单位不同外,我还学到了一点就是字符流是通过系统的缓冲区为中介的,如果你用字符流向文件写入的时候忘记了close(),你会那发现文件中并没有写入数据,这是因为字符流中读入的数据仍然存在系统的缓冲区中,这是你需要flush或者close掉字符流,你就会发现已经存在里面了.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:20px;&quot;&gt;对象的序列化也是I/O的比较重要的一个部分,不过没有仔细的研究过.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;字节流转换为字符流的InputStreamReader 和OutputStreamWriter可以很好的帮助我们从键盘中输入汉字,然后以字符的形式写入到另一个流中(比如说写入到文本中,此时不会出现乱码)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;最近还有在看一些NIO的东西&lt;/span&gt; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中的BtyeBuffer可以人为的去创建一段缓冲区,通过调用ByteBuffer.allocate(size)来创建,除了ByteBuffer外,其他类型的Buffer也都有,不过ByteBuffer比较常见.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中多了的东西叫做Channel的,FileInputStream, FileOutputStream和RandomAcessFile,都可以调用getChannel()方法,产生一个通道,利用这个特性可以提高IO读写的速度&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;read() 和write()方法中可以直接以自己定义的缓冲区作为目标,当缓冲区从读状态变成写入的时候,一定要先调用flip()这个方法把limit设置为position,然后把position设置为0,然后写入的时候刚好把要写入的内容写入,然后调用clear方法,这是把position设置为0,limit设置为capcity,又实现了从0开始读数据.&lt;/span&gt;]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>nio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java nio 实现文件复制]]></title>
    <url>%2F2015%2F06%2F04%2FJava%20nio%20%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%2F</url>
    <content type="text"><![CDATA[[code lang=”java”]/** Created by lei on 15-6-4./import java.io.;import java.nio.*;import java.nio.channels.FileChannel; public class MyCopy1 { public static void main(String[] args) throws IOException { File file1 = new File(args[0]); File file2 = new File(args[1]); FileOutputStream fileOutputStream = new FileOutputStream(file2); FileInputStream fileInputStream = new FileInputStream(file1); FileChannel fileChannel = fileInputStream.getChannel(); FileChannel fileChannel1 = fileOutputStream.getChannel(); // fileChannel.transferTo( 0, fileChannel.size(),fileChannel1); fileChannel1.transferFrom(fileChannel, 0, fileChannel.size()); fileChannel.close(); fileChannel1.close(); } } [/code]]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java nio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java复习(二) 闭包和类的加载与初始化]]></title>
    <url>%2F2015%2F05%2F31%2Fjava%E5%A4%8D%E4%B9%A0(%E4%BA%8C)%20%E9%97%AD%E5%8C%85%E5%92%8C%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[参考链接:http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html (闭包) 参考链接:http://www.importnew.com/6579.html(类的加载和初始化) 一个类加载的时候只是会初始化它的static成员变量和static域(从上往下依次加载),而类的初始化则必须在加载的基础上依次初始化非static变量和非static域(从上往下依次加载),然后调用类的构造器,进行初始化.若一个类中包含父类,则必须先初始化父类(当一个类要加载时也是同样的),这样递归到没有父类的类,然后父类到子类依次执行初始化顺序,首先从父类到子类依次加载类,然后从父类到子类依次初始化静态域和静态常量,从父类到子类依次 初始化非静态域和非静态常量,和构造器(先初始非静态的变量,然后初始化构造器) &nbsp; &nbsp; 闭包的概念:链接中已经挺详细的,这也是内部类的一个用途]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>闭包</tag>
        <tag>类的加载与初始化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java复习(一) 内部类]]></title>
    <url>%2F2015%2F05%2F30%2FJava%E5%A4%8D%E4%B9%A0(%E4%B8%80)%20%E5%86%85%E9%83%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[原文链接:http://www.open-open.com/lib/view/open1422791124330.html看了一下内部类的博客,博客上讲的十分的棒,很清楚,但是有些东西还是需要自己来总结一下,巩固基础. 首先内部类的定义,简单的根据字面意思就是定义在内部中的类,叫做内部类 内部类又可以分为: 静态内部类(static 类型的class) 成员内部类(定义在一个class内部中的class但是不能用static修饰) 局部内部类(定义在方法中的class)像局部变量一样，不能被public, protected, private和static修饰。 匿名内部类(未命名的class) &nbsp; 内部类的性质: 首先,成员内部中的属性和方法不能用static修饰! 但可以有static final 的数据成员.成员内部类可以访问外部类的属性和方法,而外部类却无法直接访问内部类中的属性和方法,要想访问内部类中属性和方法需要实例化一个成员内部类对象,然后访问.相同级别的成员内部类之间可以相互访问(包括private属性修饰的,这就意味着private失效).在外部类的static方法中无法直接访问内成员内部类.,可以用于闭包. &nbsp; 静态内部类只能访问外部类的static修饰的属性和方法,，这是由Java语法中”静态方法不能直接访问非静态成员”所限定,外部类访问静态内部类的时候可以直接new一个静态内部类对象,也可以通过.外部类名.new 内部类() 来访问,其它类中无法直接访问静态内部类. &nbsp; 局部内部类:(此时没有过多了解,先不谈) &nbsp; 匿名内部类:(先不谈);匿名内部类要访问的外部类局部变量必须是final修饰的]]></content>
      <categories>
        <category>Java复习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij idea 下配置tomact运行jsp]]></title>
    <url>%2F2015%2F05%2F30%2FIntellij%20idea%E4%B8%8B%E9%85%8D%E7%BD%AEtomact%E8%BF%90%E8%A1%8Cjsp%2F</url>
    <content type="text"><![CDATA[昨天接到一个突如其来的好消息,就是我的甲骨文杯的比赛进了决赛,本来是要被刷掉的,可是因为前面的队伍存在这样那样的问题,所以取消了他们的比赛资格,就这样,我们的三人小分队就顺利的进入了决赛(虽然我很水,靠的是宇神和伟神),不过这样让我头疼了,本来想搞前端开发的我就这样要学java了(自从知道自己没进决赛,已经两星期没看java了),既然要学java,那就有必要进阶一下 ,学完java基础,学点java web的东西,从事java web应用开发,既然要学java web应用开发,自然用到JSP和Servlet,既然用到这两个,自然就离不开tomact,既然用到tomact,就必然要用到idea配置tomact环境. &lt;span style=&quot;font-size:14px;&quot;&gt;好了,废话不多说,现在开始我的苦逼旅程之路.&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;首先打开File &amp;gt; Setting &amp;gt; Build Execution Delopyment 然后点击右上角的+ 选择tomact server 然后配置好自己的tomact路径.&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 08:59:53 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏-269x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏.png)&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;第二步:&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;打开File &amp;gt; Project Structure &amp;gt; Modules ,然后点击右边的Dependence,点击+ 选择2Library,添加进tomact的安装包即可&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:04:06 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏-300x172.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏.png)&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;第三步:&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;[​](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;span style=&quot;line-height: 20.7999992370605px;&quot;&gt;打开Run &amp;gt; Edit Congitures进行配置即可.&lt;/span&gt;[![2015-05-30 09:07:16 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏-300x193.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏.png)&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:07:23 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏-300x189.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:14px;&quot;&gt;第四部:&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;在左边的文件中找到要运行的jsp文件,右击Run即可.&lt;/span&gt; &amp;nbsp; &lt;span style=&quot;font-size:14px;&quot;&gt;注意事项:&lt;/span&gt; &lt;span style=&quot;font-size:14px;&quot;&gt;配置tomact的时候可能因为权限的问题,idea找不到tomact记得权限一定要给够&lt;/span&gt; &amp;nbsp;]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Intellij IDEA</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中正则匹配]]></title>
    <url>%2F2015%2F05%2F21%2Fjs%E4%B8%AD%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[\表示转义.\w表示匹配所有的字符或者数字 \\.表示匹配小数点]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WordPress搭建个人博客]]></title>
    <url>%2F2015%2F04%2F19%2FWordPress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[# 刚刚用wordpress成功的搭建了自己的个人博客主页,分享一下 &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;条件:虚拟主机+域名&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先你要有一个独立的空间,比如你可以申请万网的虚拟主机或者申请一个虚拟的云服务器之类的,总之你需要有一个空间放wodrpess,本人使用的万网提供的虚拟主机,小伙伴们如果也想要申请一下的话可以登录到_**http://www.net.cn/hosting/free/**_&amp;nbsp;来申请自己的个人虚拟空间(不过每个人申请一个免费的,而且期限只有一年),申请的过程也不是太繁琐,就是需要各种拍照,各种认证.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;申请到虚拟主机之后登录到万网查看自己的主机信息,大约如下&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;[![test](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test-300x109.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test.png)&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;以后你就可以通过ftp登陆到相应的站点管理自己的空间了,有了这个之后,你去网上下载一个wordpress的压缩包,用ftp 上传到你的htdocs目录下,然后在万网登录自己的空间,解压一下,然后安装wordpress(网上教程和博文好多,此处不再重复),记得我当时遇到的问题是数据库的登录地址,不要填localhost要填万网提供的那个域名.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;安装完成后,你需要将自己的域名解析到自己的虚拟主机的ip,你可以在dns.la网站上设置免费的域名解析服务,我在这里不再啰嗦.&lt;/span&gt;&lt;/span&gt; ## 分享一下安装完wordpress后做的几件事: &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先安装主题,主题有好多,你可以根据自己的喜好选择你所喜欢的主题.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后安装一些必要的插件.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后完善一下自己的资料啥的.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;我安装的插件:&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;FCEditor 一款不错的文本编辑插件,让你的编辑更加得心应手.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;wp-player 为了让自己得博客更加炫酷,可以实现博客中添加音乐的功能,具体的安装操作网上也有比较详细的教程.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;simple local avatars 这个插件可以让你上传自己的头像.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;为了让自己得首页更加的多彩,我还条件了新浪微博的挂件,和虾米音乐.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;新浪微博的挂件安装方法:http://app.weibo.com/tool/weiboshow在新浪微博的小工具里找到微博秀,然后他会给你提供HTML的代码,在wordpress的自定义,小工具里添加文本然后粘贴相应的HTML代码,即可实现新浪微博的挂件功能.&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;虾米音乐的实现方法:登录虾米音乐的官方网站,然后搜索到o歌曲后点击more选择ai转帖到其它网站g同样也会得到一段HTML代码,根据以上类似的方法就可以实现首页的音乐播放器.&lt;/span&gt;&lt;/span&gt;]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下 Intellij idea + github]]></title>
    <url>%2F2015%2F04%2F17%2FLinux%E4%B8%8B%20Intellij%20idea%20%2B%20github%2F</url>
    <content type="text"><![CDATA[## 刚在Intellij上实现了github的同步,分享一下 首先,打开一个工程,或者新建一个工程,然后在工具栏中单击VCS, 然后选中import into version control ,然后选中share project on github, (中间输入密码的环节省略),然后会弹出窗口:[![2015-04-17 21:19:36 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏-300x156.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏.png) New repository 就是你的仓库名,然后下面填描述,然后点集Share,完成本地代码,上传到Github中 &amp;nbsp; ## 远程代码克隆到本地 点击VCS,然后选中checkout from control version,然后选中github,[![2015-04-17 21:24:10 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏-300x119.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏.png) Git Repository URL就是你想要拉倒本地的远程仓库的url, Parent Director就是本地目录,然后点击Clone,就可以实现将远程代码克隆到本地. &amp;nbsp; 代码修改. git commit( CTRL + K) git push ( CTRL + Shift + K ) 也可以点击VCS,然后选中commit 或者push进行git的commit和push命令.]]></content>
      <categories>
        <category>IDE 使用</category>
      </categories>
      <tags>
        <tag>Intellij IDEA</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij idea 快捷键]]></title>
    <url>%2F2015%2F04%2F17%2FIntellij%20idea%20windows%20%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[原文：http://www.cnblogs.com/tonycody/p/3257601.html 【常规】 Ctrl+Shift + Enter，语句完成 “！”，否定完成，输入表达式时按 “！”键 Ctrl+E，最近的文件 Ctrl+Shift+E，最近更改的文件 Shift+Click，可以关闭文件 Ctrl+[ OR ]，可以跑到大括号的开头与结尾 Ctrl+F12，可以显示当前文件的结构 Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择 Ctrl+N，可以快速打开类 Ctrl+Shift+N，可以快速打开文件 Alt+Q，可以看到当前方法的声明 Ctrl+P，可以显示参数信息 Ctrl+Shift+Insert，可以选择剪贴板内容并插入 Alt+Insert，可以生成构造器/Getter/Setter等 Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义 Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch Ctrl+Enter，导入包，自动修正 Ctrl+Alt+L，格式化代码 Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作 Ctrl+Alt+O，优化导入的类和包 Ctrl+R，替换文本 Ctrl+F，查找文本 Ctrl+Shift+Space，自动补全代码 Ctrl+空格，代码提示（与系统输入法快捷键冲突） Ctrl+Shift+Alt+N，查找类中的方法或变量 Alt+Shift+C，最近的更改 Alt+Shift+Up/Down，上/下移一行 Shift+F6，重构 - 重命名 Ctrl+X，删除行 Ctrl+D，复制行 Ctrl+/或Ctrl+Shift+/，注释（//或者//）** Ctrl+J，自动代码（例如：serr） Ctrl+Alt+J，用动态模板环绕 Ctrl+H，显示类结构图（类的继承层次） Ctrl+Q，显示注释文档 Alt+F1，查找代码所在位置 Alt+1，快速打开或隐藏工程面板 Ctrl+Alt+left/right，返回至上次浏览的位置 Alt+left/right，切换代码视图 Alt+Up/Down，在方法间快速移动定位 Ctrl+Shift+Up/Down，向上/下移动语句 F2 或 Shift+F2，高亮错误或警告快速定位 Tab，代码标签输入完成后，按 Tab，生成代码 Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失 Alt+F3，逐个往下查找相同文本，并高亮显示 Ctrl+Up/Down，光标中转到第一行或最后一行下 Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处） Ctrl+Alt+B，跳转到方法实现处 Ctrl+Shift+Backspace，跳转到上次编辑的地方 Ctrl+O，重写方法 Ctrl+Alt+Space，类名自动完成 Ctrl+Alt+Up/Down，快速跳转搜索结果 Ctrl+Shift+J，整合两行 Alt+F8，计算变量值 Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本 Ctrl+Alt+Shift+V，简单粘贴 Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口 F12，把焦点从编辑器移到最近使用的工具窗口 Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器 Ctrl+W，可以选择单词继而语句继而行继而函数 Ctrl+Shift+W，取消选择光标所在词 Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置 Ctrl+I，实现方法 Ctrl+Shift+U，大小写转化 Ctrl+Y，删除当前行 Shift+Enter，向下插入新行 psvm/sout，main/System.out.println(); Ctrl+J，查看更多 Ctrl+Shift+F，全局查找 Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找 Ctrl+Shift+S，高级搜索 Ctrl+U，转到父类 Ctrl+Alt+S，打开设置对话框 Alt+Shift+Inert，开启/关闭列选择模式 Ctrl+Alt+Shift+S，打开当前项目/模块属性 Ctrl+G，定位行 Alt+Home，跳转到导航栏 Ctrl+Enter，上插一行 Ctrl+Backspace，按单词删除 Ctrl+”+/-“，当前方法展开、折叠 Ctrl+Shift+”+/-“，全部展开、折叠 【调试部分、编译】 Ctrl+F2，停止 Alt+Shift+F9，选择 Debug Alt+Shift+F10，选择 Run Ctrl+Shift+F9，编译 Ctrl+Shift+F10，运行 Ctrl+Shift+F8，查看断点 F8，步过 F7，步入 Shift+F7，智能步入 Shift+F8，步出 Alt+Shift+F8，强制步过 Alt+Shift+F7，强制步入 Alt+F9，运行至光标处 Ctrl+Alt+F9，强制运行至光标处 F9，恢复程序 Alt+F10，定位到断点 Ctrl+F8，切换行断点 Ctrl+F9，生成项目 Alt+1，项目 Alt+2，收藏 Alt+6，TODO Alt+7，结构 Ctrl+Shift+C，复制路径 Ctrl+Alt+Shift+C，复制引用，必须选择类名 Ctrl+Alt+Y，同步 Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单） Shift+F12，还原默认布局 Ctrl+Shift+F12，隐藏/恢复所有窗口 Ctrl+F4，关闭 Ctrl+Shift+F4，关闭活动选项卡 Ctrl+Tab，转到下一个拆分器 Ctrl+Shift+Tab，转到上一个拆分器 【重构】 Ctrl+Alt+Shift+T，弹出重构菜单 Shift+F6，重命名 F6，移动 F5，复制 Alt+Delete，安全删除 Ctrl+Alt+N，内联 【查找】 Ctrl+F，查找 Ctrl+R，替换 F3，查找下一个 Shift+F3，查找上一个 Ctrl+Shift+F，在路径中查找 Ctrl+Shift+R，在路径中替换 Ctrl+Shift+S，搜索结构 Ctrl+Shift+M，替换结构 Alt+F7，查找用法 Ctrl+Alt+F7，显示用法 Ctrl+F7，在文件中查找用法 Ctrl+Shift+F7，在文件中高亮显示用法 【VCS】 Alt+~，VCS 操作菜单 Ctrl+K，提交更改 Ctrl+T，更新项目 Ctrl+Alt+Shift+D，显示变化【常规】 Ctrl+Shift + Enter，语句完成 “！”，否定完成，输入表达式时按 “！”键 Ctrl+E，最近的文件 Ctrl+Shift+E，最近更改的文件 Shift+Click，可以关闭文件 Ctrl+[ OR ]，可以跑到大括号的开头与结尾 Ctrl+F12，可以显示当前文件的结构 Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择 Ctrl+N，可以快速打开类 Ctrl+Shift+N，可以快速打开文件 Alt+Q，可以看到当前方法的声明 Ctrl+P，可以显示参数信息 Ctrl+Shift+Insert，可以选择剪贴板内容并插入 Alt+Insert，可以生成构造器/Getter/Setter等 Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义 Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch Ctrl+Enter，导入包，自动修正 Ctrl+Alt+L，格式化代码 Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作 Ctrl+Alt+O，优化导入的类和包 Ctrl+R，替换文本 Ctrl+F，查找文本 Ctrl+Shift+Space，自动补全代码 Ctrl+空格，代码提示（与系统输入法快捷键冲突） Ctrl+Shift+Alt+N，查找类中的方法或变量 Alt+Shift+C，最近的更改 Alt+Shift+Up/Down，上/下移一行 Shift+F6，重构 - 重命名 Ctrl+X，删除行 Ctrl+D，复制行 Ctrl+/或Ctrl+Shift+/，注释（//或者//）** Ctrl+J，自动代码（例如：serr） Ctrl+Alt+J，用动态模板环绕 Ctrl+H，显示类结构图（类的继承层次） Ctrl+Q，显示注释文档 Alt+F1，查找代码所在位置 Alt+1，快速打开或隐藏工程面板 Ctrl+Alt+left/right，返回至上次浏览的位置 Alt+left/right，切换代码视图 Alt+Up/Down，在方法间快速移动定位 Ctrl+Shift+Up/Down，向上/下移动语句 F2 或 Shift+F2，高亮错误或警告快速定位 Tab，代码标签输入完成后，按 Tab，生成代码 Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失 Alt+F3，逐个往下查找相同文本，并高亮显示 Ctrl+Up/Down，光标中转到第一行或最后一行下 Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处） Ctrl+Alt+B，跳转到方法实现处 Ctrl+Shift+Backspace，跳转到上次编辑的地方 Ctrl+O，重写方法 Ctrl+Alt+Space，类名自动完成 Ctrl+Alt+Up/Down，快速跳转搜索结果 Ctrl+Shift+J，整合两行 Alt+F8，计算变量值 Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本 Ctrl+Alt+Shift+V，简单粘贴 Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口 F12，把焦点从编辑器移到最近使用的工具窗口 Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器 Ctrl+W，可以选择单词继而语句继而行继而函数 Ctrl+Shift+W，取消选择光标所在词 Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置 Ctrl+I，实现方法 Ctrl+Shift+U，大小写转化 Ctrl+Y，删除当前行 Shift+Enter，向下插入新行 psvm/sout，main/System.out.println(); Ctrl+J，查看更多 Ctrl+Shift+F，全局查找 Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找 Ctrl+Shift+S，高级搜索 Ctrl+U，转到父类 Ctrl+Alt+S，打开设置对话框 Alt+Shift+Inert，开启/关闭列选择模式 Ctrl+Alt+Shift+S，打开当前项目/模块属性 Ctrl+G，定位行 Alt+Home，跳转到导航栏 Ctrl+Enter，上插一行 Ctrl+Backspace，按单词删除 Ctrl+”+/-“，当前方法展开、折叠 Ctrl+Shift+”+/-“，全部展开、折叠 【调试部分、编译】 Ctrl+F2，停止 Alt+Shift+F9，选择 Debug Alt+Shift+F10，选择 Run Ctrl+Shift+F9，编译 Ctrl+Shift+F10，运行 Ctrl+Shift+F8，查看断点 F8，步过 F7，步入 Shift+F7，智能步入 Shift+F8，步出 Alt+Shift+F8，强制步过 Alt+Shift+F7，强制步入 Alt+F9，运行至光标处 Ctrl+Alt+F9，强制运行至光标处 F9，恢复程序 Alt+F10，定位到断点 Ctrl+F8，切换行断点 Ctrl+F9，生成项目 Alt+1，项目 Alt+2，收藏 Alt+6，TODO Alt+7，结构 Ctrl+Shift+C，复制路径 Ctrl+Alt+Shift+C，复制引用，必须选择类名 Ctrl+Alt+Y，同步 Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单） Shift+F12，还原默认布局 Ctrl+Shift+F12，隐藏/恢复所有窗口 Ctrl+F4，关闭 Ctrl+Shift+F4，关闭活动选项卡 Ctrl+Tab，转到下一个拆分器 Ctrl+Shift+Tab，转到上一个拆分器 【重构】 Ctrl+Alt+Shift+T，弹出重构菜单 Shift+F6，重命名 F6，移动 F5，复制 Alt+Delete，安全删除 Ctrl+Alt+N，内联 【查找】 Ctrl+F，查找 Ctrl+R，替换 F3，查找下一个 Shift+F3，查找上一个 Ctrl+Shift+F，在路径中查找 Ctrl+Shift+R，在路径中替换 Ctrl+Shift+S，搜索结构 Ctrl+Shift+M，替换结构 Alt+F7，查找用法 Ctrl+Alt+F7，显示用法 Ctrl+F7，在文件中查找用法 Ctrl+Shift+F7，在文件中高亮显示用法 【VCS】 Alt+~，VCS 操作菜单 Ctrl+K，提交更改 Ctrl+T，更新项目 Ctrl+Alt+Shift+D，显示变化]]></content>
      <categories>
        <category>IDE 使用</category>
      </categories>
      <tags>
        <tag>Intellij IDEA</tag>
        <tag>smart key</tag>
      </tags>
  </entry>
</search>
