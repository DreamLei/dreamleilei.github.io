{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"c842b9c6621b73b8f847f2a47b9c201dad3f11c3","modified":1521180448000},{"_id":"source/CNAME","hash":"51a523971fb48d77822e6675ae7d0d3da71eaefd","modified":1521180448000},{"_id":"source/baidu_verify_Gv8VCHVnlg.html","hash":"65470b3c9ba4f577c0dccbd079eb310404d593ab","modified":1521180448000},{"_id":"source/baidu_verify_vIAyUVRaF4.html","hash":"b7025e5c3e3f3bfb4ba02f79afe601b19c3d6a86","modified":1521180448000},{"_id":"source/googleb50fb31805c3b8d5.html","hash":"88d2688d8bc07c97561b380dd48c3e061b0f9351","modified":1521180448000},{"_id":"source/_drafts/Java.md","hash":"293268639d83e83e6f31c73fc35379a6e2a3dbc6","modified":1521180448000},{"_id":"source/_drafts/测试文章啊.md","hash":"cce51de50334bb0f2ed9bf2331b7aa92717a4774","modified":1521180448000},{"_id":"source/_drafts/Java-IO-读写的路径问题.md","hash":"4b3b002cd6139c89ea08533c9588c10e22bb3b1d","modified":1521180448000},{"_id":"source/_drafts/struts2-spring.md","hash":"3dccc6602d90b50b373c631ba4f3c1d2bc57b86b","modified":1521180448000},{"_id":"source/_posts/createGithubPage.md","hash":"b8b58817ce0d57485c7222f37b96466f2e865fbb","modified":1521180448000},{"_id":"source/_posts/e6-95-b0-e7-94-b5-e5-a4-8d-e4-b9-a0.md","hash":"1b0a2dddfc68710d8e660d91286f6123fa26cc58","modified":1521180448000},{"_id":"source/_drafts/读书笔记.md","hash":"6957b99b2797b5e04df73f06b4a91b33c9d2d8f8","modified":1521180448000},{"_id":"source/_posts/e5-88-9d-e5-ad-a6spring-mvc.md","hash":"72e22c8c39f53f769d69c1e2b2d92357c5ed8257","modified":1521180448000},{"_id":"source/_posts/e6-9c-ac-e6-9c-baredis-e5-a4-9a-e7-ab-af-e5-8f-a3-e5-90-af-e5-8a-a8.md","hash":"d8ae7d843118b255bbc098ff2af7e5d0c8c1be11","modified":1521180448000},{"_id":"source/_posts/e7-ac-ac-e4-b8-89-e6-96-b9-e7-99-bb-e5-bd-95.md","hash":"1505efd0ede4ba24282a6919daf2a2c5ccbb59dd","modified":1521180448000},{"_id":"source/_posts/e6-b5-8b-e8-af-95.md","hash":"2ba58cea984264fb32c61b9e7b43f42e5f7663f1","modified":1521180448000},{"_id":"source/_posts/e7-ae-80-e5-8d-95-e7-9a-84arraylist-e7-9a-84-e5-ae-9e-e7-8e-b0.md","hash":"1ac528f08b5e5e4b37b7cdae47cc5d807e2a2c5e","modified":1521180448000},{"_id":"source/_posts/e8-bd-af-e9-85-b7-e5-ae-9e-e8-ae-ad-e6-80-bb-e7-bb-93.md","hash":"a8043705cb04b9de21bee5292af656ebabaff9e9","modified":1521180448000},{"_id":"source/_posts/hexo-github博客的多机使用.md","hash":"80d5a3965698da63fcbce812a903964268bf2ed9","modified":1521180448000},{"_id":"source/_posts/git权威指南读书笔记.md","hash":"ffb6de20245a97f8cfc967799e0de968e6c8a78a","modified":1521180448000},{"_id":"source/_posts/hibernate-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93-e4-b8-80.md","hash":"482fe56d867155abb79c95a1f323952d7ef89123","modified":1521180448000},{"_id":"source/_posts/intllij-idea-e4-b8-8b-e9-85-8d-e7-bd-aetomact-e8-bf-90-e8-a1-8cjsp.md","hash":"987d516f509ff611d5b78aaa3085b4e6020f1ccc","modified":1521180448000},{"_id":"source/_posts/idea-maven-struts2.md","hash":"7ca51e9ba12c859c7cc2d5cb1c6eea558dfbab05","modified":1521180448000},{"_id":"source/_posts/java-e5-a4-8d-e4-b9-a0-e4-b8-80-e5-86-85-e9-83-a8-e7-b1-bb.md","hash":"b89b58d3903079b90d30d1c147e832523af0ea4a","modified":1521180448000},{"_id":"source/_posts/intellij-idea-e5-bf-ab-e6-8d-b7-e9-94-ae.md","hash":"505731f7a39e2e9c653e3853dee107bcef343988","modified":1521180448000},{"_id":"source/_posts/java-e5-a4-8d-e4-b9-a0-e4-ba-8c-e9-97-ad-e5-8c-85-e5-92-8c-e7-b1-bb-e7-9a-84-e5-8a-a0-e8-bd-bd-e4-b8-8e-e5-88-9d-e5-a7-8b-e5-8c-96.md","hash":"d96b2b18fd64ad12b93090db20cb005e397b7e33","modified":1521180448000},{"_id":"source/_posts/java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93.md","hash":"153de1ecc6dcd8b2cff40a28a04777bd5690c840","modified":1521180448000},{"_id":"source/_posts/java-nio-e5-ae-9e-e7-8e-b0-e6-96-87-e4-bb-b6-e5-a4-8d-e5-88-b6.md","hash":"0a00b038d954ac9e02e98d2f87a6447841f505fe","modified":1521180448000},{"_id":"source/_posts/java-e5-a4-8d-e4-b9-a0-e8-b5-84-e6-96-99-e5-b0-8f-e6-95-b4-e7-90-86.md","hash":"ef5f79d12b9e83ab7da97279ec8e786db3df9a9e","modified":1521180448000},{"_id":"source/_posts/java问题定位技术.md","hash":"655dd482c3394f30fa74b2f581b3ab932e696289","modified":1521180448000},{"_id":"source/_posts/jsp-e5-a4-8d-e4-b9-a0.md","hash":"09f72359169a5455ef15fcdc91577863be7b8f46","modified":1521180448000},{"_id":"source/_posts/linux-e4-b8-8bjava-e7-9a-84jni-e6-8a-80-e6-9c-af-e5-85-a5-e9-97-a8.md","hash":"670d778b4ef40fdd2f85aced90d6d85df06d0472","modified":1521180448000},{"_id":"source/_posts/java-nio.md","hash":"1e536c5e3ebedc98e9fbe4da49ed73e707d4ea87","modified":1521180448000},{"_id":"source/_posts/js-e4-b8-ad-e6-ad-a3-e5-88-99-e5-8c-b9-e9-85-8d.md","hash":"de7c11cec04a84ba635c4d274597c7aa628f392a","modified":1521180448000},{"_id":"source/_posts/linux-e4-b8-8b-intellij-idea-github.md","hash":"7a8791b908b96c535c3638aed7b879f56f7ba2b6","modified":1521180448000},{"_id":"source/_posts/mariadb-e4-bf-ae-e6-94-b9-e5-ad-97-e7-ac-a6-e7-bc-96-e7-a0-81.md","hash":"f00d7be64bec3d55e4b463267f0507de57f326ce","modified":1521180448000},{"_id":"source/_posts/mysql-e4-b8-bb-e4-bb-8e-e5-a4-8d-e5-88-b6-e7-9a-84-e5-ae-9e-e7-8e-b0.md","hash":"d352f3940e7c669656e2758a17350b7c4330797f","modified":1521180448000},{"_id":"source/_posts/mysql-e7-9a-84-e7-ae-80-e5-8d-95-e8-af-ad-e5-8f-a5.md","hash":"33d18d96c50ece23138aae3b94d03fd42f7523cf","modified":1521180448000},{"_id":"source/_posts/mysql-triggle-e9-81-87-e5-88-b0-e7-9a-84-e5-b0-8f-e9-97-ae-e9-a2-98.md","hash":"bbc707fbc06409bd21da6e4d14ffc4887a582ec9","modified":1521180448000},{"_id":"source/_posts/redis-e4-bd-bf-e7-94-a8.md","hash":"5d1151f6a32bd8af60b28897b2058fb367ce8f88","modified":1521180448000},{"_id":"source/_posts/servlet-e5-a4-8d-e4-b9-a0.md","hash":"1e8cd41ebfdb65eb2b7b846d01a97debb439fc07","modified":1521180448000},{"_id":"source/_posts/struts2-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93.md","hash":"9dce61e7e6af53ef380ae0975cb6c3d211298c26","modified":1521180448000},{"_id":"source/_posts/test-1.md","hash":"3a3b99040f57eb8c5f2d7d467b7ef599971d1902","modified":1521180448000},{"_id":"source/_posts/struts2-e5-ae-9e-e7-8e-b0rest.md","hash":"62cc0dde68e883e5f0edcd746738de057054457c","modified":1521180448000},{"_id":"source/_posts/test.md","hash":"5168c7151e433375e8605452d5555a5826afd738","modified":1521180448000},{"_id":"source/_posts/test-2.md","hash":"587ddca9fb0946b2c380ce91420d32d8cf2800c2","modified":1521181413000},{"_id":"source/_posts/testmusic.md","hash":"afec0284925f1c9825a92ab11124977b97b52a91","modified":1521180448000},{"_id":"source/_posts/wordpress-e6-90-ad-e5-bb-ba-e4-b8-aa-e4-ba-ba-e5-8d-9a-e5-ae-a2.md","hash":"3507b8ad78963d460ce0c8a676095735876d8b1e","modified":1521180448000},{"_id":"source/_posts/test1.md","hash":"4f5c906e2262308a19a7be035cfe5b50d8720164","modified":1521180448000},{"_id":"source/_posts/代理和vpn的区别.md","hash":"dd16b661a8b4ebbf91294cdd2f42f12354709195","modified":1521180448000},{"_id":"source/_posts/如何把wordpress博客导入到hexo静态博客中.md","hash":"d6bc358dacfee8dab2209b5580ffe373cde79daa","modified":1521180448000},{"_id":"source/_posts/实习心得.md","hash":"57b3510e1d18ebf6567a5d3ee8d5b9bf584b9638","modified":1521180448000},{"_id":"source/_posts/用vim-chrome-实现markdown文章的编写和实时预览.md","hash":"208a6bc4e4ea5e5811939978ea78893c9ab39b4e","modified":1521180448000},{"_id":"public/sitemap.xml","hash":"06007f5ab2dc779e76fe328998319ffbe0a0701a","modified":1521182968742},{"_id":"public/atom.xml","hash":"b2e422927788dda084b098b826c3421fc0594d63","modified":1521182968742},{"_id":"public/baidusitemap.xml","hash":"265fc1e47a9f7ddf20712d560debb227ae6c9d77","modified":1521182968742},{"_id":"public/baidu_verify_Gv8VCHVnlg.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/404.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/baidu_verify_vIAyUVRaF4.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/googleb50fb31805c3b8d5.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/2018/03/16/test-2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/2017/03/11/实习心得/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968766},{"_id":"public/2016/08/03/git权威指南读书笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/08/01/java问题定位技术/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/07/31/hexo-github博客的多机使用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/25/代理和vpn的区别/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/25/用vim-chrome-实现markdown文章的编写和实时预览/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/24/如何把wordpress博客导入到hexo静态博客中/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/21/createGithubPage/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/21/test1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/20/test/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/06/03/e6-b5-8b-e8-af-95/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/05/19/java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/04/27/e5-88-9d-e5-ad-a6spring-mvc/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/04/25/redis-e4-bd-bf-e7-94-a8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/04/25/mysql-e4-b8-bb-e4-bb-8e-e5-a4-8d-e5-88-b6-e7-9a-84-e5-ae-9e-e7-8e-b0/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/04/23/e6-9c-ac-e6-9c-baredis-e5-a4-9a-e7-ab-af-e5-8f-a3-e5-90-af-e5-8a-a8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2016/04/21/e7-ac-ac-e4-b8-89-e6-96-b9-e7-99-bb-e5-bd-95/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/12/09/struts2-e5-ae-9e-e7-8e-b0rest/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/09/15/e8-bd-af-e9-85-b7-e5-ae-9e-e8-ae-ad-e6-80-bb-e7-bb-93/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/08/03/hibernate-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93-e4-b8-80/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/26/struts2-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/24/jsp-e5-a4-8d-e4-b9-a0/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/24/servlet-e5-a4-8d-e4-b9-a0/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/22/mysql-triggle-e9-81-87-e5-88-b0-e7-9a-84-e5-b0-8f-e9-97-ae-e9-a2-98/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/15/linux-e4-b8-8bjava-e7-9a-84jni-e6-8a-80-e6-9c-af-e5-85-a5-e9-97-a8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/07/08/e7-ae-80-e5-8d-95-e7-9a-84arraylist-e7-9a-84-e5-ae-9e-e7-8e-b0/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/06/27/e6-95-b0-e7-94-b5-e5-a4-8d-e4-b9-a0/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/06/19/idea-maven-struts2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/06/15/mysql-e7-9a-84-e7-ae-80-e5-8d-95-e8-af-ad-e5-8f-a5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/06/15/mariadb-e4-bf-ae-e6-94-b9-e5-ad-97-e7-ac-a6-e7-bc-96-e7-a0-81/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968767},{"_id":"public/2015/06/05/java-e5-a4-8d-e4-b9-a0-e8-b5-84-e6-96-99-e5-b0-8f-e6-95-b4-e7-90-86/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/06/04/java-nio/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/06/04/java-nio-e5-ae-9e-e7-8e-b0-e6-96-87-e4-bb-b6-e5-a4-8d-e5-88-b6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/05/31/java-e5-a4-8d-e4-b9-a0-e4-ba-8c-e9-97-ad-e5-8c-85-e5-92-8c-e7-b1-bb-e7-9a-84-e5-8a-a0-e8-bd-bd-e4-b8-8e-e5-88-9d-e5-a7-8b-e5-8c-96/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/05/30/java-e5-a4-8d-e4-b9-a0-e4-b8-80-e5-86-85-e9-83-a8-e7-b1-bb/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/05/30/intllij-idea-e4-b8-8b-e9-85-8d-e7-bd-aetomact-e8-bf-90-e8-a1-8cjsp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/05/21/js-e4-b8-ad-e6-ad-a3-e5-88-99-e5-8c-b9-e9-85-8d/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/04/19/wordpress-e6-90-ad-e5-bb-ba-e4-b8-aa-e4-ba-ba-e5-8d-9a-e5-ae-a2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/04/17/linux-e4-b8-8b-intellij-idea-github/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/04/17/intellij-idea-e5-bf-ab-e6-8d-b7-e9-94-ae/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/04/17/testmusic/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/2015/04/16/test-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2015/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2016/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2016/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968768},{"_id":"public/archives/2016/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2016/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2016/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2016/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2017/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/archives/2018/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/未分类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/折腾/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/Java复习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/Spring-MVC/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/redis/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/第三方登陆/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/test/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968769},{"_id":"public/categories/实习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/折腾-博客搭建/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/hibernate/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/IDE/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/IDE-使用/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/Java-date/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/Java-Java进阶/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/Java-JNI入门/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/git/读书笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/数据库/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/struts2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/博客测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/Java-date/Java复习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968770},{"_id":"public/categories/博客搭建/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/categories/博客测试/未分类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/折腾/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/spring-MVC/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/redis/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/oauth/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/test/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/Java/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/软酷实训总结/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/blog-折腾/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/hibernate/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/Intellij-IDEA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/tomcat/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/内部类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/smart-key/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/闭包/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968771},{"_id":"public/tags/类的加载与初始化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/Java-nio/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/资料整理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/Java-Java进阶/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/JSP/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/JNI/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/nio/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/js/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/正则/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/github/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/数据库/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968772},{"_id":"public/tags/mysql-triggl/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/Servlet/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/strus2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/学习总结/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/struts2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/Rest/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/vpn/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/代理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/博客迁移/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/wordpress/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/实习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/vim/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/tags/markdown/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521182968774},{"_id":"public/CNAME","hash":"51a523971fb48d77822e6675ae7d0d3da71eaefd","modified":1521182968786}],"Category":[{"name":"未分类","_id":"cjetl29o000062sma6ppv4tgb"},{"name":"折腾","_id":"cjetl29om000l2smaepdnt9qq"},{"name":"Java复习","_id":"cjetl29ou000r2smaw691k8v0"},{"name":"Spring MVC","_id":"cjetl29p1000w2smaetjqk3pl"},{"name":"redis","_id":"cjetl29pb00142smarrvtk5b5"},{"name":"第三方登陆","_id":"cjetl29pk001c2sma7vjdmxl2"},{"name":"test","_id":"cjetl29pp001i2smag3ax4t3w"},{"name":"实习","_id":"cjetl29pw001o2sma7ujrbdss"},{"name":"-折腾 -博客搭建","_id":"cjetl29q2001w2smadd09cqdi"},{"name":"git","_id":"cjetl29q800242smaqgde9au2"},{"name":"hibernate","_id":"cjetl29qj002b2smanznej1hd"},{"name":"IDE","_id":"cjetl29qo002i2smai4xa87l7"},{"name":"IDE 使用","_id":"cjetl29qs002p2smailof9e9f"},{"name":"Java date","_id":"cjetl29r300312smahmvm6228"},{"name":"-Java -Java进阶","_id":"cjetl29r9003a2sma7jtephy8"},{"name":"Java JNI入门","_id":"cjetl29rd003h2smafvgnlevd"},{"name":"读书笔记","parent":"cjetl29q800242smaqgde9au2","_id":"cjetl29rj003n2smab5v6ps8i"},{"name":"数据库","_id":"cjetl29rt00402smao1wd625c"},{"name":"struts2","_id":"cjetl29ry004j2sma5gmerqwy"},{"name":"博客测试","_id":"cjetl29rz004o2smaw32nh5ko"},{"name":"Java复习","parent":"cjetl29r300312smahmvm6228","_id":"cjetl29s2004x2smap71eedbp"},{"name":"博客搭建","_id":"cjetl29s500562sma5rojthd3"},{"name":"未分类","parent":"cjetl29rz004o2smaw32nh5ko","_id":"cjetl29sa005b2smay7l3fj3l"}],"Data":[],"Page":[{"_content":"Gv8VCHVnlg","source":"baidu_verify_Gv8VCHVnlg.html","raw":"Gv8VCHVnlg","date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","path":"baidu_verify_Gv8VCHVnlg.html","title":"","comments":1,"layout":"page","_id":"cjetl29n000002smawyubv57q","content":"Gv8VCHVnlg","excerpt":"","more":"Gv8VCHVnlg"},{"_content":"<!DOCTYPE HTML>\n<html>\n  <head>\n      <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n          <meta name=\"robots\" content=\"all\" />\n            <meta name=\"robots\" content=\"index,follow\"/>\n          </head>\n          <body>\n          </body>\n          <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.dreamleilei.com\" homePageName=\"回到我的主页\"></script>\n        </html>\n\n\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n  <head>\n      <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n          <meta name=\"robots\" content=\"all\" />\n            <meta name=\"robots\" content=\"index,follow\"/>\n          </head>\n          <body>\n          </body>\n          <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.dreamleilei.com\" homePageName=\"回到我的主页\"></script>\n        </html>\n\n\n","date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjetl29n200012sman2d7d0wh","content":"<!DOCTYPE HTML>\n<html>\n  <head>\n      <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n          <meta name=\"robots\" content=\"all\">\n            <meta name=\"robots\" content=\"index,follow\">\n          </head>\n          <body>\n          </body>\n          <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.dreamleilei.com\" homepagename=\"回到我的主页\"></script>\n        </html>\n\n\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n  <head>\n      <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n          <meta name=\"robots\" content=\"all\" />\n            <meta name=\"robots\" content=\"index,follow\"/>\n          </head>\n          <body>\n          </body>\n          <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.dreamleilei.com\" homePageName=\"回到我的主页\"></script>\n        </html>\n\n\n"},{"_content":"vIAyUVRaF4","source":"baidu_verify_vIAyUVRaF4.html","raw":"vIAyUVRaF4","date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","path":"baidu_verify_vIAyUVRaF4.html","title":"","comments":1,"layout":"page","_id":"cjetl29n500022smax0a149hl","content":"vIAyUVRaF4","excerpt":"","more":"vIAyUVRaF4"},{"_content":"google-site-verification: googleb50fb31805c3b8d5.html","source":"googleb50fb31805c3b8d5.html","raw":"google-site-verification: googleb50fb31805c3b8d5.html","date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","path":"googleb50fb31805c3b8d5.html","title":"","comments":1,"layout":"page","_id":"cjetl29n700032sma5vmkvqof","content":"google-site-verification: googleb50fb31805c3b8d5.html","excerpt":"","more":"google-site-verification: googleb50fb31805c3b8d5.html"}],"Post":[{"title":"测试文章啊","id":"217","_content":"","source":"_drafts/测试文章啊.md","raw":"---\ntitle: 测试文章啊\nid: 217\ncategories:\n  - 未分类\ntags:\n---\n","slug":"测试文章啊","published":0,"date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29nr00042smamneadho4","content":"","excerpt":"","more":""},{"title":"Java IO 读写的路径问题","id":"265","_content":"\n最近在写项目的过程中一直遇到因为项目中路径不清楚的问题而导致异常的抛出，再此整理一下笔记，记录下自己踩的坑。\n\n首先介绍几个常用的API\n\n[Java]\n\nXXX.class.getClassLoader().getResource(“”).getPath();\n\nXXX.class.getResource(“”).getPaht();\n\nSystem.getProperty(“user.dir&quot;);\n\nnew File(&quot;&quot;).getAbsolutePaht();\n\nnew File(&quot;&quot;).getCanonicalPath();\n\nXXX.class.getClassLoader().getResource(&quot;&quot;).getPath(); 获取classPath的加载路径\n\nXXX.class.getResource(&quot;&quot;).getPath(); 获取当前类的加载路径;\n\n[/Java]\n\n测试截图如下:![](http://www.dreamleilei.com/wordpress/wp-content/uploads/2016/06/2016-06-19-13-36-02-的屏幕截图.jpg \"2016-06-19 13-36-02 的屏幕截图.png\")","source":"_drafts/Java-IO-读写的路径问题.md","raw":"---\ntitle: Java IO 读写的路径问题\nid: 265\ncategories:\n  - 未分类\ntags:\n---\n\n最近在写项目的过程中一直遇到因为项目中路径不清楚的问题而导致异常的抛出，再此整理一下笔记，记录下自己踩的坑。\n\n首先介绍几个常用的API\n\n[Java]\n\nXXX.class.getClassLoader().getResource(“”).getPath();\n\nXXX.class.getResource(“”).getPaht();\n\nSystem.getProperty(“user.dir&quot;);\n\nnew File(&quot;&quot;).getAbsolutePaht();\n\nnew File(&quot;&quot;).getCanonicalPath();\n\nXXX.class.getClassLoader().getResource(&quot;&quot;).getPath(); 获取classPath的加载路径\n\nXXX.class.getResource(&quot;&quot;).getPath(); 获取当前类的加载路径;\n\n[/Java]\n\n测试截图如下:![](http://www.dreamleilei.com/wordpress/wp-content/uploads/2016/06/2016-06-19-13-36-02-的屏幕截图.jpg \"2016-06-19 13-36-02 的屏幕截图.png\")","slug":"Java-IO-读写的路径问题","published":0,"date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29nx00052sma7e67k3zc","content":"<p>最近在写项目的过程中一直遇到因为项目中路径不清楚的问题而导致异常的抛出，再此整理一下笔记，记录下自己踩的坑。</p>\n<p>首先介绍几个常用的API</p>\n<p>[Java]</p>\n<p>XXX.class.getClassLoader().getResource(“”).getPath();</p>\n<p>XXX.class.getResource(“”).getPaht();</p>\n<p>System.getProperty(“user.dir&quot;);</p>\n<p>new File(&quot;&quot;).getAbsolutePaht();</p>\n<p>new File(&quot;&quot;).getCanonicalPath();</p>\n<p>XXX.class.getClassLoader().getResource(&quot;&quot;).getPath(); 获取classPath的加载路径</p>\n<p>XXX.class.getResource(&quot;&quot;).getPath(); 获取当前类的加载路径;</p>\n<p>[/Java]</p>\n<p>测试截图如下:<img src=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2016/06/2016-06-19-13-36-02-的屏幕截图.jpg\" alt=\"\" title=\"2016-06-19 13-36-02 的屏幕截图.png\"></p>\n","excerpt":"","more":"<p>最近在写项目的过程中一直遇到因为项目中路径不清楚的问题而导致异常的抛出，再此整理一下笔记，记录下自己踩的坑。</p>\n<p>首先介绍几个常用的API</p>\n<p>[Java]</p>\n<p>XXX.class.getClassLoader().getResource(“”).getPath();</p>\n<p>XXX.class.getResource(“”).getPaht();</p>\n<p>System.getProperty(“user.dir&quot;);</p>\n<p>new File(&quot;&quot;).getAbsolutePaht();</p>\n<p>new File(&quot;&quot;).getCanonicalPath();</p>\n<p>XXX.class.getClassLoader().getResource(&quot;&quot;).getPath(); 获取classPath的加载路径</p>\n<p>XXX.class.getResource(&quot;&quot;).getPath(); 获取当前类的加载路径;</p>\n<p>[/Java]</p>\n<p>测试截图如下:<img src=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2016/06/2016-06-19-13-36-02-的屏幕截图.jpg\" alt=\"\" title=\"2016-06-19 13-36-02 的屏幕截图.png\"></p>\n"},{"title":"Java","id":"234","_content":"","source":"_drafts/Java.md","raw":"---\ntitle: Java\nid: 234\ncategories:\n  - 未分类\ntags:\n---\n","slug":"Java","published":0,"date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29o100072sma8insp6fd","content":"","excerpt":"","more":""},{"title":"struts2 + spring","id":"206","_content":"\n# \n\t花了一下午的时间来整合struts2 + spring,加上最近感冒了,效率低下,所以很简单的事情让我给弄的很复杂,很复杂,很复杂,\n\n\t&nbsp; &nbsp;<span style=\"font-size:20px;\">和使用struts一样,你需要用mvn导入你要的struts2的包,struts2-core然后,和用spring一样,你要导入你用的spring-context 和spring-core的包,除此之外,如果要整合spring和struts2,也应该导入spring-web, struts-spring-plugin, spring-beans包,这几个包是必不可少的包.</span>","source":"_drafts/struts2-spring.md","raw":"---\ntitle: struts2 + spring\nid: 206\ncategories:\n  - 未分类\ntags:\n---\n\n# \n\t花了一下午的时间来整合struts2 + spring,加上最近感冒了,效率低下,所以很简单的事情让我给弄的很复杂,很复杂,很复杂,\n\n\t&nbsp; &nbsp;<span style=\"font-size:20px;\">和使用struts一样,你需要用mvn导入你要的struts2的包,struts2-core然后,和用spring一样,你要导入你用的spring-context 和spring-core的包,除此之外,如果要整合spring和struts2,也应该导入spring-web, struts-spring-plugin, spring-beans包,这几个包是必不可少的包.</span>","slug":"struts2-spring","published":0,"date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29o400082smarznfqpz8","content":"<p>#<br>    花了一下午的时间来整合struts2 + spring,加上最近感冒了,效率低下,所以很简单的事情让我给弄的很复杂,很复杂,很复杂,</p>\n<pre><code>&amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;和使用struts一样,你需要用mvn导入你要的struts2的包,struts2-core然后,和用spring一样,你要导入你用的spring-context 和spring-core的包,除此之外,如果要整合spring和struts2,也应该导入spring-web, struts-spring-plugin, spring-beans包,这几个包是必不可少的包.&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p>#<br>    花了一下午的时间来整合struts2 + spring,加上最近感冒了,效率低下,所以很简单的事情让我给弄的很复杂,很复杂,很复杂,</p>\n<pre><code>&amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;和使用struts一样,你需要用mvn导入你要的struts2的包,struts2-core然后,和用spring一样,你要导入你用的spring-context 和spring-core的包,除此之外,如果要整合spring和struts2,也应该导入spring-web, struts-spring-plugin, spring-beans包,这几个包是必不可少的包.&lt;/span&gt;\n</code></pre>"},{"title":"github + hexo 搭建个人博客小结","date":"2016-06-21T11:16:01.000Z","_content":"\n\n最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。\n 1. 如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考[简书](http://www.jianshu.com/p/465830080ea9)\n 2. hexo 是一款开源的**静态博客**生成器，用*node.js*语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用\n \n```shell\n  sudo yum install nodejs\n```\n安装nodejs,安装完node.js之后也要安装*npm*工具，npm安装同样用\n```shell\n   sudo yum install npm\n```\n安装完成之后，需要用npm安装hexo，安装命令:\n```shell\n    npm\n     install hexo -g\n```\n记得要-g参数，-g表示全局安装，不加-g表示非全局安装\n\n## 如何写博客\n先介绍几个简单的命令:\n* **hexo clean** （清空hexo的public文件夹)\n* **hexo generate** （第一次用的时候调用，表示生成静态文件)\n* **hexo new [article]** (生成一片新文章）\n* **hexo deploy** (提交文章）\n\n调用**hexo new [article]** 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦\n\n## 如何更换主题\n\n如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的[链接](https://www.zhihu.com/question/24422335)进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的**themes**文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后\n```\nhexo clean\nhexo deploy\n```\n就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦\n\n## 安装插件\n配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了\n\n### 参考链接:\n>[http://www.tuicool.com/articles/AfQnQjy/](http://www.tuicool.com/articles/AfQnQjy/)\n> [http://www.jianshu.com/p/465830080ea9](http://www.jianshu.com/p/465830080ea9)\n> [http://www.jianshu.com/p/739bf1305e66](http://www.jianshu.com/p/739bf1305e66)\n> [http://www.isetsuna.com/hexo/install-config/](http://www.isetsuna.com/hexo/install-config/)\n> [http://www.jianshu.com/p/619dab2d3c08](http://www.jianshu.com/p/619dab2d3c08)\n","source":"_posts/createGithubPage.md","raw":"---\ntitle: github + hexo 搭建个人博客小结 \ndate: 2016-06-21 19:16:01\ntags:\n    - 博客\n    - hexo\n    - 折腾\ncategories:\n    - 折腾\n---\n\n\n最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。\n 1. 如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考[简书](http://www.jianshu.com/p/465830080ea9)\n 2. hexo 是一款开源的**静态博客**生成器，用*node.js*语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用\n \n```shell\n  sudo yum install nodejs\n```\n安装nodejs,安装完node.js之后也要安装*npm*工具，npm安装同样用\n```shell\n   sudo yum install npm\n```\n安装完成之后，需要用npm安装hexo，安装命令:\n```shell\n    npm\n     install hexo -g\n```\n记得要-g参数，-g表示全局安装，不加-g表示非全局安装\n\n## 如何写博客\n先介绍几个简单的命令:\n* **hexo clean** （清空hexo的public文件夹)\n* **hexo generate** （第一次用的时候调用，表示生成静态文件)\n* **hexo new [article]** (生成一片新文章）\n* **hexo deploy** (提交文章）\n\n调用**hexo new [article]** 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦\n\n## 如何更换主题\n\n如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的[链接](https://www.zhihu.com/question/24422335)进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的**themes**文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后\n```\nhexo clean\nhexo deploy\n```\n就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦\n\n## 安装插件\n配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了\n\n### 参考链接:\n>[http://www.tuicool.com/articles/AfQnQjy/](http://www.tuicool.com/articles/AfQnQjy/)\n> [http://www.jianshu.com/p/465830080ea9](http://www.jianshu.com/p/465830080ea9)\n> [http://www.jianshu.com/p/739bf1305e66](http://www.jianshu.com/p/739bf1305e66)\n> [http://www.isetsuna.com/hexo/install-config/](http://www.isetsuna.com/hexo/install-config/)\n> [http://www.jianshu.com/p/619dab2d3c08](http://www.jianshu.com/p/619dab2d3c08)\n","slug":"createGithubPage","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29oa00092smawbuqzg6w","content":"<p>最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。</p>\n<ol>\n<li>如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考<a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"external\">简书</a></li>\n<li>hexo 是一款开源的<strong>静态博客</strong>生成器，用<em>node.js</em>语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install nodejs</div></pre></td></tr></table></figure>\n<p>安装nodejs,安装完node.js之后也要安装<em>npm</em>工具，npm安装同样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install npm</div></pre></td></tr></table></figure></p>\n<p>安装完成之后，需要用npm安装hexo，安装命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm</div><div class=\"line\"> install hexo -g</div></pre></td></tr></table></figure></p>\n<p>记得要-g参数，-g表示全局安装，不加-g表示非全局安装</p>\n<h2 id=\"如何写博客\"><a href=\"#如何写博客\" class=\"headerlink\" title=\"如何写博客\"></a>如何写博客</h2><p>先介绍几个简单的命令:</p>\n<ul>\n<li><strong>hexo clean</strong> （清空hexo的public文件夹)</li>\n<li><strong>hexo generate</strong> （第一次用的时候调用，表示生成静态文件)</li>\n<li><strong>hexo new [article]</strong> (生成一片新文章）</li>\n<li><strong>hexo deploy</strong> (提交文章）</li>\n</ul>\n<p>调用<strong>hexo new [article]</strong> 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦</p>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><p>如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">链接</a>进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的<strong>themes</strong>文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo clean</span></div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接:\"></a>参考链接:</h3><blockquote>\n<p><a href=\"http://www.tuicool.com/articles/AfQnQjy/\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/AfQnQjy/</a><br><a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/465830080ea9</a><br><a href=\"http://www.jianshu.com/p/739bf1305e66\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/739bf1305e66</a><br><a href=\"http://www.isetsuna.com/hexo/install-config/\" target=\"_blank\" rel=\"external\">http://www.isetsuna.com/hexo/install-config/</a><br><a href=\"http://www.jianshu.com/p/619dab2d3c08\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/619dab2d3c08</a></p>\n</blockquote>\n","excerpt":"","more":"<p>最近在用 github + hexo 搭建静态博客，记录下自己踩过的坑。</p>\n<ol>\n<li>如何构建github Page 在此就不再啰嗦，网上都有不错的教程，可以参考<a href=\"http://www.jianshu.com/p/465830080ea9\">简书</a></li>\n<li>hexo 是一款开源的<strong>静态博客</strong>生成器，用<em>node.js</em>语言开发 因此要想安装hexo，必须要安装node.js，本人用的是centos7，用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install nodejs</div></pre></td></tr></table></figure>\n<p>安装nodejs,安装完node.js之后也要安装<em>npm</em>工具，npm安装同样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install npm</div></pre></td></tr></table></figure></p>\n<p>安装完成之后，需要用npm安装hexo，安装命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm</div><div class=\"line\"> install hexo -g</div></pre></td></tr></table></figure></p>\n<p>记得要-g参数，-g表示全局安装，不加-g表示非全局安装</p>\n<h2 id=\"如何写博客\"><a href=\"#如何写博客\" class=\"headerlink\" title=\"如何写博客\"></a>如何写博客</h2><p>先介绍几个简单的命令:</p>\n<ul>\n<li><strong>hexo clean</strong> （清空hexo的public文件夹)</li>\n<li><strong>hexo generate</strong> （第一次用的时候调用，表示生成静态文件)</li>\n<li><strong>hexo new [article]</strong> (生成一片新文章）</li>\n<li><strong>hexo deploy</strong> (提交文章）</li>\n</ul>\n<p>调用<strong>hexo new [article]</strong> 命令的时候,会在source/_post/文件夹下生成article.md,我们编辑article.md就会生成一片新的文章啦</p>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><p>如何更换主题呢，github上有好多开源的主题供大家选择啦，我当时是参考的知乎的<a href=\"https://www.zhihu.com/question/24422335\">链接</a>进行更改主题了，更改主题的时候要注意了，当你下载主题的时时候最好先fork到自己的github上，然后主题clone到你的静态博客根据经下的<strong>themes</strong>文件夹下，然后修改_config.yml文件，在主题的文件夹下有一个_config.yml文件，在自己的博客的亘路径下同样也有一份_config.yml文件，前者是对主题的配置文件，后者是对自己的blog的整体的配置文件，在修改主题的时候，要更改博客的_config.yml文件，关键字搜索theme，然后把后面的主题(默认是landscpace)修改为自己想要的主题，然后<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo clean</div><div class=\"line\">hexo deploy</span></div></pre></td></tr></table></figure></p>\n<p>就可以完成主题的修改了，主题的内容也可以自己修改，在这里就不再陈述啦</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>配置完自己的静态博客之后，需要配置插件，例如配置多说评论插件，站内搜索的等等，就不再啰嗦了</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接:\"></a>参考链接:</h3><blockquote>\n<p><a href=\"http://www.tuicool.com/articles/AfQnQjy/\">http://www.tuicool.com/articles/AfQnQjy/</a><br><a href=\"http://www.jianshu.com/p/465830080ea9\">http://www.jianshu.com/p/465830080ea9</a><br><a href=\"http://www.jianshu.com/p/739bf1305e66\">http://www.jianshu.com/p/739bf1305e66</a><br><a href=\"http://www.isetsuna.com/hexo/install-config/\">http://www.isetsuna.com/hexo/install-config/</a><br><a href=\"http://www.jianshu.com/p/619dab2d3c08\">http://www.jianshu.com/p/619dab2d3c08</a></p>\n</blockquote>\n"},{"title":"数电复习","id":"143","date":"2015-06-26T22:50:14.000Z","_content":"\n&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">最近在看数电啊,虽然自己更喜欢软件,但是数电还是要学的,之前一直以为很难,今天复习一看,其实并不难,于是我就开始反思,明明是很简单的东西,为什么上课不认真听,既然上课去都去了,一定要认真听课,上课的效率是最高的,有时候就会产一种思维误区,有些课是没用的,所以上课的时候在开小差,这种想法非常可怕,因为这样只会让自己的时间浪费掉,到最后还要再来从头复习,还有上课的时候要积极一点,能够带动班里的气氛,毕竟卓越班,还要增加知识面,感觉我们这届卓越班远远不如上两届卓越班好,以后期末了,要吸取教训,上课的时候提高效率,要么不去上,要么上了一定要认真听,不做没有效率的事情.</span>","source":"_posts/e6-95-b0-e7-94-b5-e5-a4-8d-e4-b9-a0.md","raw":"---\ntitle: 数电复习\nid: 143\ncategories:\n  - 未分类\ndate: 2015-06-27 06:50:14\ntags:\n---\n\n&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">最近在看数电啊,虽然自己更喜欢软件,但是数电还是要学的,之前一直以为很难,今天复习一看,其实并不难,于是我就开始反思,明明是很简单的东西,为什么上课不认真听,既然上课去都去了,一定要认真听课,上课的效率是最高的,有时候就会产一种思维误区,有些课是没用的,所以上课的时候在开小差,这种想法非常可怕,因为这样只会让自己的时间浪费掉,到最后还要再来从头复习,还有上课的时候要积极一点,能够带动班里的气氛,毕竟卓越班,还要增加知识面,感觉我们这届卓越班远远不如上两届卓越班好,以后期末了,要吸取教训,上课的时候提高效率,要么不去上,要么上了一定要认真听,不做没有效率的事情.</span>","slug":"e6-95-b0-e7-94-b5-e5-a4-8d-e4-b9-a0","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29oe000b2sma7lapqnbn","content":"<p>&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">最近在看数电啊,虽然自己更喜欢软件,但是数电还是要学的,之前一直以为很难,今天复习一看,其实并不难,于是我就开始反思,明明是很简单的东西,为什么上课不认真听,既然上课去都去了,一定要认真听课,上课的效率是最高的,有时候就会产一种思维误区,有些课是没用的,所以上课的时候在开小差,这种想法非常可怕,因为这样只会让自己的时间浪费掉,到最后还要再来从头复习,还有上课的时候要积极一点,能够带动班里的气氛,毕竟卓越班,还要增加知识面,感觉我们这届卓越班远远不如上两届卓越班好,以后期末了,要吸取教训,上课的时候提高效率,要么不去上,要么上了一定要认真听,不做没有效率的事情.</span></p>\n","excerpt":"","more":"<p>&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">最近在看数电啊,虽然自己更喜欢软件,但是数电还是要学的,之前一直以为很难,今天复习一看,其实并不难,于是我就开始反思,明明是很简单的东西,为什么上课不认真听,既然上课去都去了,一定要认真听课,上课的效率是最高的,有时候就会产一种思维误区,有些课是没用的,所以上课的时候在开小差,这种想法非常可怕,因为这样只会让自己的时间浪费掉,到最后还要再来从头复习,还有上课的时候要积极一点,能够带动班里的气氛,毕竟卓越班,还要增加知识面,感觉我们这届卓越班远远不如上两届卓越班好,以后期末了,要吸取教训,上课的时候提高效率,要么不去上,要么上了一定要认真听,不做没有效率的事情.</span></p>\n"},{"title":"读书笔记","id":"230","_content":"\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近几天一直有在看成富老师写的&lt;&lt;深入理解Java7 核心技术与最佳实践&gt;&gt;,刚好有时间静下来,写一下一些读书的笔记.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这本书主要分为三部分:第一部分是介绍Java SE7的新特性,第二部是对Java SE7的深入探讨,第三部分是Java SE8的内容展望.目前我只看了前两章,就觉得获得了好多新知识,在此记录下来,和大家共享.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先,第一章介绍了Java7的语法新特性,主要包括,switch语句中使用字符串,数字值字面量的改进,优化的异常处理,try-with-resources语句,优化变长惨呼方法的调用.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7中对switch中可以使用字符串,而它的实现是在编译器层次上实现的,表面上看到的是字符串,实际上则是通过传入字符串的hash码,然后对hash码进行switch和case的比对,然后进行相应的选择,表现出不同的行为.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对数值字面量的改进,Java7中可以在数字面前加上0B来表示二进制,除此之外,为了便于阅读,可以在数字之间用_来进行数字的分隔,但是注意分隔符不能位于最后面和最前面.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对异常的处理是一个catch可以同时捕获多个异常,中间用|分隔符分隔,对异常的处理的进一步优化是能够更加精确的异常抛出,比如编译器会检查catch中后面一个异常的类型是否小于前一个类型.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7的又一个新特性是try-with-resources语句,在try()里面出现的语句中,资源初始化时或者出现异常的时候,可以保证资源能够正确的被关闭.同时try()语句可以同时管理两个资源.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二章介绍了Java语言的动态性.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java语言是一门静态类型的语言,但是也可实现动态性,首先是脚本引擎,可以允许其它的脚本调用.然后是反射,包括通过反射获取构造方法,获取域,进行数组的一些操作.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaSE7的一个重要的特性是增加了invoke包,通过这个包,可以实现动态代理.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;首先说明一下InvocationHandler接口,这个接口中有一个invoke方法,要实现这个接口,必须要实现这个方法.而动态代理的创建是Proxy类,Proxy类有一个newInstance()方法,通过这个方法调用,可以实现某些接口,从而返回实现某些接口的对象.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态语言的支持:Java迅疾可以支持多种语言,只要语言生成的字节码文件符合Java虚拟机的规范即可.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的方法句柄,java的方法句柄是一个重要的概念,通过一个方法句柄可以获得一个方法的各种操作,包括修改方法的参数,给方法的参数进行赋值,打乱方法参数的次序,对方法的返回值进行处理,异常的处理等等,句柄的作用非常强大.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;\n</span>","source":"_drafts/读书笔记.md","raw":"---\ntitle: 读书笔记\nid: 230\ncategories:\n  - Java复习\ntags:\n---\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近几天一直有在看成富老师写的&lt;&lt;深入理解Java7 核心技术与最佳实践&gt;&gt;,刚好有时间静下来,写一下一些读书的笔记.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这本书主要分为三部分:第一部分是介绍Java SE7的新特性,第二部是对Java SE7的深入探讨,第三部分是Java SE8的内容展望.目前我只看了前两章,就觉得获得了好多新知识,在此记录下来,和大家共享.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先,第一章介绍了Java7的语法新特性,主要包括,switch语句中使用字符串,数字值字面量的改进,优化的异常处理,try-with-resources语句,优化变长惨呼方法的调用.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7中对switch中可以使用字符串,而它的实现是在编译器层次上实现的,表面上看到的是字符串,实际上则是通过传入字符串的hash码,然后对hash码进行switch和case的比对,然后进行相应的选择,表现出不同的行为.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对数值字面量的改进,Java7中可以在数字面前加上0B来表示二进制,除此之外,为了便于阅读,可以在数字之间用_来进行数字的分隔,但是注意分隔符不能位于最后面和最前面.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对异常的处理是一个catch可以同时捕获多个异常,中间用|分隔符分隔,对异常的处理的进一步优化是能够更加精确的异常抛出,比如编译器会检查catch中后面一个异常的类型是否小于前一个类型.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7的又一个新特性是try-with-resources语句,在try()里面出现的语句中,资源初始化时或者出现异常的时候,可以保证资源能够正确的被关闭.同时try()语句可以同时管理两个资源.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二章介绍了Java语言的动态性.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java语言是一门静态类型的语言,但是也可实现动态性,首先是脚本引擎,可以允许其它的脚本调用.然后是反射,包括通过反射获取构造方法,获取域,进行数组的一些操作.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaSE7的一个重要的特性是增加了invoke包,通过这个包,可以实现动态代理.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;首先说明一下InvocationHandler接口,这个接口中有一个invoke方法,要实现这个接口,必须要实现这个方法.而动态代理的创建是Proxy类,Proxy类有一个newInstance()方法,通过这个方法调用,可以实现某些接口,从而返回实现某些接口的对象.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态语言的支持:Java迅疾可以支持多种语言,只要语言生成的字节码文件符合Java虚拟机的规范即可.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的方法句柄,java的方法句柄是一个重要的概念,通过一个方法句柄可以获得一个方法的各种操作,包括修改方法的参数,给方法的参数进行赋值,打乱方法参数的次序,对方法的返回值进行处理,异常的处理等等,句柄的作用非常强大.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;\n</span>","slug":"读书笔记","published":0,"date":"2018-03-16T06:07:28.000Z","updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29og000e2smab0y5v4wr","content":"<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近几天一直有在看成富老师写的&lt;&lt;深入理解Java7 核心技术与最佳实践&gt;&gt;,刚好有时间静下来,写一下一些读书的笔记.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这本书主要分为三部分:第一部分是介绍Java SE7的新特性,第二部是对Java SE7的深入探讨,第三部分是Java SE8的内容展望.目前我只看了前两章,就觉得获得了好多新知识,在此记录下来,和大家共享.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先,第一章介绍了Java7的语法新特性,主要包括,switch语句中使用字符串,数字值字面量的改进,优化的异常处理,try-with-resources语句,优化变长惨呼方法的调用.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7中对switch中可以使用字符串,而它的实现是在编译器层次上实现的,表面上看到的是字符串,实际上则是通过传入字符串的hash码,然后对hash码进行switch和case的比对,然后进行相应的选择,表现出不同的行为.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对数值字面量的改进,Java7中可以在数字面前加上0B来表示二进制,除此之外,为了便于阅读,可以在数字之间用_来进行数字的分隔,但是注意分隔符不能位于最后面和最前面.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对异常的处理是一个catch可以同时捕获多个异常,中间用|分隔符分隔,对异常的处理的进一步优化是能够更加精确的异常抛出,比如编译器会检查catch中后面一个异常的类型是否小于前一个类型.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7的又一个新特性是try-with-resources语句,在try()里面出现的语句中,资源初始化时或者出现异常的时候,可以保证资源能够正确的被关闭.同时try()语句可以同时管理两个资源.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二章介绍了Java语言的动态性.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java语言是一门静态类型的语言,但是也可实现动态性,首先是脚本引擎,可以允许其它的脚本调用.然后是反射,包括通过反射获取构造方法,获取域,进行数组的一些操作.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaSE7的一个重要的特性是增加了invoke包,通过这个包,可以实现动态代理.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;首先说明一下InvocationHandler接口,这个接口中有一个invoke方法,要实现这个接口,必须要实现这个方法.而动态代理的创建是Proxy类,Proxy类有一个newInstance()方法,通过这个方法调用,可以实现某些接口,从而返回实现某些接口的对象.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态语言的支持:Java迅疾可以支持多种语言,只要语言生成的字节码文件符合Java虚拟机的规范即可.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的方法句柄,java的方法句柄是一个重要的概念,通过一个方法句柄可以获得一个方法的各种操作,包括修改方法的参数,给方法的参数进行赋值,打乱方法参数的次序,对方法的返回值进行处理,异常的处理等等,句柄的作用非常强大.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;<br></span></p>\n","excerpt":"","more":"<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近几天一直有在看成富老师写的&lt;&lt;深入理解Java7 核心技术与最佳实践&gt;&gt;,刚好有时间静下来,写一下一些读书的笔记.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这本书主要分为三部分:第一部分是介绍Java SE7的新特性,第二部是对Java SE7的深入探讨,第三部分是Java SE8的内容展望.目前我只看了前两章,就觉得获得了好多新知识,在此记录下来,和大家共享.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先,第一章介绍了Java7的语法新特性,主要包括,switch语句中使用字符串,数字值字面量的改进,优化的异常处理,try-with-resources语句,优化变长惨呼方法的调用.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7中对switch中可以使用字符串,而它的实现是在编译器层次上实现的,表面上看到的是字符串,实际上则是通过传入字符串的hash码,然后对hash码进行switch和case的比对,然后进行相应的选择,表现出不同的行为.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对数值字面量的改进,Java7中可以在数字面前加上0B来表示二进制,除此之外,为了便于阅读,可以在数字之间用_来进行数字的分隔,但是注意分隔符不能位于最后面和最前面.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7对异常的处理是一个catch可以同时捕获多个异常,中间用|分隔符分隔,对异常的处理的进一步优化是能够更加精确的异常抛出,比如编译器会检查catch中后面一个异常的类型是否小于前一个类型.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java7的又一个新特性是try-with-resources语句,在try()里面出现的语句中,资源初始化时或者出现异常的时候,可以保证资源能够正确的被关闭.同时try()语句可以同时管理两个资源.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二章介绍了Java语言的动态性.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java语言是一门静态类型的语言,但是也可实现动态性,首先是脚本引擎,可以允许其它的脚本调用.然后是反射,包括通过反射获取构造方法,获取域,进行数组的一些操作.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaSE7的一个重要的特性是增加了invoke包,通过这个包,可以实现动态代理.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;首先说明一下InvocationHandler接口,这个接口中有一个invoke方法,要实现这个接口,必须要实现这个方法.而动态代理的创建是Proxy类,Proxy类有一个newInstance()方法,通过这个方法调用,可以实现某些接口,从而返回实现某些接口的对象.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态语言的支持:Java迅疾可以支持多种语言,只要语言生成的字节码文件符合Java虚拟机的规范即可.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的方法句柄,java的方法句柄是一个重要的概念,通过一个方法句柄可以获得一个方法的各种操作,包括修改方法的参数,给方法的参数进行赋值,打乱方法参数的次序,对方法的返回值进行处理,异常的处理等等,句柄的作用非常强大.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;<br></span></p>\n"},{"title":"初学Spring MVC","id":"246","date":"2016-04-27T05:06:34.000Z","_content":"\n学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.\n\n(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签\n\n&lt;context:component-scan base-package=&quot;&quot; &gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &#39;context:component-scan&#39; 的声明 ,同理,其它的标签也是一样.\n\n(2)在Controller中@RequestMapping(value=&quot;&quot;)愚蠢的写成了@RequestMapping(name=&quot;&quot;)于是报错了..\n\n(3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\n\n(4)在配置REST风格的应用的时候,jackson-databind是不可缺少的","source":"_posts/e5-88-9d-e5-ad-a6spring-mvc.md","raw":"---\ntitle: 初学Spring MVC\nid: 246\ncategories:\n  - Spring MVC\ndate: 2016-04-27 13:06:34\ntags: spring MVC\n---\n\n学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.\n\n(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签\n\n&lt;context:component-scan base-package=&quot;&quot; &gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &#39;context:component-scan&#39; 的声明 ,同理,其它的标签也是一样.\n\n(2)在Controller中@RequestMapping(value=&quot;&quot;)愚蠢的写成了@RequestMapping(name=&quot;&quot;)于是报错了..\n\n(3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\n\n(4)在配置REST风格的应用的时候,jackson-databind是不可缺少的","slug":"e5-88-9d-e5-ad-a6spring-mvc","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29oj000h2smaulk9qtxx","content":"<p>学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.</p>\n<p>(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签</p>\n<p>&lt;context:component-scan base-package=&quot;&quot; &gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &#39;context:component-scan&#39; 的声明 ,同理,其它的标签也是一样.</p>\n<p>(2)在Controller中@RequestMapping(value=&quot;&quot;)愚蠢的写成了@RequestMapping(name=&quot;&quot;)于是报错了..</p>\n<p>(3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</p>\n<p>(4)在配置REST风格的应用的时候,jackson-databind是不可缺少的</p>\n","excerpt":"","more":"<p>学习Spring MVC,于是想着用Spring MVC框架构建REST风格的项目,由于初次接触这个框架,所以犯了好多低级的错误,在此列出踩过的坑,防止以后再次入坑.</p>\n<p>(1)在配置Spring MVC的xml文件中xsi:schemaLocation是键值对的关系,由于想要简化配置用到了context标签</p>\n<p>&lt;context:component-scan base-package=&quot;&quot; &gt; 如果在xsi:scehmaLocation中没有配置context的url,会报错:通配符的匹配很全面, 但无法找到元素 &#39;context:component-scan&#39; 的声明 ,同理,其它的标签也是一样.</p>\n<p>(2)在Controller中@RequestMapping(value=&quot;&quot;)愚蠢的写成了@RequestMapping(name=&quot;&quot;)于是报错了..</p>\n<p>(3)在构建REST风格的应用的时候,因为自己用的是spring4.x,所以org.springframework.http.converter.json.MappingJacksonHttpMessageConverter是没有的,取而代之的是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</p>\n<p>(4)在配置REST风格的应用的时候,jackson-databind是不可缺少的</p>\n"},{"title":"本机Redis多端口启动","id":"239","date":"2016-04-22T22:09:04.000Z","_content":"\n最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.\n\n根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的,\n\n应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.","source":"_posts/e6-9c-ac-e6-9c-baredis-e5-a4-9a-e7-ab-af-e5-8f-a3-e5-90-af-e5-8a-a8.md","raw":"---\ntitle: 本机Redis多端口启动\nid: 239\ncategories:\n  - redis\ndate: 2016-04-23 06:09:04\ntags:\n    - redis\n---\n\n最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.\n\n根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的,\n\n应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.","slug":"e6-9c-ac-e6-9c-baredis-e5-a4-9a-e7-ab-af-e5-8f-a3-e5-90-af-e5-8a-a8","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29ol000j2sma5xa8lk1e","content":"<p>最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.</p>\n<p>根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的,</p>\n<p>应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.</p>\n","excerpt":"","more":"<p>最近再看redis,看到redis的主从复制模块,但因吃土的日子没有多台服务器,于是尝试着在本地启动多端口,简单实现复制.</p>\n<p>根据网上的教程找了半天没有找到redis的安装路径,原来是cenotsyum安装的,最后只有一个redis-server文件,通过find搜索发现,,只是在在我的/etc目录下有一个redis.conf,后来搜索资料发现,redis的正常启动流程默认是要读取配置文件的,</p>\n<p>应该是用redis-server redis.conf这样即可, 如果想要设置多端口,需要复制一份redis.conf 然后启动即可.</p>\n"},{"title":"第三方登录","id":"235","date":"2016-04-21T01:45:44.000Z","_content":"\n&nbsp; &nbsp; &nbsp; &nbsp; 最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.\n\n&nbsp; &nbsp; &nbsp;首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.\n\n&nbsp; &nbsp; &nbsp;首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址,\n\n这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误.\n\n&nbsp; &nbsp; 目前所做的开发流程:\n\n&nbsp; &nbsp; (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:[qq互联api](http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token)\n\n&nbsp; &nbsp; (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ\n\n&nbsp; &nbsp; (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url\n\n自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑:\n\n(1)idea开发中没有正确的把包导入\n\n(2)servlet的api的mvn包导入错误\n\n(3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的\n\n后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见:&nbsp;[http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)&nbsp;\n\noauth授权模式可以更方便的保护密码,实现资源的限制访问.\n\n&nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp;&nbsp;","source":"_posts/e7-ac-ac-e4-b8-89-e6-96-b9-e7-99-bb-e5-bd-95.md","raw":"---\ntitle: 第三方登录\nid: 235\ncategories: 第三方登陆\ndate: 2016-04-21 09:45:44\ntags: oauth\n---\n\n&nbsp; &nbsp; &nbsp; &nbsp; 最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.\n\n&nbsp; &nbsp; &nbsp;首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.\n\n&nbsp; &nbsp; &nbsp;首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址,\n\n这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误.\n\n&nbsp; &nbsp; 目前所做的开发流程:\n\n&nbsp; &nbsp; (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:[qq互联api](http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token)\n\n&nbsp; &nbsp; (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ\n\n&nbsp; &nbsp; (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url\n\n自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑:\n\n(1)idea开发中没有正确的把包导入\n\n(2)servlet的api的mvn包导入错误\n\n(3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的\n\n后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见:&nbsp;[http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)&nbsp;\n\noauth授权模式可以更方便的保护密码,实现资源的限制访问.\n\n&nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp;&nbsp;","slug":"e7-ac-ac-e4-b8-89-e6-96-b9-e7-99-bb-e5-bd-95","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29on000n2smabe7uq0ws","content":"<p>&nbsp; &nbsp; &nbsp; &nbsp; 最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.</p>\n<p>&nbsp; &nbsp; &nbsp;首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.</p>\n<p>&nbsp; &nbsp; &nbsp;首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址,</p>\n<p>这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误.</p>\n<p>&nbsp; &nbsp; 目前所做的开发流程:</p>\n<p>&nbsp; &nbsp; (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:<a href=\"http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token\" target=\"_blank\" rel=\"external\">qq互联api</a></p>\n<p>&nbsp; &nbsp; (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ</p>\n<p>&nbsp; &nbsp; (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url</p>\n<p>自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑:</p>\n<p>(1)idea开发中没有正确的把包导入</p>\n<p>(2)servlet的api的mvn包导入错误</p>\n<p>(3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的</p>\n<p>后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见:&nbsp;<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a>&nbsp;</p>\n<p>oauth授权模式可以更方便的保护密码,实现资源的限制访问.</p>\n<p>&nbsp; &nbsp; &nbsp;</p>\n<p>&nbsp; &nbsp;&nbsp;</p>\n","excerpt":"","more":"<p>&nbsp; &nbsp; &nbsp; &nbsp; 最近面试等各种事情就少了,于是静下心来学一点自己喜欢的东西 ,想起之前做过web端的租赁平台,决定把它重构一下.</p>\n<p>&nbsp; &nbsp; &nbsp;首先做的是登录方面的重构,准备打算做一个第三方的登录授权,暂时正在做的是QQ的接入登录.</p>\n<p>&nbsp; &nbsp; &nbsp;首先你要申请自己的网站接入,登录connect.qq.com,申请网站应用的接入,这里接入的时候一定要注意你的回调地址,</p>\n<p>这里的回调地址可以填写多个回调地址,是授权登录成功后可以跳转的地址,如果申请登录时,设置的跳转成功的url不是一个已经注册过的回调地址,会包100010的错误.</p>\n<p>&nbsp; &nbsp; 目前所做的开发流程:</p>\n<p>&nbsp; &nbsp; (1)在网站上设置QQ登录的图标,点击图标,触发一个get请求 get请求相应的参数设置参见:<a href=\"http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token\">qq互联api</a></p>\n<p>&nbsp; &nbsp; (2)get请求的发送应该是伴随着页面的跳转,跳转相应的页面,然后登录自己QQ</p>\n<p>&nbsp; &nbsp; (3)如果正常登录之后,会回调一个url,回调的url是get请求参数的url</p>\n<p>自己根据网上的demo已经搭建了一个简单的登录平台,总结一下自己走过的坑:</p>\n<p>(1)idea开发中没有正确的把包导入</p>\n<p>(2)servlet的api的mvn包导入错误</p>\n<p>(3)回调地址没有写对,如果想要回调,一定要要把回调的地址写全(不要加请求参数,但是路径一定要是全的</p>\n<p>后来有经过查阅一下资料,发现这种授权模式是授权码的授权模式:oatuth的部分可以参见:&nbsp;<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a>&nbsp;</p>\n<p>oauth授权模式可以更方便的保护密码,实现资源的限制访问.</p>\n<p>&nbsp; &nbsp; &nbsp;</p>\n<p>&nbsp; &nbsp;&nbsp;</p>\n"},{"title":"测试","id":"262","date":"2016-06-03T00:45:33.000Z","_content":"\n测试更新到csdn博客","source":"_posts/e6-b5-8b-e8-af-95.md","raw":"---\ntitle: 测试\nid: 262\ncategories:\n  - test\ndate: 2016-06-03 08:45:33\ntags: \n    - test\n---\n\n测试更新到csdn博客","slug":"e6-b5-8b-e8-af-95","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29op000p2smak42n9xev","content":"<p>测试更新到csdn博客</p>\n","excerpt":"","more":"<p>测试更新到csdn博客</p>\n"},{"title":"简单的ArrayList的实现","id":"146","date":"2015-07-07T21:11:07.000Z","_content":"\n[code lang=\"java\"]\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\n/**\n * Created by lei on 15-7-8.\n */\npublic class MyArrayList&lt;E&gt; {\n    private Object[] element;\n\n    @Override\n    public String toString() {\n        StringBuilder toString= new StringBuilder(&quot;&quot;);\n        for (int i = 0; i &lt; size; i++) {\n            toString.append(i + &quot;: &quot; + element[i] + &quot; &quot;);\n        }\n        return toString.toString();\n    }\n\n    private static final int defaultCapacity = 10;\n    private int size = 0;\n    private int capacity;\n\n    public MyArrayList() {\n        element = new Object[defaultCapacity];\n        this.capacity = defaultCapacity;\n    }\n\n    public MyArrayList(int capacity) {\n        if (capacity &lt; 0) {\n            throw new IllegalArgumentException(&quot;hello&quot;);\n        }\n        element = new Object[capacity];\n        this.capacity = capacity;\n\n    }\n\n    public MyArrayList(Collection&lt;? extends E&gt; c) {\n        element = c.toArray();\n        size = element.length;\n        System.out.println(element.getClass());\n        System.out.println(Object[].class);\n        if (element.getClass() != Object[].class) {\n            Arrays.copyOf(element, element.length, Object[].class);\n        }\n    }\n\n    public void add(E e) {\n        ensureCapacity(size);\n        element[size++] = e;\n    }\n\n    public void add(int index, E e) {\n        rangeCheck(index);\n        ensureCapacity(size + 1);\n        int num = size - index;\n        System.arraycopy(element, index, element, index + 1, num);\n        element[index] = e;\n        size++;\n    }\n\n    public boolean addAll(int index, Collection&lt;? extends E&gt; e) {\n        rangeCheck(index);\n        Object[] temp = e.toArray();\n\n        int num = size - index + temp.length;\n        ensureCapacity(size + temp.length);\n        System.arraycopy(element, index , element, index + temp.length , size - index );\n\n        System.arraycopy(temp, 0, element, index, temp.length);\n        this.size += temp.length;\n        return temp.length != 0;\n    }\n\n    public boolean addAll(Collection&lt;? extends E&gt; e) {\n        Object[]  temp = e.toArray();\n\n        ensureCapacity(size + temp.length);\n        System.arraycopy(temp, 0, element, size, temp.length);\n        this.size += temp.length;\n        return temp.length != 0;\n    }\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public E element(int index) {\n        rangeCheck(index);\n        Object oldData = element[index];\n        return (E) oldData;\n    }\n\n    public E remove(int index) {\n        rangeCheck(index);\n\n        E oldData = element(index);\n        System.arraycopy(element, index + 1, element, index, size - index - 1);\n        element[--size] = null;\n        return oldData;\n    }\n\n    public E remove() {\n        E removeData;\n        removeData = remove(size - 1);\n        return removeData;\n    }\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public E get(int index) {\n        rangeCheck(index);\n        return element(index);\n    }\n\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int i = 0; i &lt; size; i++) {\n                if (element[i] == null) {\n                    fastRemove(i);\n                    return true;\n                }\n            }\n        } else {\n            for (int i = 0; i &lt; size; i++) {\n                if(element[i].equals(o)){\n                    fastRemove(i);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public int size(){\n        return this.size;\n    }\n\n    public int indexOf(Object o){\n        if(o == null){\n            for (int index = 0; index &lt; size; index++) {\n                if(element[index]==null)\n                    return index;\n            }\n        } else {\n            for (int index = 0; index &lt; size; index++) {\n                if (element[index].equals(o)) {\n                    return index;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public boolean contains(Object o){\n        return indexOf(o) &gt; -1;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    public E set(int index, E e){\n        rangeCheck(index);\n\n        E oldData = element(index);\n        element[index] = e;\n        return oldData;\n    }\n\n    public void clear(){\n        for (int i = 0; i &lt; size; i++) {\n            element[i] = null;\n        }\n        this.size = 0;\n    }\n\n    protected void removeRange(int fromIndex, int toIndex) {\n        rangeCheck(fromIndex);\n        rangeCheck(toIndex);\n\n        int numMove = size - toIndex ;\n        if(numMove &gt; 0) {\n            System.arraycopy(element, toIndex, element, fromIndex, numMove);\n        }\n\n        int newSize = size - (toIndex - fromIndex);\n\n        for (int i = newSize; i &lt; size; i++) {\n            element[i] = null;\n        }\n\n        this.size = newSize;\n\n    }\n\n    private void fastRemove(int index) {\n        System.arraycopy(element, index + 1, element, index, size - index - 1);\n        element[--size] = null;\n    }\n\n    private void rangeCheck(int range) {\n        if (range &lt; 0 || range &gt; size - 1) {\n            throw new ArrayIndexOutOfBoundsException(range);\n        }\n    }\n\n    public Object[] toArray(){\n        return Arrays.copyOf(element, size);\n    }\n\n    private void ensureCapacity(int capacity) {\n        if (capacity &gt;= this.capacity) {\n            this.capacity = (this.capacity * 3) / 2  +1;\n            if (this.capacity &lt;= capacity) {\n                this.capacity = capacity;\n            }\n            element = Arrays.copyOf(element, this.capacity);\n        }\n    }\n\n    public static void main(String[] args) {\n        MyArrayList&lt;String&gt; myList = new MyArrayList&lt;String&gt;();\n\n        for (int i = 0; i &lt; 10; i++) {\n            myList.add(&quot;hello world&quot;);\n        }\n\n        ArrayList&lt;String&gt; addList = new ArrayList&lt;String&gt;(10);\n        addList.add(&quot;hello&quot;);\n        addList.add(&quot;leilei&quot;);\n        addList.add(&quot;leilei2&quot;);\n        myList.addAll(addList);\n        System.out.println(addList);\n        System.out.println(myList);\n        System.out.println(myList.indexOf(&quot;leilei&quot;));\n        System.out.println(myList.contains(&quot;sf&quot;));\n        System.out.println(myList.remove(&quot;leilei&quot;));\n        System.out.println(myList);\n        System.out.println(myList.indexOf(&quot;leilei&quot;));\n        myList.addAll(8, addList);\n        System.out.println(myList);\n    }\n\n}\n[/code]","source":"_posts/e7-ae-80-e5-8d-95-e7-9a-84arraylist-e7-9a-84-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: 简单的ArrayList的实现\nid: 146\ncategories:  Java复习\ndate: 2015-07-08 05:11:07\ntags: Java\n---\n\n[code lang=\"java\"]\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\n\n/**\n * Created by lei on 15-7-8.\n */\npublic class MyArrayList&lt;E&gt; {\n    private Object[] element;\n\n    @Override\n    public String toString() {\n        StringBuilder toString= new StringBuilder(&quot;&quot;);\n        for (int i = 0; i &lt; size; i++) {\n            toString.append(i + &quot;: &quot; + element[i] + &quot; &quot;);\n        }\n        return toString.toString();\n    }\n\n    private static final int defaultCapacity = 10;\n    private int size = 0;\n    private int capacity;\n\n    public MyArrayList() {\n        element = new Object[defaultCapacity];\n        this.capacity = defaultCapacity;\n    }\n\n    public MyArrayList(int capacity) {\n        if (capacity &lt; 0) {\n            throw new IllegalArgumentException(&quot;hello&quot;);\n        }\n        element = new Object[capacity];\n        this.capacity = capacity;\n\n    }\n\n    public MyArrayList(Collection&lt;? extends E&gt; c) {\n        element = c.toArray();\n        size = element.length;\n        System.out.println(element.getClass());\n        System.out.println(Object[].class);\n        if (element.getClass() != Object[].class) {\n            Arrays.copyOf(element, element.length, Object[].class);\n        }\n    }\n\n    public void add(E e) {\n        ensureCapacity(size);\n        element[size++] = e;\n    }\n\n    public void add(int index, E e) {\n        rangeCheck(index);\n        ensureCapacity(size + 1);\n        int num = size - index;\n        System.arraycopy(element, index, element, index + 1, num);\n        element[index] = e;\n        size++;\n    }\n\n    public boolean addAll(int index, Collection&lt;? extends E&gt; e) {\n        rangeCheck(index);\n        Object[] temp = e.toArray();\n\n        int num = size - index + temp.length;\n        ensureCapacity(size + temp.length);\n        System.arraycopy(element, index , element, index + temp.length , size - index );\n\n        System.arraycopy(temp, 0, element, index, temp.length);\n        this.size += temp.length;\n        return temp.length != 0;\n    }\n\n    public boolean addAll(Collection&lt;? extends E&gt; e) {\n        Object[]  temp = e.toArray();\n\n        ensureCapacity(size + temp.length);\n        System.arraycopy(temp, 0, element, size, temp.length);\n        this.size += temp.length;\n        return temp.length != 0;\n    }\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public E element(int index) {\n        rangeCheck(index);\n        Object oldData = element[index];\n        return (E) oldData;\n    }\n\n    public E remove(int index) {\n        rangeCheck(index);\n\n        E oldData = element(index);\n        System.arraycopy(element, index + 1, element, index, size - index - 1);\n        element[--size] = null;\n        return oldData;\n    }\n\n    public E remove() {\n        E removeData;\n        removeData = remove(size - 1);\n        return removeData;\n    }\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public E get(int index) {\n        rangeCheck(index);\n        return element(index);\n    }\n\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int i = 0; i &lt; size; i++) {\n                if (element[i] == null) {\n                    fastRemove(i);\n                    return true;\n                }\n            }\n        } else {\n            for (int i = 0; i &lt; size; i++) {\n                if(element[i].equals(o)){\n                    fastRemove(i);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public int size(){\n        return this.size;\n    }\n\n    public int indexOf(Object o){\n        if(o == null){\n            for (int index = 0; index &lt; size; index++) {\n                if(element[index]==null)\n                    return index;\n            }\n        } else {\n            for (int index = 0; index &lt; size; index++) {\n                if (element[index].equals(o)) {\n                    return index;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public boolean contains(Object o){\n        return indexOf(o) &gt; -1;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    public E set(int index, E e){\n        rangeCheck(index);\n\n        E oldData = element(index);\n        element[index] = e;\n        return oldData;\n    }\n\n    public void clear(){\n        for (int i = 0; i &lt; size; i++) {\n            element[i] = null;\n        }\n        this.size = 0;\n    }\n\n    protected void removeRange(int fromIndex, int toIndex) {\n        rangeCheck(fromIndex);\n        rangeCheck(toIndex);\n\n        int numMove = size - toIndex ;\n        if(numMove &gt; 0) {\n            System.arraycopy(element, toIndex, element, fromIndex, numMove);\n        }\n\n        int newSize = size - (toIndex - fromIndex);\n\n        for (int i = newSize; i &lt; size; i++) {\n            element[i] = null;\n        }\n\n        this.size = newSize;\n\n    }\n\n    private void fastRemove(int index) {\n        System.arraycopy(element, index + 1, element, index, size - index - 1);\n        element[--size] = null;\n    }\n\n    private void rangeCheck(int range) {\n        if (range &lt; 0 || range &gt; size - 1) {\n            throw new ArrayIndexOutOfBoundsException(range);\n        }\n    }\n\n    public Object[] toArray(){\n        return Arrays.copyOf(element, size);\n    }\n\n    private void ensureCapacity(int capacity) {\n        if (capacity &gt;= this.capacity) {\n            this.capacity = (this.capacity * 3) / 2  +1;\n            if (this.capacity &lt;= capacity) {\n                this.capacity = capacity;\n            }\n            element = Arrays.copyOf(element, this.capacity);\n        }\n    }\n\n    public static void main(String[] args) {\n        MyArrayList&lt;String&gt; myList = new MyArrayList&lt;String&gt;();\n\n        for (int i = 0; i &lt; 10; i++) {\n            myList.add(&quot;hello world&quot;);\n        }\n\n        ArrayList&lt;String&gt; addList = new ArrayList&lt;String&gt;(10);\n        addList.add(&quot;hello&quot;);\n        addList.add(&quot;leilei&quot;);\n        addList.add(&quot;leilei2&quot;);\n        myList.addAll(addList);\n        System.out.println(addList);\n        System.out.println(myList);\n        System.out.println(myList.indexOf(&quot;leilei&quot;));\n        System.out.println(myList.contains(&quot;sf&quot;));\n        System.out.println(myList.remove(&quot;leilei&quot;));\n        System.out.println(myList);\n        System.out.println(myList.indexOf(&quot;leilei&quot;));\n        myList.addAll(8, addList);\n        System.out.println(myList);\n    }\n\n}\n[/code]","slug":"e7-ae-80-e5-8d-95-e7-9a-84arraylist-e7-9a-84-e5-ae-9e-e7-8e-b0","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29ow000s2smaw73q4gp5","content":"<p>[code lang=”java”]<br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.Collection;</p>\n<p>/**</p>\n<ul>\n<li><p>Created by lei on 15-7-8.<br>*/<br>public class MyArrayList&lt;E&gt; {<br> private Object[] element;</p>\n<p> @Override<br> public String toString() {</p>\n<pre><code>StringBuilder toString= new StringBuilder(&amp;quot;&amp;quot;);\nfor (int i = 0; i &amp;lt; size; i++) {\n    toString.append(i + &amp;quot;: &amp;quot; + element[i] + &amp;quot; &amp;quot;);\n}\nreturn toString.toString();\n</code></pre><p> }</p>\n<p> private static final int defaultCapacity = 10;<br> private int size = 0;<br> private int capacity;</p>\n<p> public MyArrayList() {</p>\n<pre><code>element = new Object[defaultCapacity];\nthis.capacity = defaultCapacity;\n</code></pre><p> }</p>\n<p> public MyArrayList(int capacity) {</p>\n<pre><code>if (capacity &amp;lt; 0) {\n    throw new IllegalArgumentException(&amp;quot;hello&amp;quot;);\n}\nelement = new Object[capacity];\nthis.capacity = capacity;\n</code></pre><p> }</p>\n<p> public MyArrayList(Collection&lt;? extends E&gt; c) {</p>\n<pre><code>element = c.toArray();\nsize = element.length;\nSystem.out.println(element.getClass());\nSystem.out.println(Object[].class);\nif (element.getClass() != Object[].class) {\n    Arrays.copyOf(element, element.length, Object[].class);\n}\n</code></pre><p> }</p>\n<p> public void add(E e) {</p>\n<pre><code>ensureCapacity(size);\nelement[size++] = e;\n</code></pre><p> }</p>\n<p> public void add(int index, E e) {</p>\n<pre><code>rangeCheck(index);\nensureCapacity(size + 1);\nint num = size - index;\nSystem.arraycopy(element, index, element, index + 1, num);\nelement[index] = e;\nsize++;\n</code></pre><p> }</p>\n<p> public boolean addAll(int index, Collection&lt;? extends E&gt; e) {</p>\n<pre><code>rangeCheck(index);\nObject[] temp = e.toArray();\n\nint num = size - index + temp.length;\nensureCapacity(size + temp.length);\nSystem.arraycopy(element, index , element, index + temp.length , size - index );\n\nSystem.arraycopy(temp, 0, element, index, temp.length);\nthis.size += temp.length;\nreturn temp.length != 0;\n</code></pre><p> }</p>\n<p> public boolean addAll(Collection&lt;? extends E&gt; e) {</p>\n<pre><code>Object[]  temp = e.toArray();\n\nensureCapacity(size + temp.length);\nSystem.arraycopy(temp, 0, element, size, temp.length);\nthis.size += temp.length;\nreturn temp.length != 0;\n</code></pre><p> }</p>\n<p> @SuppressWarnings(&quot;unchecked&quot;)<br> public E element(int index) {</p>\n<pre><code>rangeCheck(index);\nObject oldData = element[index];\nreturn (E) oldData;\n</code></pre><p> }</p>\n<p> public E remove(int index) {</p>\n<pre><code>rangeCheck(index);\n\nE oldData = element(index);\nSystem.arraycopy(element, index + 1, element, index, size - index - 1);\nelement[--size] = null;\nreturn oldData;\n</code></pre><p> }</p>\n<p> public E remove() {</p>\n<pre><code>E removeData;\nremoveData = remove(size - 1);\nreturn removeData;\n</code></pre><p> }</p>\n<p> @SuppressWarnings(&quot;unchecked&quot;)<br> public E get(int index) {</p>\n<pre><code>rangeCheck(index);\nreturn element(index);\n</code></pre><p> }</p>\n<p> public boolean remove(Object o) {</p>\n<pre><code>if (o == null) {\n    for (int i = 0; i &amp;lt; size; i++) {\n        if (element[i] == null) {\n            fastRemove(i);\n            return true;\n        }\n    }\n} else {\n    for (int i = 0; i &amp;lt; size; i++) {\n        if(element[i].equals(o)){\n            fastRemove(i);\n            return true;\n        }\n    }\n}\nreturn false;\n</code></pre><p> }</p>\n<p> public int size(){</p>\n<pre><code>return this.size;\n</code></pre><p> }</p>\n<p> public int indexOf(Object o){</p>\n<pre><code>if(o == null){\n    for (int index = 0; index &amp;lt; size; index++) {\n        if(element[index]==null)\n            return index;\n    }\n} else {\n    for (int index = 0; index &amp;lt; size; index++) {\n        if (element[index].equals(o)) {\n            return index;\n        }\n    }\n}\nreturn -1;\n</code></pre><p> }</p>\n<p> public boolean contains(Object o){</p>\n<pre><code>return indexOf(o) &amp;gt; -1;\n</code></pre><p> }</p>\n<p> public boolean isEmpty(){</p>\n<pre><code>return size == 0;\n</code></pre><p> }</p>\n<p> public E set(int index, E e){</p>\n<pre><code>rangeCheck(index);\n\nE oldData = element(index);\nelement[index] = e;\nreturn oldData;\n</code></pre><p> }</p>\n<p> public void clear(){</p>\n<pre><code>for (int i = 0; i &amp;lt; size; i++) {\n    element[i] = null;\n}\nthis.size = 0;\n</code></pre><p> }</p>\n<p> protected void removeRange(int fromIndex, int toIndex) {</p>\n<pre><code>rangeCheck(fromIndex);\nrangeCheck(toIndex);\n\nint numMove = size - toIndex ;\nif(numMove &amp;gt; 0) {\n    System.arraycopy(element, toIndex, element, fromIndex, numMove);\n}\n\nint newSize = size - (toIndex - fromIndex);\n\nfor (int i = newSize; i &amp;lt; size; i++) {\n    element[i] = null;\n}\n\nthis.size = newSize;\n</code></pre><p> }</p>\n<p> private void fastRemove(int index) {</p>\n<pre><code>System.arraycopy(element, index + 1, element, index, size - index - 1);\nelement[--size] = null;\n</code></pre><p> }</p>\n<p> private void rangeCheck(int range) {</p>\n<pre><code>if (range &amp;lt; 0 || range &amp;gt; size - 1) {\n    throw new ArrayIndexOutOfBoundsException(range);\n}\n</code></pre><p> }</p>\n<p> public Object[] toArray(){</p>\n<pre><code>return Arrays.copyOf(element, size);\n</code></pre><p> }</p>\n<p> private void ensureCapacity(int capacity) {</p>\n<pre><code>if (capacity &amp;gt;= this.capacity) {\n    this.capacity = (this.capacity * 3) / 2  +1;\n    if (this.capacity &amp;lt;= capacity) {\n        this.capacity = capacity;\n    }\n    element = Arrays.copyOf(element, this.capacity);\n}\n</code></pre><p> }</p>\n<p> public static void main(String[] args) {</p>\n<pre><code>MyArrayList&amp;lt;String&amp;gt; myList = new MyArrayList&amp;lt;String&amp;gt;();\n\nfor (int i = 0; i &amp;lt; 10; i++) {\n    myList.add(&amp;quot;hello world&amp;quot;);\n}\n\nArrayList&amp;lt;String&amp;gt; addList = new ArrayList&amp;lt;String&amp;gt;(10);\naddList.add(&amp;quot;hello&amp;quot;);\naddList.add(&amp;quot;leilei&amp;quot;);\naddList.add(&amp;quot;leilei2&amp;quot;);\nmyList.addAll(addList);\nSystem.out.println(addList);\nSystem.out.println(myList);\nSystem.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;));\nSystem.out.println(myList.contains(&amp;quot;sf&amp;quot;));\nSystem.out.println(myList.remove(&amp;quot;leilei&amp;quot;));\nSystem.out.println(myList);\nSystem.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;));\nmyList.addAll(8, addList);\nSystem.out.println(myList);\n</code></pre><p> }</p>\n</li>\n</ul>\n<p>}<br>[/code]</p>\n","excerpt":"","more":"<p>[code lang=”java”]<br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.Collection;</p>\n<p>/**</p>\n<ul>\n<li><p>Created by lei on 15-7-8.<br>*/<br>public class MyArrayList&lt;E&gt; {<br> private Object[] element;</p>\n<p> @Override<br> public String toString() {</p>\n<pre><code>StringBuilder toString= new StringBuilder(&amp;quot;&amp;quot;);\nfor (int i = 0; i &amp;lt; size; i++) {\n    toString.append(i + &amp;quot;: &amp;quot; + element[i] + &amp;quot; &amp;quot;);\n}\nreturn toString.toString();\n</code></pre><p> }</p>\n<p> private static final int defaultCapacity = 10;<br> private int size = 0;<br> private int capacity;</p>\n<p> public MyArrayList() {</p>\n<pre><code>element = new Object[defaultCapacity];\nthis.capacity = defaultCapacity;\n</code></pre><p> }</p>\n<p> public MyArrayList(int capacity) {</p>\n<pre><code>if (capacity &amp;lt; 0) {\n    throw new IllegalArgumentException(&amp;quot;hello&amp;quot;);\n}\nelement = new Object[capacity];\nthis.capacity = capacity;\n</code></pre><p> }</p>\n<p> public MyArrayList(Collection&lt;? extends E&gt; c) {</p>\n<pre><code>element = c.toArray();\nsize = element.length;\nSystem.out.println(element.getClass());\nSystem.out.println(Object[].class);\nif (element.getClass() != Object[].class) {\n    Arrays.copyOf(element, element.length, Object[].class);\n}\n</code></pre><p> }</p>\n<p> public void add(E e) {</p>\n<pre><code>ensureCapacity(size);\nelement[size++] = e;\n</code></pre><p> }</p>\n<p> public void add(int index, E e) {</p>\n<pre><code>rangeCheck(index);\nensureCapacity(size + 1);\nint num = size - index;\nSystem.arraycopy(element, index, element, index + 1, num);\nelement[index] = e;\nsize++;\n</code></pre><p> }</p>\n<p> public boolean addAll(int index, Collection&lt;? extends E&gt; e) {</p>\n<pre><code>rangeCheck(index);\nObject[] temp = e.toArray();\n\nint num = size - index + temp.length;\nensureCapacity(size + temp.length);\nSystem.arraycopy(element, index , element, index + temp.length , size - index );\n\nSystem.arraycopy(temp, 0, element, index, temp.length);\nthis.size += temp.length;\nreturn temp.length != 0;\n</code></pre><p> }</p>\n<p> public boolean addAll(Collection&lt;? extends E&gt; e) {</p>\n<pre><code>Object[]  temp = e.toArray();\n\nensureCapacity(size + temp.length);\nSystem.arraycopy(temp, 0, element, size, temp.length);\nthis.size += temp.length;\nreturn temp.length != 0;\n</code></pre><p> }</p>\n<p> @SuppressWarnings(&quot;unchecked&quot;)<br> public E element(int index) {</p>\n<pre><code>rangeCheck(index);\nObject oldData = element[index];\nreturn (E) oldData;\n</code></pre><p> }</p>\n<p> public E remove(int index) {</p>\n<pre><code>rangeCheck(index);\n\nE oldData = element(index);\nSystem.arraycopy(element, index + 1, element, index, size - index - 1);\nelement[--size] = null;\nreturn oldData;\n</code></pre><p> }</p>\n<p> public E remove() {</p>\n<pre><code>E removeData;\nremoveData = remove(size - 1);\nreturn removeData;\n</code></pre><p> }</p>\n<p> @SuppressWarnings(&quot;unchecked&quot;)<br> public E get(int index) {</p>\n<pre><code>rangeCheck(index);\nreturn element(index);\n</code></pre><p> }</p>\n<p> public boolean remove(Object o) {</p>\n<pre><code>if (o == null) {\n    for (int i = 0; i &amp;lt; size; i++) {\n        if (element[i] == null) {\n            fastRemove(i);\n            return true;\n        }\n    }\n} else {\n    for (int i = 0; i &amp;lt; size; i++) {\n        if(element[i].equals(o)){\n            fastRemove(i);\n            return true;\n        }\n    }\n}\nreturn false;\n</code></pre><p> }</p>\n<p> public int size(){</p>\n<pre><code>return this.size;\n</code></pre><p> }</p>\n<p> public int indexOf(Object o){</p>\n<pre><code>if(o == null){\n    for (int index = 0; index &amp;lt; size; index++) {\n        if(element[index]==null)\n            return index;\n    }\n} else {\n    for (int index = 0; index &amp;lt; size; index++) {\n        if (element[index].equals(o)) {\n            return index;\n        }\n    }\n}\nreturn -1;\n</code></pre><p> }</p>\n<p> public boolean contains(Object o){</p>\n<pre><code>return indexOf(o) &amp;gt; -1;\n</code></pre><p> }</p>\n<p> public boolean isEmpty(){</p>\n<pre><code>return size == 0;\n</code></pre><p> }</p>\n<p> public E set(int index, E e){</p>\n<pre><code>rangeCheck(index);\n\nE oldData = element(index);\nelement[index] = e;\nreturn oldData;\n</code></pre><p> }</p>\n<p> public void clear(){</p>\n<pre><code>for (int i = 0; i &amp;lt; size; i++) {\n    element[i] = null;\n}\nthis.size = 0;\n</code></pre><p> }</p>\n<p> protected void removeRange(int fromIndex, int toIndex) {</p>\n<pre><code>rangeCheck(fromIndex);\nrangeCheck(toIndex);\n\nint numMove = size - toIndex ;\nif(numMove &amp;gt; 0) {\n    System.arraycopy(element, toIndex, element, fromIndex, numMove);\n}\n\nint newSize = size - (toIndex - fromIndex);\n\nfor (int i = newSize; i &amp;lt; size; i++) {\n    element[i] = null;\n}\n\nthis.size = newSize;\n</code></pre><p> }</p>\n<p> private void fastRemove(int index) {</p>\n<pre><code>System.arraycopy(element, index + 1, element, index, size - index - 1);\nelement[--size] = null;\n</code></pre><p> }</p>\n<p> private void rangeCheck(int range) {</p>\n<pre><code>if (range &amp;lt; 0 || range &amp;gt; size - 1) {\n    throw new ArrayIndexOutOfBoundsException(range);\n}\n</code></pre><p> }</p>\n<p> public Object[] toArray(){</p>\n<pre><code>return Arrays.copyOf(element, size);\n</code></pre><p> }</p>\n<p> private void ensureCapacity(int capacity) {</p>\n<pre><code>if (capacity &amp;gt;= this.capacity) {\n    this.capacity = (this.capacity * 3) / 2  +1;\n    if (this.capacity &amp;lt;= capacity) {\n        this.capacity = capacity;\n    }\n    element = Arrays.copyOf(element, this.capacity);\n}\n</code></pre><p> }</p>\n<p> public static void main(String[] args) {</p>\n<pre><code>MyArrayList&amp;lt;String&amp;gt; myList = new MyArrayList&amp;lt;String&amp;gt;();\n\nfor (int i = 0; i &amp;lt; 10; i++) {\n    myList.add(&amp;quot;hello world&amp;quot;);\n}\n\nArrayList&amp;lt;String&amp;gt; addList = new ArrayList&amp;lt;String&amp;gt;(10);\naddList.add(&amp;quot;hello&amp;quot;);\naddList.add(&amp;quot;leilei&amp;quot;);\naddList.add(&amp;quot;leilei2&amp;quot;);\nmyList.addAll(addList);\nSystem.out.println(addList);\nSystem.out.println(myList);\nSystem.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;));\nSystem.out.println(myList.contains(&amp;quot;sf&amp;quot;));\nSystem.out.println(myList.remove(&amp;quot;leilei&amp;quot;));\nSystem.out.println(myList);\nSystem.out.println(myList.indexOf(&amp;quot;leilei&amp;quot;));\nmyList.addAll(8, addList);\nSystem.out.println(myList);\n</code></pre><p> }</p>\n</li>\n</ul>\n<p>}<br>[/code]</p>\n"},{"title":"软酷实训总结","id":"209","date":"2015-09-15T01:33:24.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的</span>,前端的收货对我来说是最大的<span style=\"font-size:20px;\">jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&lt;&lt;jquery基础教程&gt;&gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!</span>","source":"_posts/e8-bd-af-e9-85-b7-e5-ae-9e-e8-ae-ad-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: 软酷实训总结\nid: 209\ncategories: 实习 \ndate: 2015-09-15 09:33:24\ntags: \n\t- 软酷实训总结\n---\n\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的</span>,前端的收货对我来说是最大的<span style=\"font-size:20px;\">jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&lt;&lt;jquery基础教程&gt;&gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!</span>","slug":"e8-bd-af-e9-85-b7-e5-ae-9e-e8-ae-ad-e6-80-bb-e7-bb-93","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29ox000t2sma4ezr4thg","content":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的&lt;/span&gt;,前端的收货对我来说是最大的&lt;span style=&quot;font-size:20px;&quot;&gt;jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&amp;lt;&amp;lt;jquery基础教程&amp;gt;&amp;gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 终于结束了软酷20天的实训,昨天下午除去玩了一下午和一晚上,放松一下,今天下午总结一下软酷20天实训过程中所学到的东西.</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先说一下这二十天的状态吧,第一周还是不错的,因为只是前期牵扯到一些文档的书写,而我们对于一些文档的高要求并没有达到,所以第一周还不是特别累,但是犯得最大的错就是在需求方面虽然付出了很大的努力,但是最终还是没有真正的弄清楚需求,所以在数据库建模完成以后还需要对数据库的字段进行修改,我感觉这个很不应该,最起码在编码之前就应该把数据库的模型给建立好,最好不要到后期再对数据库进行一些修改.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 然后第一周基本上把项目立项的文档,需求文档,系统实现文档都写的差不多,然后第二周开始编码,编码的过程那真叫一个累,每天早上八点准时指纹签到,晚上6点30指纹签退,中午可以休息,但是因为每次我都会遇到一些小问题,所以每次在中午的时候我都会比别人晚一个小时下班,晚上更不用说,晚上那么安静的时间更是用来撸码,记得有一次最疯狂的时候撸码撸到早上5点(因为第二天要交代码了),本以为第二天会崩溃,还好没有,最后经过各种心跳,各种失望与希望的折磨,完成了这次实训,获得了优秀作品.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 说一下在这次实训中学到的东西吧,首先是对ssh框架有了进一步的认识:之前自学过一点ssh框架,总以为dao和service和action都是对应者一张表来的,后来发现真的是大错特错,其实dao层是对数据的直接访问,一个dao层对应着数据库的一张表,或者说一个dao层对应着一个hibernate中的实体类,而service层,是业务逻辑层,可以对应者一个dao层,不过更多的是耦合多个dao层,实现一些业务的逻辑,而action层(web层),就对应着用户的一个个的请求,而数据的传递,在server层和dao层应该是以对象的形式来传递的,而在action中可以通过gson化,传给前端.根据页面的需要,把一个一个的请求抽象成action类,其中相同参数的或者大部分相同参数的可以用同一个action,这就是我通过这次实训对dao层,service层和action层的进一步理解.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;除了三个层次的一些理解,还有对一些命名方式的理解,hibernate中实体字段的名称千万不要用到order, column, desc等mysql的关键字,不然会造成一些难于察觉的错误,还有如果有多张表的id的话,最好对每个表的id和实体的id的名字都加以区分,不然到最后可能发现因为命名习惯造成的麻烦非常的耗费时间,而在三个层中,大部分是通过id来进行对象的传递,所以说id非常的重要.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 说一下一些测试的重要性吧,后台的测试代码相当重要,他可以帮助你快速找到bug,可以让你的编码事半功倍,这次实训花了半天的时间学会了测试action,用到StrutsSpringTestCase框架,这个框架真的非常的棒,省去了你每次都要重新部署然后测试action,StrutsSpringTestCase这个框架在我的笔记中有记录,在此不再细说,其实后端还有好多的小细节问题,因为自己的一些疏忽大意造成了本来可以花费五分钟解决的问题需要用两个小时解决,真实悲哀啊,以后更应该注意一些细节问题.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 在数据方面也出现了一些不足之处,其实每张表都应该有一个时间戳,无论如何,都应该有一个时间戳,而时间戳的形式最好是精确到秒,这样就可以在排序的时候有个排序,然后最后应该有个字段可以用来区分如果时间相同,如何对进行排序的,还有暂时没有学会数据库直接存储图片,只是用到了数据库存储图片的路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了后台的一些收货,再说一下前端的收获,前端方面,我不是负责界面的设计,但是我负责了数据的交互,主要用到了Jquery和jquery的插件,之前只看过三天的&lt;/span&gt;,前端的收货对我来说是最大的&lt;span style=&quot;font-size:20px;&quot;&gt;jquery,然后现在就直接拿来用jquery,是边看书边学边用,这样的学习方式真的很快,但是有些东西是学不牢的,jquery的一些选择和操作差不多都已经学会了,一些其它简单的操作,在笔记上都有记录,在此就不在复述,除了jquery,还用到了jnotify,jmessage,jcrop,jfileupload等插件的简单使用,尤其是对jcrop,jfileupload插件的印象特别深刻,当时因为不会用,花费了好长时间来学习,还有前端收货的是ajax的使用,之前只是听说过ajax,根本就不知道什么是ajax,通过这次实训,学会了用jquery的ajax,感觉jquery挺容易上手的,但是js还不是很会,我需要有时间静下心来,学一下js和看一下&amp;lt;&amp;lt;jquery基础教程&amp;gt;&amp;gt;,对于前端的一些布局和和模型的理解更是掌握的更差,更差,需要有时间来看一下.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp;再谈一下我在数据交互中的收获,当时开始用json,一开始用的是标准的json,然后发现json不太好用,有些枚举类型不能正确的json话,然后后来用到了阿里的json,发现还挺好用的,不过后来发现了google 的gson,发现google的gson确实好用,确实很强大,可以自定义过滤一些字段,可以自定义设置时间的格式,后端的对象json化用的是gson.toJson把对象转换成json串,而在前端是用到JSON.parse()把接受到的json转换成对象,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; 然后除了以上的收获,还有学会了前端的分页,学会验证码的使用,学会了图像的剪切,还有团队之间的分工协作,学会了熬夜找bug,改代码,希望以后的学习能像实训中那样拼,做出最好的自己!&lt;/span&gt;\n</code></pre>"},{"title":"hexo+github博客的多机使用","date":"2016-07-31T13:22:46.000Z","_content":"\n### 折腾\n\n &nbsp;&nbsp;&nbsp;&nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。\n\n\n &nbsp;&nbsp;&nbsp;&nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新[安装heox博客](http://blog.dreamleilei.com/2016/06/21/createGithubPage/)的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。\n\t\n\n首先在linux本地本地创建一个分支，命名为source \n  \n```bash\ngit checkout -b source\n```\n\n在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。\n\n添加远程分支。 \n\n```bash\ngit remote add source url\n```\n\n然后把远程添加的远程分支add，commit然后push上去\n这里push的时候记得要\n\n```bash\ngit push origin source\n```\n\n这个时候就在linux分支上把应该做的工作都完成了。\n接下来换windows系统。\n\n```bash\ngit clone <url>\n```\n\n然后\n\n```bash\ngit checkout -b source\n```\n\n```bash\ngit fetch origin source\n```\n\n如果在合并过程中出错的话可以强制远程覆盖本地\n\n```bash\ngit fetch -all\n```\n\n然后\n\n```bash\ngit reset --hard origin/source\n```\n\n最后\n\n```bash\ngit fetch\n```\n\n以后每次操作前都应该\n\n```bash\ngit fetch\n```\n然后写完后\n\n```bash\nhexo clean\nhexo deploy\n```\n\n然后切换到source分支\n\n```bash\ngit add\n```\n\n``` bash\ngit commit\n```\n \n```bash\ngit push\n```\n\n```bash\norigin source \n```\n\n这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。\n\n\n\n \n","source":"_posts/hexo-github博客的多机使用.md","raw":"---\ntitle: hexo+github博客的多机使用\ndate: 2016-07-31 21:22:46\ntags:\n    -blog\n    -折腾\ncategories:\n    -折腾\n    -博客搭建\n---\n\n### 折腾\n\n &nbsp;&nbsp;&nbsp;&nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。\n\n\n &nbsp;&nbsp;&nbsp;&nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新[安装heox博客](http://blog.dreamleilei.com/2016/06/21/createGithubPage/)的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。\n\t\n\n首先在linux本地本地创建一个分支，命名为source \n  \n```bash\ngit checkout -b source\n```\n\n在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。\n\n添加远程分支。 \n\n```bash\ngit remote add source url\n```\n\n然后把远程添加的远程分支add，commit然后push上去\n这里push的时候记得要\n\n```bash\ngit push origin source\n```\n\n这个时候就在linux分支上把应该做的工作都完成了。\n接下来换windows系统。\n\n```bash\ngit clone <url>\n```\n\n然后\n\n```bash\ngit checkout -b source\n```\n\n```bash\ngit fetch origin source\n```\n\n如果在合并过程中出错的话可以强制远程覆盖本地\n\n```bash\ngit fetch -all\n```\n\n然后\n\n```bash\ngit reset --hard origin/source\n```\n\n最后\n\n```bash\ngit fetch\n```\n\n以后每次操作前都应该\n\n```bash\ngit fetch\n```\n然后写完后\n\n```bash\nhexo clean\nhexo deploy\n```\n\n然后切换到source分支\n\n```bash\ngit add\n```\n\n``` bash\ngit commit\n```\n \n```bash\ngit push\n```\n\n```bash\norigin source \n```\n\n这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。\n\n\n\n \n","slug":"hexo-github博客的多机使用","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29p3000x2sma7w2oxu3r","content":"<h3 id=\"折腾\"><a href=\"#折腾\" class=\"headerlink\" title=\"折腾\"></a>折腾</h3><p> &nbsp;&nbsp;&nbsp;&nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新<a href=\"http://blog.dreamleilei.com/2016/06/21/createGithubPage/\" target=\"_blank\" rel=\"external\">安装heox博客</a>的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。</p>\n<p>首先在linux本地本地创建一个分支，命名为source </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。</p>\n<p>添加远程分支。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add <span class=\"built_in\">source</span> url</div></pre></td></tr></table></figure>\n<p>然后把远程添加的远程分支add，commit然后push上去<br>这里push的时候记得要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>这个时候就在linux分支上把应该做的工作都完成了。<br>接下来换windows系统。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;url&gt;</div></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>如果在合并过程中出错的话可以强制远程覆盖本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch -all</div></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard origin/<span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>最后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>以后每次操作前都应该</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>然后写完后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>然后切换到source分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。</p>\n","excerpt":"","more":"<h3 id=\"折腾\"><a href=\"#折腾\" class=\"headerlink\" title=\"折腾\"></a>折腾</h3><p> &nbsp;&nbsp;&nbsp;&nbsp;暑期来到腾讯实习，公司给配了一台windows的电脑，因为之前一直用Linu,而且一直用linux搭建hexo博客来写文章，现在大部分的时间会用到windows系统，这个时候就需要搬迁自己的博客，也就是说能够让自己的博客在linux下和windows下工作。</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;之前的想法一直很简单，以为只要简单的git clone下来就可以了，后来发现git clone下来的东西只有打包好的东西，也就是说一些源码和运行环境是没有的，而如果重新<a href=\"http://blog.dreamleilei.com/2016/06/21/createGithubPage/\">安装heox博客</a>的话一些配置参数都会设置为初始化，后来经过查找资料，找到以下解决方案。</p>\n<p>首先在linux本地本地创建一个分支，命名为source </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>在分支里把应该添加的东西都给添加进去。（public文件夹下的东西就不用再添加了，以后为这个是自动生成的，主要是posts文件夹下的东西，还有一些配置文件啥的。</p>\n<p>添加远程分支。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add <span class=\"built_in\">source</span> url</div></pre></td></tr></table></figure>\n<p>然后把远程添加的远程分支add，commit然后push上去<br>这里push的时候记得要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>这个时候就在linux分支上把应该做的工作都完成了。<br>接下来换windows系统。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;url&gt;</div></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>如果在合并过程中出错的话可以强制远程覆盖本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch -all</div></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard origin/<span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>最后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>以后每次操作前都应该</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch</div></pre></td></tr></table></figure>\n<p>然后写完后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>然后切换到source分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">origin <span class=\"built_in\">source</span></div></pre></td></tr></table></figure>\n<p>这样就把master分支作为博客的呈现分支，而source分支作为博客的源码分支，以后换PC的时候只需要把source分支复制本地，就不会造成文章的丢失。</p>\n"},{"title":"git权威指南读书笔记","date":"2016-08-03T12:15:51.000Z","_content":"","source":"_posts/git权威指南读书笔记.md","raw":"---\ntitle: git权威指南读书笔记\ndate: 2016-08-03 20:15:51\ntags:\n    - git\ncategories:\n    - git\n    - 读书笔记\n---\n","slug":"git权威指南读书笔记","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29p800102smatdzd91u6","content":"","excerpt":"","more":""},{"title":"Hibernate学习总结(一)","id":"204","date":"2015-08-02T19:45:32.000Z","_content":"\n# \n\t&nbsp; &nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.\n\n\t&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">&nbsp; &nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&nbsp;,xml的根元素是hibernate-configuration,然后还有&lt;session-factory&gt;子元素,里面是&lt;property&nbsp;name = &quot;&quot; &gt; &lt; /property&gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &nbsp;Configuration conf &nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&quot;name&quot;, &quot;value&#39;)来进行创建.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &quot; &quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&quot; &quot;, length = &quot; &quot;, unique= &quot; &quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&quot;&quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &quot;()&quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &quot; &quot;, joinColumns={@JoinColumn(name = &quot; &quot;, referenceColumn=&quot; &#39; ... ) })映射,</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果是List,需要指定@OrderColumn(name = &quot;&quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &nbsp;@AttributeOverrides(@AttributeOverride(name = &quot; &quot;, column=@Column()),..);进行注解修饰.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;</span>","source":"_posts/hibernate-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93-e4-b8-80.md","raw":"---\ntitle: Hibernate学习总结(一)\nid: 204\ncategories:\n  - hibernate\ndate: 2015-08-03 03:45:32\ntags: hibernate\n---\n\n# \n\t&nbsp; &nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.\n\n\t&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">&nbsp; &nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&nbsp;,xml的根元素是hibernate-configuration,然后还有&lt;session-factory&gt;子元素,里面是&lt;property&nbsp;name = &quot;&quot; &gt; &lt; /property&gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &nbsp;Configuration conf &nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&quot;name&quot;, &quot;value&#39;)来进行创建.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &quot; &quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&quot; &quot;, length = &quot; &quot;, unique= &quot; &quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&quot;&quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &quot;()&quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &quot; &quot;, joinColumns={@JoinColumn(name = &quot; &quot;, referenceColumn=&quot; &#39; ... ) })映射,</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果是List,需要指定@OrderColumn(name = &quot;&quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &nbsp;@AttributeOverrides(@AttributeOverride(name = &quot; &quot;, column=@Column()),..);进行注解修饰.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;</span>","slug":"hibernate-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93-e4-b8-80","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pb00152sma4c61bm7n","content":"<p>#<br>    &nbsp; &nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.</p>\n<pre><code>&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&amp;nbsp;,xml的根元素是hibernate-configuration,然后还有&amp;lt;session-factory&amp;gt;子元素,里面是&amp;lt;property&amp;nbsp;name = &amp;quot;&amp;quot; &amp;gt; &amp;lt; /property&amp;gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &amp;nbsp;Configuration conf &amp;nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&amp;quot;name&amp;quot;, &amp;quot;value&amp;#39;)来进行创建.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &amp;quot; &amp;quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&amp;quot; &amp;quot;, length = &amp;quot; &amp;quot;, unique= &amp;quot; &amp;quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&amp;quot;&amp;quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &amp;quot;()&amp;quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &amp;quot; &amp;quot;, joinColumns={@JoinColumn(name = &amp;quot; &amp;quot;, referenceColumn=&amp;quot; &amp;#39; ... ) })映射,&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;如果是List,需要指定@OrderColumn(name = &amp;quot;&amp;quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &amp;nbsp;@AttributeOverrides(@AttributeOverride(name = &amp;quot; &amp;quot;, column=@Column()),..);进行注解修饰.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p>#<br>    &nbsp; &nbsp;最近一直在学Hibernate框架,因为比较懒,好久没有写博客了,今天强制要求自己把学过的东西总结一下.</p>\n<pre><code>&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 首先介绍一下什么是Hibernate,我认为的hibernate是一个ORM框架,是一个对象/关系映射的框架,所为对象关系映射,就是把数据库的各种关系映射成对象,然后对数据库的操作只需要对一个一个的对象操作就行,这种操作的好处是脱离了底层数据库的复杂,只需要对对象操作即可改变数据库.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;然后谈一下映射的方式,关系映射把数据库中的表映射成对象中的一个类,而每一条记录映射成类的一个实例,数据库的字段映射成对象的属性.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 安装包的下载,因为我用的是idea + maven,所以下载的时候只需要复制ibernate-core的依赖包导入即可,然后如果你用的是jdbc连接数据库,还应该导入相应的jdbc所需要的包,因为还要用到数据源,应该把所用到的数据源的包导入,例如我用的是e3p0的数据源,就依赖导入e3p0-hibernate的包.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 相应的包导入完成之后,接下来就需要进行hibernate.cfg.xml的配置,hibernate.cfg.xml是hibernate的默认配置文件名,相应的配置格式,你可以参照hibernate-core-XXX.Final.jar的org.hibernate包下的hibernate-configuration3.0.dtd&amp;nbsp;,xml的根元素是hibernate-configuration,然后还有&amp;lt;session-factory&amp;gt;子元素,里面是&amp;lt;property&amp;nbsp;name = &amp;quot;&amp;quot; &amp;gt; &amp;lt; /property&amp;gt;的配置,具体的配置不再详细的陈述,除了配置xml文件外,还可以配置相应的资源文件,即hibernate.cfg.properties文件配置,格式为属性名 值名.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;说完了配置文件,再谈一下如果利用配置文件创建Configuration对象,利用配置文件配置很简单,直接 &amp;nbsp;Configuration conf &amp;nbsp;= new Configuration().configure();后面的configure()方法的参数默认为hibernate.cfg.xml文件,你也可以手动的自己添加配置文件的路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; 除了上述方法外,也可以通过new Configuration().addAnnotaedClass(Item.class).addAnnotatedClass()把所有的映射类添加进去,这种添加是默认以hibernate.properties文件为configuration的文件.也可以不配置properties文件,而是通过不停的.setProperty(&amp;quot;name&amp;quot;, &amp;quot;value&amp;#39;)来进行创建.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Hibernate的持久化对象有3中状态:(1)瞬态 (2)持久化状态 (3) 脱管状态.当你new一个对象的时候,对象是处于瞬态的,这个时候可以被垃圾回收.当调用session.load() 或则save() 或者get(), saveOrUpdate方法的时候,就变成持久化状态,当持久化状态调用delete方法,就成了瞬态的对象,持久化的状态通过evict,close或者clear方法就变成了托管的对象.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来谈一下Hibernate映射,hibernate映射可以通过xml的方式或者是通过注解的方式.在这里我们谈一下通过用注解的方式.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;要把一个类映射成你一个table,这个时候要用到@Entity映射,然后通过@Table(name = &amp;quot; &amp;quot;)制定表的名称,而类中的属性就会自动的映射成数据库中的字段,但是我们往往要通过@Column(name=&amp;quot; &amp;quot;, length = &amp;quot; &amp;quot;, unique= &amp;quot; &amp;quot;, nullable = )等进行字段的限制.也可以通过@Check(constraints=&amp;quot;&amp;quot;)对整个表进行check约束. 对字段进行映射的时候可以通过@Transient设置不在数据库中生成相应的字段,也可以通过@Formlu(value= &amp;quot;()&amp;quot;)惊醒为字段制定赋值规则,使用此注解也不会在数据库中生成相应的字段.特殊的字段如果是enum类型的话,需要用@Enumerated进行修饰,通过(EnumeType.ORDINAL或者EnumType.STRING)进行设置显示方式,如果是数据库中存放的是大数据例如图片,可以用@Lob注解修饰,用@Basic注解辅助修饰时间类型的话用@Temporal()设置数据库中存储的时间类型.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 谈完了单个表和字段的映射,再谈一下如何映射主键,一般主键用@Id注解修饰,然后通过GeneratedValue()设置主键的值,GeneratedValue的值可以有GenerationType.*指定,也可以通过自定义的主键生成器指定.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 如果一张表中的属性是一个集合,那应该怎么映射呢,那就应该通过外键,重新创建一张新表,通过@ElementCollection(targetClass=) @CollectionTable(name = &amp;quot; &amp;quot;, joinColumns={@JoinColumn(name = &amp;quot; &amp;quot;, referenceColumn=&amp;quot; &amp;#39; ... ) })映射,&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 如果集合的数据类型是组件,只需要组件的类用@Embeddable修饰即可,其它的都是一样的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;如果是List,需要指定@OrderColumn(name = &amp;quot;&amp;quot; )如果是Set不用指定,如果是Map,需要指定@MapKeyClass和@MapKeyColumn().&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;如果表中的某个属性是组件怎么呢,所为的组件就是不被持久化的类,这个时候需要在组件的类注解@Embeddable,然后增加@Parent注解.或者在持久化类中用@Embedded &amp;nbsp;@AttributeOverrides(@AttributeOverride(name = &amp;quot; &amp;quot;, column=@Column()),..);进行注解修饰.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;如果组件的属性中有集合的话,就和非组件的集合属性的修饰是一样的.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;\n</code></pre>"},{"title":"Intllij idea 下配置tomact运行jsp","id":"64","date":"2015-05-29T17:11:40.000Z","_content":"\n<span style=\"font-size:14px;\">昨天接到一个突如其来的好消息,就是我的甲骨文杯的比赛进了决赛,本来是要被刷掉的,可是因为前面的队伍存在这样那样的问题,所以取消了他们的比赛资格,就这样,我们的三人小分队就顺利的进入了决赛(虽然我很水,靠的是宇神和伟神),不过这样让我头疼了,本来想搞前端开发的我就这样要学java了(自从知道自己没进决赛,已经两星期没看java了),既然要学java,那就有必要进阶一下 ,学完java基础,学点java web的东西,从事java web应用开发,既然要学java web应用开发,自然用到JSP和Servlet,既然用到这两个,自然就离不开tomact,既然用到tomact,就必然要用到idea配置tomact环境.</span>\n\n\t<span style=\"font-size:14px;\">好了,废话不多说,现在开始我的苦逼旅程之路.</span>\n\n\t<span style=\"font-size:14px;\">首先打开File &gt; Setting &gt; Build Execution Delopyment 然后点击右上角的+ 选择tomact server 然后配置好自己的tomact路径.</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 08:59:53 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏-269x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">第二步:</span>\n\n\t<span style=\"font-size:14px;\">打开File &gt; Project Structure &gt; Modules ,然后点击右边的Dependence,点击+ 选择2Library,添加进tomact的安装包即可</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 09:04:06 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏-300x172.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">第三步:</span>\n\n\t<span style=\"font-size:14px;\">[​](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)<span style=\"line-height: 20.7999992370605px;\">打开Run &gt; Edit Congitures进行配置即可.</span>[![2015-05-30 09:07:16 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏-300x193.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 09:07:23 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏-300x189.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:14px;\">第四部:</span>\n\n\t<span style=\"font-size:14px;\">在左边的文件中找到要运行的jsp文件,右击Run即可.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:14px;\">注意事项:</span>\n\n\t<span style=\"font-size:14px;\">配置tomact的时候可能因为权限的问题,idea找不到tomact记得权限一定要给够</span>\n\n\t&nbsp;","source":"_posts/intllij-idea-e4-b8-8b-e9-85-8d-e7-bd-aetomact-e8-bf-90-e8-a1-8cjsp.md","raw":"---\ntitle: Intllij idea 下配置tomact运行jsp\nid: 64\ncategories:\n  - IDE\ndate: 2015-05-30 01:11:40\ntags: \n\t- Intellij IDEA\n\t- tomcat \n---\n\n<span style=\"font-size:14px;\">昨天接到一个突如其来的好消息,就是我的甲骨文杯的比赛进了决赛,本来是要被刷掉的,可是因为前面的队伍存在这样那样的问题,所以取消了他们的比赛资格,就这样,我们的三人小分队就顺利的进入了决赛(虽然我很水,靠的是宇神和伟神),不过这样让我头疼了,本来想搞前端开发的我就这样要学java了(自从知道自己没进决赛,已经两星期没看java了),既然要学java,那就有必要进阶一下 ,学完java基础,学点java web的东西,从事java web应用开发,既然要学java web应用开发,自然用到JSP和Servlet,既然用到这两个,自然就离不开tomact,既然用到tomact,就必然要用到idea配置tomact环境.</span>\n\n\t<span style=\"font-size:14px;\">好了,废话不多说,现在开始我的苦逼旅程之路.</span>\n\n\t<span style=\"font-size:14px;\">首先打开File &gt; Setting &gt; Build Execution Delopyment 然后点击右上角的+ 选择tomact server 然后配置好自己的tomact路径.</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 08:59:53 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏-269x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">第二步:</span>\n\n\t<span style=\"font-size:14px;\">打开File &gt; Project Structure &gt; Modules ,然后点击右边的Dependence,点击+ 选择2Library,添加进tomact的安装包即可</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 09:04:06 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏-300x172.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">第三步:</span>\n\n\t<span style=\"font-size:14px;\">[​](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)<span style=\"line-height: 20.7999992370605px;\">打开Run &gt; Edit Congitures进行配置即可.</span>[![2015-05-30 09:07:16 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏-300x193.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏.png)</span>\n\n\t<span style=\"font-size:14px;\">[![2015-05-30 09:07:23 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏-300x189.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:14px;\">第四部:</span>\n\n\t<span style=\"font-size:14px;\">在左边的文件中找到要运行的jsp文件,右击Run即可.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:14px;\">注意事项:</span>\n\n\t<span style=\"font-size:14px;\">配置tomact的时候可能因为权限的问题,idea找不到tomact记得权限一定要给够</span>\n\n\t&nbsp;","slug":"intllij-idea-e4-b8-8b-e9-85-8d-e7-bd-aetomact-e8-bf-90-e8-a1-8cjsp","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pe00172smalsad3z3a","content":"<p><span style=\"font-size:14px;\">昨天接到一个突如其来的好消息,就是我的甲骨文杯的比赛进了决赛,本来是要被刷掉的,可是因为前面的队伍存在这样那样的问题,所以取消了他们的比赛资格,就这样,我们的三人小分队就顺利的进入了决赛(虽然我很水,靠的是宇神和伟神),不过这样让我头疼了,本来想搞前端开发的我就这样要学java了(自从知道自己没进决赛,已经两星期没看java了),既然要学java,那就有必要进阶一下 ,学完java基础,学点java web的东西,从事java web应用开发,既然要学java web应用开发,自然用到JSP和Servlet,既然用到这两个,自然就离不开tomact,既然用到tomact,就必然要用到idea配置tomact环境.</span></p>\n<pre><code>&lt;span style=&quot;font-size:14px;&quot;&gt;好了,废话不多说,现在开始我的苦逼旅程之路.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;首先打开File &amp;gt; Setting &amp;gt; Build Execution Delopyment 然后点击右上角的+ 选择tomact server 然后配置好自己的tomact路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 08:59:53 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏-269x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第二步:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;打开File &amp;gt; Project Structure &amp;gt; Modules ,然后点击右边的Dependence,点击+ 选择2Library,添加进tomact的安装包即可&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:04:06 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏-300x172.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第三步:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[​](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;span style=&quot;line-height: 20.7999992370605px;&quot;&gt;打开Run &amp;gt; Edit Congitures进行配置即可.&lt;/span&gt;[![2015-05-30 09:07:16 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏-300x193.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:07:23 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏-300x189.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第四部:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;在左边的文件中找到要运行的jsp文件,右击Run即可.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;注意事项:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;配置tomact的时候可能因为权限的问题,idea找不到tomact记得权限一定要给够&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:14px;\">昨天接到一个突如其来的好消息,就是我的甲骨文杯的比赛进了决赛,本来是要被刷掉的,可是因为前面的队伍存在这样那样的问题,所以取消了他们的比赛资格,就这样,我们的三人小分队就顺利的进入了决赛(虽然我很水,靠的是宇神和伟神),不过这样让我头疼了,本来想搞前端开发的我就这样要学java了(自从知道自己没进决赛,已经两星期没看java了),既然要学java,那就有必要进阶一下 ,学完java基础,学点java web的东西,从事java web应用开发,既然要学java web应用开发,自然用到JSP和Servlet,既然用到这两个,自然就离不开tomact,既然用到tomact,就必然要用到idea配置tomact环境.</span></p>\n<pre><code>&lt;span style=&quot;font-size:14px;&quot;&gt;好了,废话不多说,现在开始我的苦逼旅程之路.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;首先打开File &amp;gt; Setting &amp;gt; Build Execution Delopyment 然后点击右上角的+ 选择tomact server 然后配置好自己的tomact路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 08:59:53 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏-269x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-085953-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第二步:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;打开File &amp;gt; Project Structure &amp;gt; Modules ,然后点击右边的Dependence,点击+ 选择2Library,添加进tomact的安装包即可&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:04:06 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏-300x172.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090406-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第三步:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[​](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;span style=&quot;line-height: 20.7999992370605px;&quot;&gt;打开Run &amp;gt; Edit Congitures进行配置即可.&lt;/span&gt;[![2015-05-30 09:07:16 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏-300x193.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090716-的截屏.png)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;[![2015-05-30 09:07:23 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏-300x189.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/05/2015-05-30-090723-的截屏.png)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;第四部:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;在左边的文件中找到要运行的jsp文件,右击Run即可.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;注意事项:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:14px;&quot;&gt;配置tomact的时候可能因为权限的问题,idea找不到tomact记得权限一定要给够&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre>"},{"title":"Idea + maven + struts2","id":"132","date":"2015-06-19T04:34:18.000Z","_content":"\n<span style=\"font-size:20px;\">今天下午花了两个 多小时才把maven +struts 2 + idea 的环境给搞定,正可谓是坑爹啊!</span>\n\n\t&nbsp;\n\n\t&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">首先,还是之前一样,创建maven项目,然后选项一个webPP,创建完成后,在依赖管理中,添加struts2的依赖关系,</span>\n\n\t![2015-06-19 18:09:29 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏-300x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏.png)[![2015-06-19 18:09:54 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏-283x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">添加这两个依赖就好了,然后配置web.xml</span>\n\n\t[![2015-06-19 18:12:51 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏-300x58.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏.png)\n\n\t<span style=\"font-size:22px;\"><span style=\"font-size:20px;\">然后还要配置struts.</span></span><span style=\"font-size:22px;\"><span style=\"font-size:20px;\">xml 这个标记要放在resources下</span></span>\n\n\t&nbsp;\n\n\t![2015-06-19 20:32:32 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏-300x204.png)(http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">这样就配置好了struts2的开发环境,(当时因为不知道struts2.xml,放置在哪个路径下,所以走了好多弯路).</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;配置国际化的时候出现乱码的情况,首先,写好的相应的properties文件,然后在终端下用native2ascii -encoding UTF-8 input.properties output.properties 最终生成utf8编码的文件,然后还应该设置struts的国际化资源的编码,在struts.xml中配置如:</span>\n\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n<span style=\"color:#e8bf6a;\">&lt;constant </span><span style=\"color:#bababa;\">name</span><span style=\"color:#a5c261;\">=&quot;struts.i18n.encoding&quot; </span><span style=\"color:#bababa;\">value</span><span style=\"color:#a5c261;\">=&quot;UTF-8&quot;</span><span style=\"color:#e8bf6a;\">/&gt;</span></pre>\n\n\t<span style=\"font-size:20px;\">然后在JSP的文件,设置JSP文件的编码格式,内容如下:</span>\n\n\t&nbsp;\n\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n&lt;%@ <span style=\"color:#cc7832;font-weight:bold;\">page </span>contentType=&quot;<span style=\"color:#6a8759;\">text/html;charset=UTF-8</span>&quot; language=&quot;<span style=\"color:#6a8759;\">java</span>&quot; pageEncoding=&quot;<span style=\"color:#6a8759;\">UTF-8</span>&quot; %&gt;</pre>\n\n\t<span style=\"font-size:20px;\">这样就完成了,字符编码的统一.</span>","source":"_posts/idea-maven-struts2.md","raw":"---\ntitle: Idea + maven + struts2\nid: 132\ncategories:\n  - IDE 使用\n\ndate: 2015-06-19 12:34:18\ntags: \n\t- Intellij IDEA\n---\n\n<span style=\"font-size:20px;\">今天下午花了两个 多小时才把maven +struts 2 + idea 的环境给搞定,正可谓是坑爹啊!</span>\n\n\t&nbsp;\n\n\t&nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">首先,还是之前一样,创建maven项目,然后选项一个webPP,创建完成后,在依赖管理中,添加struts2的依赖关系,</span>\n\n\t![2015-06-19 18:09:29 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏-300x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏.png)[![2015-06-19 18:09:54 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏-283x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">添加这两个依赖就好了,然后配置web.xml</span>\n\n\t[![2015-06-19 18:12:51 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏-300x58.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏.png)\n\n\t<span style=\"font-size:22px;\"><span style=\"font-size:20px;\">然后还要配置struts.</span></span><span style=\"font-size:22px;\"><span style=\"font-size:20px;\">xml 这个标记要放在resources下</span></span>\n\n\t&nbsp;\n\n\t![2015-06-19 20:32:32 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏-300x204.png)(http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">这样就配置好了struts2的开发环境,(当时因为不知道struts2.xml,放置在哪个路径下,所以走了好多弯路).</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;配置国际化的时候出现乱码的情况,首先,写好的相应的properties文件,然后在终端下用native2ascii -encoding UTF-8 input.properties output.properties 最终生成utf8编码的文件,然后还应该设置struts的国际化资源的编码,在struts.xml中配置如:</span>\n\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n<span style=\"color:#e8bf6a;\">&lt;constant </span><span style=\"color:#bababa;\">name</span><span style=\"color:#a5c261;\">=&quot;struts.i18n.encoding&quot; </span><span style=\"color:#bababa;\">value</span><span style=\"color:#a5c261;\">=&quot;UTF-8&quot;</span><span style=\"color:#e8bf6a;\">/&gt;</span></pre>\n\n\t<span style=\"font-size:20px;\">然后在JSP的文件,设置JSP文件的编码格式,内容如下:</span>\n\n\t&nbsp;\n\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n&lt;%@ <span style=\"color:#cc7832;font-weight:bold;\">page </span>contentType=&quot;<span style=\"color:#6a8759;\">text/html;charset=UTF-8</span>&quot; language=&quot;<span style=\"color:#6a8759;\">java</span>&quot; pageEncoding=&quot;<span style=\"color:#6a8759;\">UTF-8</span>&quot; %&gt;</pre>\n\n\t<span style=\"font-size:20px;\">这样就完成了,字符编码的统一.</span>","slug":"idea-maven-struts2","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pi001a2smarudlbcwl","content":"<p><span style=\"font-size:20px;\">今天下午花了两个 多小时才把maven +struts 2 + idea 的环境给搞定,正可谓是坑爹啊!</span></p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;首先,还是之前一样,创建maven项目,然后选项一个webPP,创建完成后,在依赖管理中,添加struts2的依赖关系,&lt;/span&gt;\n\n![2015-06-19 18:09:29 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏-300x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏.png)[![2015-06-19 18:09:54 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏-283x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;添加这两个依赖就好了,然后配置web.xml&lt;/span&gt;\n\n[![2015-06-19 18:12:51 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏-300x58.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏.png)\n\n&lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;然后还要配置struts.&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;xml 这个标记要放在resources下&lt;/span&gt;&lt;/span&gt;\n\n&amp;nbsp;\n\n![2015-06-19 20:32:32 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏-300x204.png)(http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;这样就配置好了struts2的开发环境,(当时因为不知道struts2.xml,放置在哪个路径下,所以走了好多弯路).&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;配置国际化的时候出现乱码的情况,首先,写好的相应的properties文件,然后在终端下用native2ascii -encoding UTF-8 input.properties output.properties 最终生成utf8编码的文件,然后还应该设置struts的国际化资源的编码,在struts.xml中配置如:&lt;/span&gt;\n</code></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n<span style=\"color:#e8bf6a;\">&lt;constant </span><span style=\"color:#bababa;\">name</span><span style=\"color:#a5c261;\">=&quot;struts.i18n.encoding&quot; </span><span style=\"color:#bababa;\">value</span><span style=\"color:#a5c261;\">=&quot;UTF-8&quot;</span><span style=\"color:#e8bf6a;\">/&gt;</span></pre>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;然后在JSP的文件,设置JSP文件的编码格式,内容如下:&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n&lt;%@ <span style=\"color:#cc7832;font-weight:bold;\">page </span>contentType=&quot;<span style=\"color:#6a8759;\">text/html;charset=UTF-8</span>&quot; language=&quot;<span style=\"color:#6a8759;\">java</span>&quot; pageEncoding=&quot;<span style=\"color:#6a8759;\">UTF-8</span>&quot; %&gt;</pre>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;这样就完成了,字符编码的统一.&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">今天下午花了两个 多小时才把maven +struts 2 + idea 的环境给搞定,正可谓是坑爹啊!</span></p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;首先,还是之前一样,创建maven项目,然后选项一个webPP,创建完成后,在依赖管理中,添加struts2的依赖关系,&lt;/span&gt;\n\n![2015-06-19 18:09:29 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏-300x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180929-的截屏.png)[![2015-06-19 18:09:54 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏-283x300.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-180954-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;添加这两个依赖就好了,然后配置web.xml&lt;/span&gt;\n\n[![2015-06-19 18:12:51 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏-300x58.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-181251-的截屏.png)\n\n&lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;然后还要配置struts.&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;xml 这个标记要放在resources下&lt;/span&gt;&lt;/span&gt;\n\n&amp;nbsp;\n\n![2015-06-19 20:32:32 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏-300x204.png)(http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-19-203232-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;这样就配置好了struts2的开发环境,(当时因为不知道struts2.xml,放置在哪个路径下,所以走了好多弯路).&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;配置国际化的时候出现乱码的情况,首先,写好的相应的properties文件,然后在终端下用native2ascii -encoding UTF-8 input.properties output.properties 最终生成utf8编码的文件,然后还应该设置struts的国际化资源的编码,在struts.xml中配置如:&lt;/span&gt;\n</code></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n<span style=\"color:#e8bf6a;\">&lt;constant </span><span style=\"color:#bababa;\">name</span><span style=\"color:#a5c261;\">=&quot;struts.i18n.encoding&quot; </span><span style=\"color:#bababa;\">value</span><span style=\"color:#a5c261;\">=&quot;UTF-8&quot;</span><span style=\"color:#e8bf6a;\">/&gt;</span></pre>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;然后在JSP的文件,设置JSP文件的编码格式,内容如下:&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Source Code Pro';font-size:16pt;\">\n&lt;%@ <span style=\"color:#cc7832;font-weight:bold;\">page </span>contentType=&quot;<span style=\"color:#6a8759;\">text/html;charset=UTF-8</span>&quot; language=&quot;<span style=\"color:#6a8759;\">java</span>&quot; pageEncoding=&quot;<span style=\"color:#6a8759;\">UTF-8</span>&quot; %&gt;</pre>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;这样就完成了,字符编码的统一.&lt;/span&gt;\n</code></pre>"},{"title":"Java复习(一) 内部类","id":"71","date":"2015-05-30T07:24:37.000Z","_content":"\n## <span style=\"font-size: 22px;\">原文链接:[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)</span>\n\n<span style=\"font-size: 22px;\">看了一下内部类的博客,博客上讲的十分的棒,很清楚,但是有些东西还是需要自己来总结一下,巩固基础.</span>\n\n<span style=\"font-size: 22px;\">首先内部类的定义,简单的根据字面意思就是定义在内部中的类,叫做内部类</span>\n\n<span style=\"font-size: 22px;\">内部类又可以分为:</span>\n\n<span style=\"font-size: 22px;\">静态内部类(static 类型的class)</span>\n\n<span style=\"font-size: 22px;\">成员内部类(定义在一个class内部中的class但是不能用static修饰)</span>\n\n<span style=\"font-size: 22px;\">局部内部类(定义在方法中的class)像局部变量一样，不能被public, protected, private和static修饰。</span>\n\n<span style=\"font-size: 22px;\">匿名内部类(未命名的class)</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">内部类的性质:</span>\n\n<span style=\"font-size: 22px;\">首先,成员内部中的属性和方法不能用static修饰! 但可以有static final 的数据成员.成员内部类可以访问外部类的属性和方法,而外部类却无法直接访问内部类中的属性和方法,要想访问内部类中属性和方法需要实例化一个成员内部类对象,然后访问.相同级别的成员内部类之间可以相互访问(包括private属性修饰的,这就意味着private失效).在外部类的static方法中无法直接访问内成员内部类.,可以用于闭包.</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">静态内部类只能访问外部类的static修饰的属性和方法,，这是由Java语法中\"静态方法不能直接访问非静态成员\"所限定,外部类访问静态内部类的时候可以直接new一个静态内部类对象,也可以通过.外部类名.new 内部类() 来访问,其它类中无法直接访问静态内部类.</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">局部内部类:(此时没有过多了解,先不谈)</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">匿名内部类:(先不谈);**匿名内部类要访问的外部类局部变量必须是final修饰的**</span>","source":"_posts/java-e5-a4-8d-e4-b9-a0-e4-b8-80-e5-86-85-e9-83-a8-e7-b1-bb.md","raw":"---\ntitle: Java复习(一) 内部类\nid: 71\ncategories:\n  - Java复习\ndate: 2015-05-30 15:24:37\ntags:\n    - Java\n    - 内部类\n---\n\n## <span style=\"font-size: 22px;\">原文链接:[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)</span>\n\n<span style=\"font-size: 22px;\">看了一下内部类的博客,博客上讲的十分的棒,很清楚,但是有些东西还是需要自己来总结一下,巩固基础.</span>\n\n<span style=\"font-size: 22px;\">首先内部类的定义,简单的根据字面意思就是定义在内部中的类,叫做内部类</span>\n\n<span style=\"font-size: 22px;\">内部类又可以分为:</span>\n\n<span style=\"font-size: 22px;\">静态内部类(static 类型的class)</span>\n\n<span style=\"font-size: 22px;\">成员内部类(定义在一个class内部中的class但是不能用static修饰)</span>\n\n<span style=\"font-size: 22px;\">局部内部类(定义在方法中的class)像局部变量一样，不能被public, protected, private和static修饰。</span>\n\n<span style=\"font-size: 22px;\">匿名内部类(未命名的class)</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">内部类的性质:</span>\n\n<span style=\"font-size: 22px;\">首先,成员内部中的属性和方法不能用static修饰! 但可以有static final 的数据成员.成员内部类可以访问外部类的属性和方法,而外部类却无法直接访问内部类中的属性和方法,要想访问内部类中属性和方法需要实例化一个成员内部类对象,然后访问.相同级别的成员内部类之间可以相互访问(包括private属性修饰的,这就意味着private失效).在外部类的static方法中无法直接访问内成员内部类.,可以用于闭包.</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">静态内部类只能访问外部类的static修饰的属性和方法,，这是由Java语法中\"静态方法不能直接访问非静态成员\"所限定,外部类访问静态内部类的时候可以直接new一个静态内部类对象,也可以通过.外部类名.new 内部类() 来访问,其它类中无法直接访问静态内部类.</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">局部内部类:(此时没有过多了解,先不谈)</span>\n\n&nbsp;\n\n<span style=\"font-size: 22px;\">匿名内部类:(先不谈);**匿名内部类要访问的外部类局部变量必须是final修饰的**</span>","slug":"java-e5-a4-8d-e4-b9-a0-e4-b8-80-e5-86-85-e9-83-a8-e7-b1-bb","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pl001e2smaypbswgeh","content":"<h2 id=\"原文链接-http-www-open-open-com-lib-view-open1422791124330-html\"><a href=\"#原文链接-http-www-open-open-com-lib-view-open1422791124330-html\" class=\"headerlink\" title=\"原文链接:http://www.open-open.com/lib/view/open1422791124330.html\"></a><span style=\"font-size: 22px;\">原文链接:<a href=\"http://www.open-open.com/lib/view/open1422791124330.html\" target=\"_blank\" rel=\"external\">http://www.open-open.com/lib/view/open1422791124330.html</a></span></h2><p><span style=\"font-size: 22px;\">看了一下内部类的博客,博客上讲的十分的棒,很清楚,但是有些东西还是需要自己来总结一下,巩固基础.</span></p>\n<p><span style=\"font-size: 22px;\">首先内部类的定义,简单的根据字面意思就是定义在内部中的类,叫做内部类</span></p>\n<p><span style=\"font-size: 22px;\">内部类又可以分为:</span></p>\n<p><span style=\"font-size: 22px;\">静态内部类(static 类型的class)</span></p>\n<p><span style=\"font-size: 22px;\">成员内部类(定义在一个class内部中的class但是不能用static修饰)</span></p>\n<p><span style=\"font-size: 22px;\">局部内部类(定义在方法中的class)像局部变量一样，不能被public, protected, private和static修饰。</span></p>\n<p><span style=\"font-size: 22px;\">匿名内部类(未命名的class)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">内部类的性质:</span></p>\n<p><span style=\"font-size: 22px;\">首先,成员内部中的属性和方法不能用static修饰! 但可以有static final 的数据成员.成员内部类可以访问外部类的属性和方法,而外部类却无法直接访问内部类中的属性和方法,要想访问内部类中属性和方法需要实例化一个成员内部类对象,然后访问.相同级别的成员内部类之间可以相互访问(包括private属性修饰的,这就意味着private失效).在外部类的static方法中无法直接访问内成员内部类.,可以用于闭包.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">静态内部类只能访问外部类的static修饰的属性和方法,，这是由Java语法中”静态方法不能直接访问非静态成员”所限定,外部类访问静态内部类的时候可以直接new一个静态内部类对象,也可以通过.外部类名.new 内部类() 来访问,其它类中无法直接访问静态内部类.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">局部内部类:(此时没有过多了解,先不谈)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">匿名内部类:(先不谈);<strong>匿名内部类要访问的外部类局部变量必须是final修饰的</strong></span></p>\n","excerpt":"","more":"<h2 id=\"原文链接-http-www-open-open-com-lib-view-open1422791124330-html\"><a href=\"#原文链接-http-www-open-open-com-lib-view-open1422791124330-html\" class=\"headerlink\" title=\"原文链接:http://www.open-open.com/lib/view/open1422791124330.html\"></a><span style=\"font-size: 22px;\">原文链接:<a href=\"http://www.open-open.com/lib/view/open1422791124330.html\">http://www.open-open.com/lib/view/open1422791124330.html</a></span></h2><p><span style=\"font-size: 22px;\">看了一下内部类的博客,博客上讲的十分的棒,很清楚,但是有些东西还是需要自己来总结一下,巩固基础.</span></p>\n<p><span style=\"font-size: 22px;\">首先内部类的定义,简单的根据字面意思就是定义在内部中的类,叫做内部类</span></p>\n<p><span style=\"font-size: 22px;\">内部类又可以分为:</span></p>\n<p><span style=\"font-size: 22px;\">静态内部类(static 类型的class)</span></p>\n<p><span style=\"font-size: 22px;\">成员内部类(定义在一个class内部中的class但是不能用static修饰)</span></p>\n<p><span style=\"font-size: 22px;\">局部内部类(定义在方法中的class)像局部变量一样，不能被public, protected, private和static修饰。</span></p>\n<p><span style=\"font-size: 22px;\">匿名内部类(未命名的class)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">内部类的性质:</span></p>\n<p><span style=\"font-size: 22px;\">首先,成员内部中的属性和方法不能用static修饰! 但可以有static final 的数据成员.成员内部类可以访问外部类的属性和方法,而外部类却无法直接访问内部类中的属性和方法,要想访问内部类中属性和方法需要实例化一个成员内部类对象,然后访问.相同级别的成员内部类之间可以相互访问(包括private属性修饰的,这就意味着private失效).在外部类的static方法中无法直接访问内成员内部类.,可以用于闭包.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">静态内部类只能访问外部类的static修饰的属性和方法,，这是由Java语法中”静态方法不能直接访问非静态成员”所限定,外部类访问静态内部类的时候可以直接new一个静态内部类对象,也可以通过.外部类名.new 内部类() 来访问,其它类中无法直接访问静态内部类.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">局部内部类:(此时没有过多了解,先不谈)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 22px;\">匿名内部类:(先不谈);<strong>匿名内部类要访问的外部类局部变量必须是final修饰的</strong></span></p>\n"},{"title":"Intellij idea 快捷键","id":"20","date":"2015-04-17T04:52:57.000Z","_content":"\n**<span style=\"font-size: 14px;\">原文：http://www.cnblogs.com/tonycody/p/3257601.html </span>**\n\n** **\n<div>**【常规】**</div>\n\n1.  **Ctrl+Shift + Enter，语句完成**\n2.  **“！”，否定完成，输入表达式时按 “！”键**\n3.  **Ctrl+E，最近的文件**\n4.  **Ctrl+Shift+E，最近更改的文件**\n5.  **Shift+Click，可以关闭文件**\n6.  **Ctrl+[ OR ]，可以跑到大括号的开头与结尾**\n7.  **Ctrl+F12，可以显示当前文件的结构**\n8.  **Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择**\n9.  **Ctrl+N，可以快速打开类**\n10.  **Ctrl+Shift+N，可以快速打开文件**\n11.  **Alt+Q，可以看到当前方法的声明**\n12.  **Ctrl+P，可以显示参数信息**\n13.  **Ctrl+Shift+Insert，可以选择剪贴板内容并插入**\n14.  **Alt+Insert，可以生成构造器/Getter/Setter等**\n15.  **Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义**\n16.  **Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch**\n17.  **Ctrl+Enter，导入包，自动修正**\n18.  **Ctrl+Alt+L，格式化代码**\n19.  **Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作**\n20.  **Ctrl+Alt+O，优化导入的类和包**\n21.  **Ctrl+R，替换文本**\n22.  **Ctrl+F，查找文本**\n23.  **Ctrl+Shift+Space，自动补全代码**\n24.  **Ctrl+空格，代码提示（与系统输入法快捷键冲突）**\n25.  **Ctrl+Shift+Alt+N，查找类中的方法或变量**\n26.  **Alt+Shift+C，最近的更改**\n27.  **Alt+Shift+Up/Down，上/下移一行**\n28.  **Shift+F6，重构 - 重命名**\n29.  **Ctrl+X，删除行**\n30.  **Ctrl+D，复制行**\n31.  **Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）**\n32.  **Ctrl+J，自动代码（例如：serr）**\n33.  **Ctrl+Alt+J，用动态模板环绕**\n34.  **Ctrl+H，显示类结构图（类的继承层次）**\n35.  **Ctrl+Q，显示注释文档**\n36.  **Alt+F1，查找代码所在位置**\n37.  **Alt+1，快速打开或隐藏工程面板**\n38.  **Ctrl+Alt+left/right，返回至上次浏览的位置**\n39.  **Alt+left/right，切换代码视图**\n40.  **Alt+Up/Down，在方法间快速移动定位**\n41.  **Ctrl+Shift+Up/Down，向上/下移动语句**\n42.  **F2 或 Shift+F2，高亮错误或警告快速定位**\n43.  **Tab，代码标签输入完成后，按 Tab，生成代码**\n44.  **Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失**\n45.  **Alt+F3，逐个往下查找相同文本，并高亮显示**\n46.  **Ctrl+Up/Down，光标中转到第一行或最后一行下**\n47.  **Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）**\n48.  **Ctrl+Alt+B，跳转到方法实现处**\n49.  **Ctrl+Shift+Backspace，跳转到上次编辑的地方**\n50.  **Ctrl+O，重写方法**\n51.  **Ctrl+Alt+Space，类名自动完成**\n52.  **Ctrl+Alt+Up/Down，快速跳转搜索结果**\n53.  **Ctrl+Shift+J，整合两行**\n54.  **Alt+F8，计算变量值**\n55.  **Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本**\n56.  **Ctrl+Alt+Shift+V，简单粘贴**\n57.  **Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口**\n58.  **F12，把焦点从编辑器移到最近使用的工具窗口**\n59.  **Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器**\n60.  **Ctrl+W，可以选择单词继而语句继而行继而函数**\n61.  **Ctrl+Shift+W，取消选择光标所在词**\n62.  **Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置**\n63.  **Ctrl+I，实现方法**\n64.  **Ctrl+Shift+U，大小写转化**\n65.  **Ctrl+Y，删除当前行**\n66.  **Shift+Enter，向下插入新行**\n67.  **psvm/sout，main/System.out.println(); Ctrl+J，查看更多**\n68.  **Ctrl+Shift+F，全局查找**\n69.  **Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找**\n70.  **Ctrl+Shift+S，高级搜索**\n71.  **Ctrl+U，转到父类**\n72.  **Ctrl+Alt+S，打开设置对话框**\n73.  **Alt+Shift+Inert，开启/关闭列选择模式**\n74.  **Ctrl+Alt+Shift+S，打开当前项目/模块属性**\n75.  **Ctrl+G，定位行**\n76.  **Alt+Home，跳转到导航栏**\n77.  **Ctrl+Enter，上插一行**\n78.  **Ctrl+Backspace，按单词删除**\n79.  **Ctrl+\"+/-\"，当前方法展开、折叠**\n80.  **Ctrl+Shift+\"+/-\"，全部展开、折叠**\n<div>**【调试部分、编译】**</div>\n\n1.  **Ctrl+F2，停止**\n2.  **Alt+Shift+F9，选择 Debug**\n3.  **Alt+Shift+F10，选择 Run**\n4.  **Ctrl+Shift+F9，编译**\n5.  **Ctrl+Shift+F10，运行**\n6.  **Ctrl+Shift+F8，查看断点**\n7.  **F8，步过**\n8.  **F7，步入**\n9.  **Shift+F7，智能步入**\n10.  **Shift+F8，步出**\n11.  **Alt+Shift+F8，强制步过**\n12.  **Alt+Shift+F7，强制步入**\n13.  **Alt+F9，运行至光标处**\n14.  **Ctrl+Alt+F9，强制运行至光标处**\n15.  **F9，恢复程序**\n16.  **Alt+F10，定位到断点**\n17.  **Ctrl+F8，切换行断点**\n18.  **Ctrl+F9，生成项目**\n19.  **Alt+1，项目**\n20.  **Alt+2，收藏**\n21.  **Alt+6，TODO**\n22.  **Alt+7，结构**\n23.  **Ctrl+Shift+C，复制路径**\n24.  **Ctrl+Alt+Shift+C，复制引用，必须选择类名**\n25.  **Ctrl+Alt+Y，同步**\n26.  **Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）**\n27.  **Shift+F12，还原默认布局**\n28.  **Ctrl+Shift+F12，隐藏/恢复所有窗口**\n29.  **Ctrl+F4，关闭**\n30.  **Ctrl+Shift+F4，关闭活动选项卡**\n31.  **Ctrl+Tab，转到下一个拆分器**\n32.  **Ctrl+Shift+Tab，转到上一个拆分器**\n<div>**【重构】**</div>\n\n1.  **Ctrl+Alt+Shift+T，弹出重构菜单**\n2.  **Shift+F6，重命名**\n3.  **F6，移动**\n4.  **F5，复制**\n5.  **Alt+Delete，安全删除**\n6.  **Ctrl+Alt+N，内联**\n<div>**【查找】**</div>\n\n1.  **Ctrl+F，查找**\n2.  **Ctrl+R，替换**\n3.  **F3，查找下一个**\n4.  **Shift+F3，查找上一个**\n5.  **Ctrl+Shift+F，在路径中查找**\n6.  **Ctrl+Shift+R，在路径中替换**\n7.  **Ctrl+Shift+S，搜索结构**\n8.  **Ctrl+Shift+M，替换结构**\n9.  **Alt+F7，查找用法**\n10.  **Ctrl+Alt+F7，显示用法**\n11.  **Ctrl+F7，在文件中查找用法**\n12.  **Ctrl+Shift+F7，在文件中高亮显示用法**\n<div>**【VCS】**</div>\n\n1.  **Alt+~，VCS 操作菜单**\n2.  **Ctrl+K，提交更改**\n3.  **Ctrl+T，更新项目**\n4.  **Ctrl+Alt+Shift+D，显示变化【常规】**\n\n    1.  **Ctrl+Shift + Enter，语句完成**\n    2.  **“！”，否定完成，输入表达式时按 “！”键**\n    3.  **Ctrl+E，最近的文件**\n    4.  **Ctrl+Shift+E，最近更改的文件**\n    5.  **Shift+Click，可以关闭文件**\n    6.  **Ctrl+[ OR ]，可以跑到大括号的开头与结尾**\n    7.  **Ctrl+F12，可以显示当前文件的结构**\n    8.  **Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择**\n    9.  **Ctrl+N，可以快速打开类**\n    10.  **Ctrl+Shift+N，可以快速打开文件**\n    11.  **Alt+Q，可以看到当前方法的声明**\n    12.  **Ctrl+P，可以显示参数信息**\n    13.  **Ctrl+Shift+Insert，可以选择剪贴板内容并插入**\n    14.  **Alt+Insert，可以生成构造器/Getter/Setter等**\n    15.  **Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义**\n    16.  **Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch**\n    17.  **Ctrl+Enter，导入包，自动修正**\n    18.  **Ctrl+Alt+L，格式化代码**\n    19.  **Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作**\n    20.  **Ctrl+Alt+O，优化导入的类和包**\n    21.  **Ctrl+R，替换文本**\n    22.  **Ctrl+F，查找文本**\n    23.  **Ctrl+Shift+Space，自动补全代码**\n    24.  **Ctrl+空格，代码提示（与系统输入法快捷键冲突）**\n    25.  **Ctrl+Shift+Alt+N，查找类中的方法或变量**\n    26.  **Alt+Shift+C，最近的更改**\n    27.  **Alt+Shift+Up/Down，上/下移一行**\n    28.  **Shift+F6，重构 - 重命名**\n    29.  **Ctrl+X，删除行**\n    30.  **Ctrl+D，复制行**\n    31.  **Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）**\n    32.  **Ctrl+J，自动代码（例如：serr）**\n    33.  **Ctrl+Alt+J，用动态模板环绕**\n    34.  **Ctrl+H，显示类结构图（类的继承层次）**\n    35.  **Ctrl+Q，显示注释文档**\n    36.  **Alt+F1，查找代码所在位置**\n    37.  **Alt+1，快速打开或隐藏工程面板**\n    38.  **Ctrl+Alt+left/right，返回至上次浏览的位置**\n    39.  **Alt+left/right，切换代码视图**\n    40.  **Alt+Up/Down，在方法间快速移动定位**\n    41.  **Ctrl+Shift+Up/Down，向上/下移动语句**\n    42.  **F2 或 Shift+F2，高亮错误或警告快速定位**\n    43.  **Tab，代码标签输入完成后，按 Tab，生成代码**\n    44.  **Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失**\n    45.  **Alt+F3，逐个往下查找相同文本，并高亮显示**\n    46.  **Ctrl+Up/Down，光标中转到第一行或最后一行下**\n    47.  **Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）**\n    48.  **Ctrl+Alt+B，跳转到方法实现处**\n    49.  **Ctrl+Shift+Backspace，跳转到上次编辑的地方**\n    50.  **Ctrl+O，重写方法**\n    51.  **Ctrl+Alt+Space，类名自动完成**\n    52.  **Ctrl+Alt+Up/Down，快速跳转搜索结果**\n    53.  **Ctrl+Shift+J，整合两行**\n    54.  **Alt+F8，计算变量值**\n    55.  **Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本**\n    56.  **Ctrl+Alt+Shift+V，简单粘贴**\n    57.  **Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口**\n    58.  **F12，把焦点从编辑器移到最近使用的工具窗口**\n    59.  **Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器**\n    60.  **Ctrl+W，可以选择单词继而语句继而行继而函数**\n    61.  **Ctrl+Shift+W，取消选择光标所在词**\n    62.  **Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置**\n    63.  **Ctrl+I，实现方法**\n    64.  **Ctrl+Shift+U，大小写转化**\n    65.  **Ctrl+Y，删除当前行**\n    66.  **Shift+Enter，向下插入新行**\n    67.  **psvm/sout，main/System.out.println(); Ctrl+J，查看更多**\n    68.  **Ctrl+Shift+F，全局查找**\n    69.  **Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找**\n    70.  **Ctrl+Shift+S，高级搜索**\n    71.  **Ctrl+U，转到父类**\n    72.  **Ctrl+Alt+S，打开设置对话框**\n    73.  **Alt+Shift+Inert，开启/关闭列选择模式**\n    74.  **Ctrl+Alt+Shift+S，打开当前项目/模块属性**\n    75.  **Ctrl+G，定位行**\n    76.  **Alt+Home，跳转到导航栏**\n    77.  **Ctrl+Enter，上插一行**\n    78.  **Ctrl+Backspace，按单词删除**\n    79.  **Ctrl+\"+/-\"，当前方法展开、折叠**\n    80.  **Ctrl+Shift+\"+/-\"，全部展开、折叠**\n<div>**【调试部分、编译】**</div>\n\n    1.  **Ctrl+F2，停止**\n    2.  **Alt+Shift+F9，选择 Debug**\n    3.  **Alt+Shift+F10，选择 Run**\n    4.  **Ctrl+Shift+F9，编译**\n    5.  **Ctrl+Shift+F10，运行**\n    6.  **Ctrl+Shift+F8，查看断点**\n    7.  **F8，步过**\n    8.  **F7，步入**\n    9.  **Shift+F7，智能步入**\n    10.  **Shift+F8，步出**\n    11.  **Alt+Shift+F8，强制步过**\n    12.  **Alt+Shift+F7，强制步入**\n    13.  **Alt+F9，运行至光标处**\n    14.  **Ctrl+Alt+F9，强制运行至光标处**\n    15.  **F9，恢复程序**\n    16.  **Alt+F10，定位到断点**\n    17.  **Ctrl+F8，切换行断点**\n    18.  **Ctrl+F9，生成项目**\n    19.  **Alt+1，项目**\n    20.  **Alt+2，收藏**\n    21.  **Alt+6，TODO**\n    22.  **Alt+7，结构**\n    23.  **Ctrl+Shift+C，复制路径**\n    24.  **Ctrl+Alt+Shift+C，复制引用，必须选择类名**\n    25.  **Ctrl+Alt+Y，同步**\n    26.  **Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）**\n    27.  **Shift+F12，还原默认布局**\n    28.  **Ctrl+Shift+F12，隐藏/恢复所有窗口**\n    29.  **Ctrl+F4，关闭**\n    30.  **Ctrl+Shift+F4，关闭活动选项卡**\n    31.  **Ctrl+Tab，转到下一个拆分器**\n    32.  **Ctrl+Shift+Tab，转到上一个拆分器**\n<div>**【重构】**</div>\n\n    1.  **Ctrl+Alt+Shift+T，弹出重构菜单**\n    2.  **Shift+F6，重命名**\n    3.  **F6，移动**\n    4.  **F5，复制**\n    5.  **Alt+Delete，安全删除**\n    6.  **Ctrl+Alt+N，内联**\n<div>**【查找】**</div>\n\n    1.  **Ctrl+F，查找**\n    2.  **Ctrl+R，替换**\n    3.  **F3，查找下一个**\n    4.  **Shift+F3，查找上一个**\n    5.  **Ctrl+Shift+F，在路径中查找**\n    6.  **Ctrl+Shift+R，在路径中替换**\n    7.  **Ctrl+Shift+S，搜索结构**\n    8.  **Ctrl+Shift+M，替换结构**\n    9.  **Alt+F7，查找用法**\n    10.  **Ctrl+Alt+F7，显示用法**\n    11.  **Ctrl+F7，在文件中查找用法**\n    12.  **Ctrl+Shift+F7，在文件中高亮显示用法**\n<div>**【VCS】**</div>\n\n    1.  **Alt+~，VCS 操作菜单**\n    2.  **Ctrl+K，提交更改**\n    3.  **Ctrl+T，更新项目**\n    4.  **Ctrl+Alt+Shift+D，显示变化**","source":"_posts/intellij-idea-e5-bf-ab-e6-8d-b7-e9-94-ae.md","raw":"---\ntitle: Intellij idea 快捷键\nid: 20\ncategories:\n  - IDE 使用\ndate: 2015-04-17 12:52:57\ntags:\n    - Intellij IDEA\n    - smart key\n---\n\n**<span style=\"font-size: 14px;\">原文：http://www.cnblogs.com/tonycody/p/3257601.html </span>**\n\n** **\n<div>**【常规】**</div>\n\n1.  **Ctrl+Shift + Enter，语句完成**\n2.  **“！”，否定完成，输入表达式时按 “！”键**\n3.  **Ctrl+E，最近的文件**\n4.  **Ctrl+Shift+E，最近更改的文件**\n5.  **Shift+Click，可以关闭文件**\n6.  **Ctrl+[ OR ]，可以跑到大括号的开头与结尾**\n7.  **Ctrl+F12，可以显示当前文件的结构**\n8.  **Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择**\n9.  **Ctrl+N，可以快速打开类**\n10.  **Ctrl+Shift+N，可以快速打开文件**\n11.  **Alt+Q，可以看到当前方法的声明**\n12.  **Ctrl+P，可以显示参数信息**\n13.  **Ctrl+Shift+Insert，可以选择剪贴板内容并插入**\n14.  **Alt+Insert，可以生成构造器/Getter/Setter等**\n15.  **Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义**\n16.  **Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch**\n17.  **Ctrl+Enter，导入包，自动修正**\n18.  **Ctrl+Alt+L，格式化代码**\n19.  **Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作**\n20.  **Ctrl+Alt+O，优化导入的类和包**\n21.  **Ctrl+R，替换文本**\n22.  **Ctrl+F，查找文本**\n23.  **Ctrl+Shift+Space，自动补全代码**\n24.  **Ctrl+空格，代码提示（与系统输入法快捷键冲突）**\n25.  **Ctrl+Shift+Alt+N，查找类中的方法或变量**\n26.  **Alt+Shift+C，最近的更改**\n27.  **Alt+Shift+Up/Down，上/下移一行**\n28.  **Shift+F6，重构 - 重命名**\n29.  **Ctrl+X，删除行**\n30.  **Ctrl+D，复制行**\n31.  **Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）**\n32.  **Ctrl+J，自动代码（例如：serr）**\n33.  **Ctrl+Alt+J，用动态模板环绕**\n34.  **Ctrl+H，显示类结构图（类的继承层次）**\n35.  **Ctrl+Q，显示注释文档**\n36.  **Alt+F1，查找代码所在位置**\n37.  **Alt+1，快速打开或隐藏工程面板**\n38.  **Ctrl+Alt+left/right，返回至上次浏览的位置**\n39.  **Alt+left/right，切换代码视图**\n40.  **Alt+Up/Down，在方法间快速移动定位**\n41.  **Ctrl+Shift+Up/Down，向上/下移动语句**\n42.  **F2 或 Shift+F2，高亮错误或警告快速定位**\n43.  **Tab，代码标签输入完成后，按 Tab，生成代码**\n44.  **Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失**\n45.  **Alt+F3，逐个往下查找相同文本，并高亮显示**\n46.  **Ctrl+Up/Down，光标中转到第一行或最后一行下**\n47.  **Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）**\n48.  **Ctrl+Alt+B，跳转到方法实现处**\n49.  **Ctrl+Shift+Backspace，跳转到上次编辑的地方**\n50.  **Ctrl+O，重写方法**\n51.  **Ctrl+Alt+Space，类名自动完成**\n52.  **Ctrl+Alt+Up/Down，快速跳转搜索结果**\n53.  **Ctrl+Shift+J，整合两行**\n54.  **Alt+F8，计算变量值**\n55.  **Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本**\n56.  **Ctrl+Alt+Shift+V，简单粘贴**\n57.  **Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口**\n58.  **F12，把焦点从编辑器移到最近使用的工具窗口**\n59.  **Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器**\n60.  **Ctrl+W，可以选择单词继而语句继而行继而函数**\n61.  **Ctrl+Shift+W，取消选择光标所在词**\n62.  **Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置**\n63.  **Ctrl+I，实现方法**\n64.  **Ctrl+Shift+U，大小写转化**\n65.  **Ctrl+Y，删除当前行**\n66.  **Shift+Enter，向下插入新行**\n67.  **psvm/sout，main/System.out.println(); Ctrl+J，查看更多**\n68.  **Ctrl+Shift+F，全局查找**\n69.  **Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找**\n70.  **Ctrl+Shift+S，高级搜索**\n71.  **Ctrl+U，转到父类**\n72.  **Ctrl+Alt+S，打开设置对话框**\n73.  **Alt+Shift+Inert，开启/关闭列选择模式**\n74.  **Ctrl+Alt+Shift+S，打开当前项目/模块属性**\n75.  **Ctrl+G，定位行**\n76.  **Alt+Home，跳转到导航栏**\n77.  **Ctrl+Enter，上插一行**\n78.  **Ctrl+Backspace，按单词删除**\n79.  **Ctrl+\"+/-\"，当前方法展开、折叠**\n80.  **Ctrl+Shift+\"+/-\"，全部展开、折叠**\n<div>**【调试部分、编译】**</div>\n\n1.  **Ctrl+F2，停止**\n2.  **Alt+Shift+F9，选择 Debug**\n3.  **Alt+Shift+F10，选择 Run**\n4.  **Ctrl+Shift+F9，编译**\n5.  **Ctrl+Shift+F10，运行**\n6.  **Ctrl+Shift+F8，查看断点**\n7.  **F8，步过**\n8.  **F7，步入**\n9.  **Shift+F7，智能步入**\n10.  **Shift+F8，步出**\n11.  **Alt+Shift+F8，强制步过**\n12.  **Alt+Shift+F7，强制步入**\n13.  **Alt+F9，运行至光标处**\n14.  **Ctrl+Alt+F9，强制运行至光标处**\n15.  **F9，恢复程序**\n16.  **Alt+F10，定位到断点**\n17.  **Ctrl+F8，切换行断点**\n18.  **Ctrl+F9，生成项目**\n19.  **Alt+1，项目**\n20.  **Alt+2，收藏**\n21.  **Alt+6，TODO**\n22.  **Alt+7，结构**\n23.  **Ctrl+Shift+C，复制路径**\n24.  **Ctrl+Alt+Shift+C，复制引用，必须选择类名**\n25.  **Ctrl+Alt+Y，同步**\n26.  **Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）**\n27.  **Shift+F12，还原默认布局**\n28.  **Ctrl+Shift+F12，隐藏/恢复所有窗口**\n29.  **Ctrl+F4，关闭**\n30.  **Ctrl+Shift+F4，关闭活动选项卡**\n31.  **Ctrl+Tab，转到下一个拆分器**\n32.  **Ctrl+Shift+Tab，转到上一个拆分器**\n<div>**【重构】**</div>\n\n1.  **Ctrl+Alt+Shift+T，弹出重构菜单**\n2.  **Shift+F6，重命名**\n3.  **F6，移动**\n4.  **F5，复制**\n5.  **Alt+Delete，安全删除**\n6.  **Ctrl+Alt+N，内联**\n<div>**【查找】**</div>\n\n1.  **Ctrl+F，查找**\n2.  **Ctrl+R，替换**\n3.  **F3，查找下一个**\n4.  **Shift+F3，查找上一个**\n5.  **Ctrl+Shift+F，在路径中查找**\n6.  **Ctrl+Shift+R，在路径中替换**\n7.  **Ctrl+Shift+S，搜索结构**\n8.  **Ctrl+Shift+M，替换结构**\n9.  **Alt+F7，查找用法**\n10.  **Ctrl+Alt+F7，显示用法**\n11.  **Ctrl+F7，在文件中查找用法**\n12.  **Ctrl+Shift+F7，在文件中高亮显示用法**\n<div>**【VCS】**</div>\n\n1.  **Alt+~，VCS 操作菜单**\n2.  **Ctrl+K，提交更改**\n3.  **Ctrl+T，更新项目**\n4.  **Ctrl+Alt+Shift+D，显示变化【常规】**\n\n    1.  **Ctrl+Shift + Enter，语句完成**\n    2.  **“！”，否定完成，输入表达式时按 “！”键**\n    3.  **Ctrl+E，最近的文件**\n    4.  **Ctrl+Shift+E，最近更改的文件**\n    5.  **Shift+Click，可以关闭文件**\n    6.  **Ctrl+[ OR ]，可以跑到大括号的开头与结尾**\n    7.  **Ctrl+F12，可以显示当前文件的结构**\n    8.  **Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择**\n    9.  **Ctrl+N，可以快速打开类**\n    10.  **Ctrl+Shift+N，可以快速打开文件**\n    11.  **Alt+Q，可以看到当前方法的声明**\n    12.  **Ctrl+P，可以显示参数信息**\n    13.  **Ctrl+Shift+Insert，可以选择剪贴板内容并插入**\n    14.  **Alt+Insert，可以生成构造器/Getter/Setter等**\n    15.  **Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义**\n    16.  **Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch**\n    17.  **Ctrl+Enter，导入包，自动修正**\n    18.  **Ctrl+Alt+L，格式化代码**\n    19.  **Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作**\n    20.  **Ctrl+Alt+O，优化导入的类和包**\n    21.  **Ctrl+R，替换文本**\n    22.  **Ctrl+F，查找文本**\n    23.  **Ctrl+Shift+Space，自动补全代码**\n    24.  **Ctrl+空格，代码提示（与系统输入法快捷键冲突）**\n    25.  **Ctrl+Shift+Alt+N，查找类中的方法或变量**\n    26.  **Alt+Shift+C，最近的更改**\n    27.  **Alt+Shift+Up/Down，上/下移一行**\n    28.  **Shift+F6，重构 - 重命名**\n    29.  **Ctrl+X，删除行**\n    30.  **Ctrl+D，复制行**\n    31.  **Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）**\n    32.  **Ctrl+J，自动代码（例如：serr）**\n    33.  **Ctrl+Alt+J，用动态模板环绕**\n    34.  **Ctrl+H，显示类结构图（类的继承层次）**\n    35.  **Ctrl+Q，显示注释文档**\n    36.  **Alt+F1，查找代码所在位置**\n    37.  **Alt+1，快速打开或隐藏工程面板**\n    38.  **Ctrl+Alt+left/right，返回至上次浏览的位置**\n    39.  **Alt+left/right，切换代码视图**\n    40.  **Alt+Up/Down，在方法间快速移动定位**\n    41.  **Ctrl+Shift+Up/Down，向上/下移动语句**\n    42.  **F2 或 Shift+F2，高亮错误或警告快速定位**\n    43.  **Tab，代码标签输入完成后，按 Tab，生成代码**\n    44.  **Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失**\n    45.  **Alt+F3，逐个往下查找相同文本，并高亮显示**\n    46.  **Ctrl+Up/Down，光标中转到第一行或最后一行下**\n    47.  **Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）**\n    48.  **Ctrl+Alt+B，跳转到方法实现处**\n    49.  **Ctrl+Shift+Backspace，跳转到上次编辑的地方**\n    50.  **Ctrl+O，重写方法**\n    51.  **Ctrl+Alt+Space，类名自动完成**\n    52.  **Ctrl+Alt+Up/Down，快速跳转搜索结果**\n    53.  **Ctrl+Shift+J，整合两行**\n    54.  **Alt+F8，计算变量值**\n    55.  **Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本**\n    56.  **Ctrl+Alt+Shift+V，简单粘贴**\n    57.  **Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口**\n    58.  **F12，把焦点从编辑器移到最近使用的工具窗口**\n    59.  **Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器**\n    60.  **Ctrl+W，可以选择单词继而语句继而行继而函数**\n    61.  **Ctrl+Shift+W，取消选择光标所在词**\n    62.  **Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置**\n    63.  **Ctrl+I，实现方法**\n    64.  **Ctrl+Shift+U，大小写转化**\n    65.  **Ctrl+Y，删除当前行**\n    66.  **Shift+Enter，向下插入新行**\n    67.  **psvm/sout，main/System.out.println(); Ctrl+J，查看更多**\n    68.  **Ctrl+Shift+F，全局查找**\n    69.  **Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找**\n    70.  **Ctrl+Shift+S，高级搜索**\n    71.  **Ctrl+U，转到父类**\n    72.  **Ctrl+Alt+S，打开设置对话框**\n    73.  **Alt+Shift+Inert，开启/关闭列选择模式**\n    74.  **Ctrl+Alt+Shift+S，打开当前项目/模块属性**\n    75.  **Ctrl+G，定位行**\n    76.  **Alt+Home，跳转到导航栏**\n    77.  **Ctrl+Enter，上插一行**\n    78.  **Ctrl+Backspace，按单词删除**\n    79.  **Ctrl+\"+/-\"，当前方法展开、折叠**\n    80.  **Ctrl+Shift+\"+/-\"，全部展开、折叠**\n<div>**【调试部分、编译】**</div>\n\n    1.  **Ctrl+F2，停止**\n    2.  **Alt+Shift+F9，选择 Debug**\n    3.  **Alt+Shift+F10，选择 Run**\n    4.  **Ctrl+Shift+F9，编译**\n    5.  **Ctrl+Shift+F10，运行**\n    6.  **Ctrl+Shift+F8，查看断点**\n    7.  **F8，步过**\n    8.  **F7，步入**\n    9.  **Shift+F7，智能步入**\n    10.  **Shift+F8，步出**\n    11.  **Alt+Shift+F8，强制步过**\n    12.  **Alt+Shift+F7，强制步入**\n    13.  **Alt+F9，运行至光标处**\n    14.  **Ctrl+Alt+F9，强制运行至光标处**\n    15.  **F9，恢复程序**\n    16.  **Alt+F10，定位到断点**\n    17.  **Ctrl+F8，切换行断点**\n    18.  **Ctrl+F9，生成项目**\n    19.  **Alt+1，项目**\n    20.  **Alt+2，收藏**\n    21.  **Alt+6，TODO**\n    22.  **Alt+7，结构**\n    23.  **Ctrl+Shift+C，复制路径**\n    24.  **Ctrl+Alt+Shift+C，复制引用，必须选择类名**\n    25.  **Ctrl+Alt+Y，同步**\n    26.  **Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）**\n    27.  **Shift+F12，还原默认布局**\n    28.  **Ctrl+Shift+F12，隐藏/恢复所有窗口**\n    29.  **Ctrl+F4，关闭**\n    30.  **Ctrl+Shift+F4，关闭活动选项卡**\n    31.  **Ctrl+Tab，转到下一个拆分器**\n    32.  **Ctrl+Shift+Tab，转到上一个拆分器**\n<div>**【重构】**</div>\n\n    1.  **Ctrl+Alt+Shift+T，弹出重构菜单**\n    2.  **Shift+F6，重命名**\n    3.  **F6，移动**\n    4.  **F5，复制**\n    5.  **Alt+Delete，安全删除**\n    6.  **Ctrl+Alt+N，内联**\n<div>**【查找】**</div>\n\n    1.  **Ctrl+F，查找**\n    2.  **Ctrl+R，替换**\n    3.  **F3，查找下一个**\n    4.  **Shift+F3，查找上一个**\n    5.  **Ctrl+Shift+F，在路径中查找**\n    6.  **Ctrl+Shift+R，在路径中替换**\n    7.  **Ctrl+Shift+S，搜索结构**\n    8.  **Ctrl+Shift+M，替换结构**\n    9.  **Alt+F7，查找用法**\n    10.  **Ctrl+Alt+F7，显示用法**\n    11.  **Ctrl+F7，在文件中查找用法**\n    12.  **Ctrl+Shift+F7，在文件中高亮显示用法**\n<div>**【VCS】**</div>\n\n    1.  **Alt+~，VCS 操作菜单**\n    2.  **Ctrl+K，提交更改**\n    3.  **Ctrl+T，更新项目**\n    4.  **Ctrl+Alt+Shift+D，显示变化**","slug":"intellij-idea-e5-bf-ab-e6-8d-b7-e9-94-ae","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pm001g2smavi4egz0z","content":"<p><strong><span style=\"font-size: 14px;\">原文：<a href=\"http://www.cnblogs.com/tonycody/p/3257601.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tonycody/p/3257601.html</a> </span></strong></p>\n<hr>\n<div><strong>【常规】</strong></div>\n\n<ol>\n<li><strong>Ctrl+Shift + Enter，语句完成</strong></li>\n<li><strong>“！”，否定完成，输入表达式时按 “！”键</strong></li>\n<li><strong>Ctrl+E，最近的文件</strong></li>\n<li><strong>Ctrl+Shift+E，最近更改的文件</strong></li>\n<li><strong>Shift+Click，可以关闭文件</strong></li>\n<li><strong>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</strong></li>\n<li><strong>Ctrl+F12，可以显示当前文件的结构</strong></li>\n<li><strong>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</strong></li>\n<li><strong>Ctrl+N，可以快速打开类</strong></li>\n<li><strong>Ctrl+Shift+N，可以快速打开文件</strong></li>\n<li><strong>Alt+Q，可以看到当前方法的声明</strong></li>\n<li><strong>Ctrl+P，可以显示参数信息</strong></li>\n<li><strong>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</strong></li>\n<li><strong>Alt+Insert，可以生成构造器/Getter/Setter等</strong></li>\n<li><strong>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</strong></li>\n<li><strong>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</strong></li>\n<li><strong>Ctrl+Enter，导入包，自动修正</strong></li>\n<li><strong>Ctrl+Alt+L，格式化代码</strong></li>\n<li><strong>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</strong></li>\n<li><strong>Ctrl+Alt+O，优化导入的类和包</strong></li>\n<li><strong>Ctrl+R，替换文本</strong></li>\n<li><strong>Ctrl+F，查找文本</strong></li>\n<li><strong>Ctrl+Shift+Space，自动补全代码</strong></li>\n<li><strong>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</strong></li>\n<li><strong>Ctrl+Shift+Alt+N，查找类中的方法或变量</strong></li>\n<li><strong>Alt+Shift+C，最近的更改</strong></li>\n<li><strong>Alt+Shift+Up/Down，上/下移一行</strong></li>\n<li><strong>Shift+F6，重构 - 重命名</strong></li>\n<li><strong>Ctrl+X，删除行</strong></li>\n<li><strong>Ctrl+D，复制行</strong></li>\n<li><strong>Ctrl+/或Ctrl+Shift+/，注释（//或者/</strong>/）**</li>\n<li><strong>Ctrl+J，自动代码（例如：serr）</strong></li>\n<li><strong>Ctrl+Alt+J，用动态模板环绕</strong></li>\n<li><strong>Ctrl+H，显示类结构图（类的继承层次）</strong></li>\n<li><strong>Ctrl+Q，显示注释文档</strong></li>\n<li><strong>Alt+F1，查找代码所在位置</strong></li>\n<li><strong>Alt+1，快速打开或隐藏工程面板</strong></li>\n<li><strong>Ctrl+Alt+left/right，返回至上次浏览的位置</strong></li>\n<li><strong>Alt+left/right，切换代码视图</strong></li>\n<li><strong>Alt+Up/Down，在方法间快速移动定位</strong></li>\n<li><strong>Ctrl+Shift+Up/Down，向上/下移动语句</strong></li>\n<li><strong>F2 或 Shift+F2，高亮错误或警告快速定位</strong></li>\n<li><strong>Tab，代码标签输入完成后，按 Tab，生成代码</strong></li>\n<li><strong>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</strong></li>\n<li><strong>Alt+F3，逐个往下查找相同文本，并高亮显示</strong></li>\n<li><strong>Ctrl+Up/Down，光标中转到第一行或最后一行下</strong></li>\n<li><strong>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</strong></li>\n<li><strong>Ctrl+Alt+B，跳转到方法实现处</strong></li>\n<li><strong>Ctrl+Shift+Backspace，跳转到上次编辑的地方</strong></li>\n<li><strong>Ctrl+O，重写方法</strong></li>\n<li><strong>Ctrl+Alt+Space，类名自动完成</strong></li>\n<li><strong>Ctrl+Alt+Up/Down，快速跳转搜索结果</strong></li>\n<li><strong>Ctrl+Shift+J，整合两行</strong></li>\n<li><strong>Alt+F8，计算变量值</strong></li>\n<li><strong>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</strong></li>\n<li><strong>Ctrl+Alt+Shift+V，简单粘贴</strong></li>\n<li><strong>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</strong></li>\n<li><strong>F12，把焦点从编辑器移到最近使用的工具窗口</strong></li>\n<li><strong>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</strong></li>\n<li><strong>Ctrl+W，可以选择单词继而语句继而行继而函数</strong></li>\n<li><strong>Ctrl+Shift+W，取消选择光标所在词</strong></li>\n<li><strong>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</strong></li>\n<li><strong>Ctrl+I，实现方法</strong></li>\n<li><strong>Ctrl+Shift+U，大小写转化</strong></li>\n<li><strong>Ctrl+Y，删除当前行</strong></li>\n<li><strong>Shift+Enter，向下插入新行</strong></li>\n<li><strong>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</strong></li>\n<li><strong>Ctrl+Shift+F，全局查找</strong></li>\n<li><strong>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</strong></li>\n<li><strong>Ctrl+Shift+S，高级搜索</strong></li>\n<li><strong>Ctrl+U，转到父类</strong></li>\n<li><strong>Ctrl+Alt+S，打开设置对话框</strong></li>\n<li><strong>Alt+Shift+Inert，开启/关闭列选择模式</strong></li>\n<li><strong>Ctrl+Alt+Shift+S，打开当前项目/模块属性</strong></li>\n<li><strong>Ctrl+G，定位行</strong></li>\n<li><strong>Alt+Home，跳转到导航栏</strong></li>\n<li><strong>Ctrl+Enter，上插一行</strong></li>\n<li><strong>Ctrl+Backspace，按单词删除</strong></li>\n<li><strong>Ctrl+”+/-“，当前方法展开、折叠</strong></li>\n<li><p><strong>Ctrl+Shift+”+/-“，全部展开、折叠</strong></p>\n<div><strong>【调试部分、编译】</strong></div>\n</li>\n<li><p><strong>Ctrl+F2，停止</strong></p>\n</li>\n<li><strong>Alt+Shift+F9，选择 Debug</strong></li>\n<li><strong>Alt+Shift+F10，选择 Run</strong></li>\n<li><strong>Ctrl+Shift+F9，编译</strong></li>\n<li><strong>Ctrl+Shift+F10，运行</strong></li>\n<li><strong>Ctrl+Shift+F8，查看断点</strong></li>\n<li><strong>F8，步过</strong></li>\n<li><strong>F7，步入</strong></li>\n<li><strong>Shift+F7，智能步入</strong></li>\n<li><strong>Shift+F8，步出</strong></li>\n<li><strong>Alt+Shift+F8，强制步过</strong></li>\n<li><strong>Alt+Shift+F7，强制步入</strong></li>\n<li><strong>Alt+F9，运行至光标处</strong></li>\n<li><strong>Ctrl+Alt+F9，强制运行至光标处</strong></li>\n<li><strong>F9，恢复程序</strong></li>\n<li><strong>Alt+F10，定位到断点</strong></li>\n<li><strong>Ctrl+F8，切换行断点</strong></li>\n<li><strong>Ctrl+F9，生成项目</strong></li>\n<li><strong>Alt+1，项目</strong></li>\n<li><strong>Alt+2，收藏</strong></li>\n<li><strong>Alt+6，TODO</strong></li>\n<li><strong>Alt+7，结构</strong></li>\n<li><strong>Ctrl+Shift+C，复制路径</strong></li>\n<li><strong>Ctrl+Alt+Shift+C，复制引用，必须选择类名</strong></li>\n<li><strong>Ctrl+Alt+Y，同步</strong></li>\n<li><strong>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</strong></li>\n<li><strong>Shift+F12，还原默认布局</strong></li>\n<li><strong>Ctrl+Shift+F12，隐藏/恢复所有窗口</strong></li>\n<li><strong>Ctrl+F4，关闭</strong></li>\n<li><strong>Ctrl+Shift+F4，关闭活动选项卡</strong></li>\n<li><strong>Ctrl+Tab，转到下一个拆分器</strong></li>\n<li><p><strong>Ctrl+Shift+Tab，转到上一个拆分器</strong></p>\n<div><strong>【重构】</strong></div>\n</li>\n<li><p><strong>Ctrl+Alt+Shift+T，弹出重构菜单</strong></p>\n</li>\n<li><strong>Shift+F6，重命名</strong></li>\n<li><strong>F6，移动</strong></li>\n<li><strong>F5，复制</strong></li>\n<li><strong>Alt+Delete，安全删除</strong></li>\n<li><p><strong>Ctrl+Alt+N，内联</strong></p>\n<div><strong>【查找】</strong></div>\n</li>\n<li><p><strong>Ctrl+F，查找</strong></p>\n</li>\n<li><strong>Ctrl+R，替换</strong></li>\n<li><strong>F3，查找下一个</strong></li>\n<li><strong>Shift+F3，查找上一个</strong></li>\n<li><strong>Ctrl+Shift+F，在路径中查找</strong></li>\n<li><strong>Ctrl+Shift+R，在路径中替换</strong></li>\n<li><strong>Ctrl+Shift+S，搜索结构</strong></li>\n<li><strong>Ctrl+Shift+M，替换结构</strong></li>\n<li><strong>Alt+F7，查找用法</strong></li>\n<li><strong>Ctrl+Alt+F7，显示用法</strong></li>\n<li><strong>Ctrl+F7，在文件中查找用法</strong></li>\n<li><p><strong>Ctrl+Shift+F7，在文件中高亮显示用法</strong></p>\n<div><strong>【VCS】</strong></div>\n</li>\n<li><p><strong>Alt+~，VCS 操作菜单</strong></p>\n</li>\n<li><strong>Ctrl+K，提交更改</strong></li>\n<li><strong>Ctrl+T，更新项目</strong></li>\n<li><p><strong>Ctrl+Alt+Shift+D，显示变化【常规】</strong></p>\n<ol>\n<li><strong>Ctrl+Shift + Enter，语句完成</strong></li>\n<li><strong>“！”，否定完成，输入表达式时按 “！”键</strong></li>\n<li><strong>Ctrl+E，最近的文件</strong></li>\n<li><strong>Ctrl+Shift+E，最近更改的文件</strong></li>\n<li><strong>Shift+Click，可以关闭文件</strong></li>\n<li><strong>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</strong></li>\n<li><strong>Ctrl+F12，可以显示当前文件的结构</strong></li>\n<li><strong>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</strong></li>\n<li><strong>Ctrl+N，可以快速打开类</strong></li>\n<li><strong>Ctrl+Shift+N，可以快速打开文件</strong></li>\n<li><strong>Alt+Q，可以看到当前方法的声明</strong></li>\n<li><strong>Ctrl+P，可以显示参数信息</strong></li>\n<li><strong>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</strong></li>\n<li><strong>Alt+Insert，可以生成构造器/Getter/Setter等</strong></li>\n<li><strong>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</strong></li>\n<li><strong>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</strong></li>\n<li><strong>Ctrl+Enter，导入包，自动修正</strong></li>\n<li><strong>Ctrl+Alt+L，格式化代码</strong></li>\n<li><strong>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</strong></li>\n<li><strong>Ctrl+Alt+O，优化导入的类和包</strong></li>\n<li><strong>Ctrl+R，替换文本</strong></li>\n<li><strong>Ctrl+F，查找文本</strong></li>\n<li><strong>Ctrl+Shift+Space，自动补全代码</strong></li>\n<li><strong>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</strong></li>\n<li><strong>Ctrl+Shift+Alt+N，查找类中的方法或变量</strong></li>\n<li><strong>Alt+Shift+C，最近的更改</strong></li>\n<li><strong>Alt+Shift+Up/Down，上/下移一行</strong></li>\n<li><strong>Shift+F6，重构 - 重命名</strong></li>\n<li><strong>Ctrl+X，删除行</strong></li>\n<li><strong>Ctrl+D，复制行</strong></li>\n<li><strong>Ctrl+/或Ctrl+Shift+/，注释（//或者/</strong>/）**</li>\n<li><strong>Ctrl+J，自动代码（例如：serr）</strong></li>\n<li><strong>Ctrl+Alt+J，用动态模板环绕</strong></li>\n<li><strong>Ctrl+H，显示类结构图（类的继承层次）</strong></li>\n<li><strong>Ctrl+Q，显示注释文档</strong></li>\n<li><strong>Alt+F1，查找代码所在位置</strong></li>\n<li><strong>Alt+1，快速打开或隐藏工程面板</strong></li>\n<li><strong>Ctrl+Alt+left/right，返回至上次浏览的位置</strong></li>\n<li><strong>Alt+left/right，切换代码视图</strong></li>\n<li><strong>Alt+Up/Down，在方法间快速移动定位</strong></li>\n<li><strong>Ctrl+Shift+Up/Down，向上/下移动语句</strong></li>\n<li><strong>F2 或 Shift+F2，高亮错误或警告快速定位</strong></li>\n<li><strong>Tab，代码标签输入完成后，按 Tab，生成代码</strong></li>\n<li><strong>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</strong></li>\n<li><strong>Alt+F3，逐个往下查找相同文本，并高亮显示</strong></li>\n<li><strong>Ctrl+Up/Down，光标中转到第一行或最后一行下</strong></li>\n<li><strong>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</strong></li>\n<li><strong>Ctrl+Alt+B，跳转到方法实现处</strong></li>\n<li><strong>Ctrl+Shift+Backspace，跳转到上次编辑的地方</strong></li>\n<li><strong>Ctrl+O，重写方法</strong></li>\n<li><strong>Ctrl+Alt+Space，类名自动完成</strong></li>\n<li><strong>Ctrl+Alt+Up/Down，快速跳转搜索结果</strong></li>\n<li><strong>Ctrl+Shift+J，整合两行</strong></li>\n<li><strong>Alt+F8，计算变量值</strong></li>\n<li><strong>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</strong></li>\n<li><strong>Ctrl+Alt+Shift+V，简单粘贴</strong></li>\n<li><strong>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</strong></li>\n<li><strong>F12，把焦点从编辑器移到最近使用的工具窗口</strong></li>\n<li><strong>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</strong></li>\n<li><strong>Ctrl+W，可以选择单词继而语句继而行继而函数</strong></li>\n<li><strong>Ctrl+Shift+W，取消选择光标所在词</strong></li>\n<li><strong>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</strong></li>\n<li><strong>Ctrl+I，实现方法</strong></li>\n<li><strong>Ctrl+Shift+U，大小写转化</strong></li>\n<li><strong>Ctrl+Y，删除当前行</strong></li>\n<li><strong>Shift+Enter，向下插入新行</strong></li>\n<li><strong>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</strong></li>\n<li><strong>Ctrl+Shift+F，全局查找</strong></li>\n<li><strong>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</strong></li>\n<li><strong>Ctrl+Shift+S，高级搜索</strong></li>\n<li><strong>Ctrl+U，转到父类</strong></li>\n<li><strong>Ctrl+Alt+S，打开设置对话框</strong></li>\n<li><strong>Alt+Shift+Inert，开启/关闭列选择模式</strong></li>\n<li><strong>Ctrl+Alt+Shift+S，打开当前项目/模块属性</strong></li>\n<li><strong>Ctrl+G，定位行</strong></li>\n<li><strong>Alt+Home，跳转到导航栏</strong></li>\n<li><strong>Ctrl+Enter，上插一行</strong></li>\n<li><strong>Ctrl+Backspace，按单词删除</strong></li>\n<li><strong>Ctrl+”+/-“，当前方法展开、折叠</strong></li>\n<li><p><strong>Ctrl+Shift+”+/-“，全部展开、折叠</strong></p>\n<div><strong>【调试部分、编译】</strong></div>\n</li>\n<li><p><strong>Ctrl+F2，停止</strong></p>\n</li>\n<li><strong>Alt+Shift+F9，选择 Debug</strong></li>\n<li><strong>Alt+Shift+F10，选择 Run</strong></li>\n<li><strong>Ctrl+Shift+F9，编译</strong></li>\n<li><strong>Ctrl+Shift+F10，运行</strong></li>\n<li><strong>Ctrl+Shift+F8，查看断点</strong></li>\n<li><strong>F8，步过</strong></li>\n<li><strong>F7，步入</strong></li>\n<li><strong>Shift+F7，智能步入</strong></li>\n<li><strong>Shift+F8，步出</strong></li>\n<li><strong>Alt+Shift+F8，强制步过</strong></li>\n<li><strong>Alt+Shift+F7，强制步入</strong></li>\n<li><strong>Alt+F9，运行至光标处</strong></li>\n<li><strong>Ctrl+Alt+F9，强制运行至光标处</strong></li>\n<li><strong>F9，恢复程序</strong></li>\n<li><strong>Alt+F10，定位到断点</strong></li>\n<li><strong>Ctrl+F8，切换行断点</strong></li>\n<li><strong>Ctrl+F9，生成项目</strong></li>\n<li><strong>Alt+1，项目</strong></li>\n<li><strong>Alt+2，收藏</strong></li>\n<li><strong>Alt+6，TODO</strong></li>\n<li><strong>Alt+7，结构</strong></li>\n<li><strong>Ctrl+Shift+C，复制路径</strong></li>\n<li><strong>Ctrl+Alt+Shift+C，复制引用，必须选择类名</strong></li>\n<li><strong>Ctrl+Alt+Y，同步</strong></li>\n<li><strong>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</strong></li>\n<li><strong>Shift+F12，还原默认布局</strong></li>\n<li><strong>Ctrl+Shift+F12，隐藏/恢复所有窗口</strong></li>\n<li><strong>Ctrl+F4，关闭</strong></li>\n<li><strong>Ctrl+Shift+F4，关闭活动选项卡</strong></li>\n<li><strong>Ctrl+Tab，转到下一个拆分器</strong></li>\n<li><p><strong>Ctrl+Shift+Tab，转到上一个拆分器</strong></p>\n<div><strong>【重构】</strong></div>\n</li>\n<li><p><strong>Ctrl+Alt+Shift+T，弹出重构菜单</strong></p>\n</li>\n<li><strong>Shift+F6，重命名</strong></li>\n<li><strong>F6，移动</strong></li>\n<li><strong>F5，复制</strong></li>\n<li><strong>Alt+Delete，安全删除</strong></li>\n<li><p><strong>Ctrl+Alt+N，内联</strong></p>\n<div><strong>【查找】</strong></div>\n</li>\n<li><p><strong>Ctrl+F，查找</strong></p>\n</li>\n<li><strong>Ctrl+R，替换</strong></li>\n<li><strong>F3，查找下一个</strong></li>\n<li><strong>Shift+F3，查找上一个</strong></li>\n<li><strong>Ctrl+Shift+F，在路径中查找</strong></li>\n<li><strong>Ctrl+Shift+R，在路径中替换</strong></li>\n<li><strong>Ctrl+Shift+S，搜索结构</strong></li>\n<li><strong>Ctrl+Shift+M，替换结构</strong></li>\n<li><strong>Alt+F7，查找用法</strong></li>\n<li><strong>Ctrl+Alt+F7，显示用法</strong></li>\n<li><strong>Ctrl+F7，在文件中查找用法</strong></li>\n<li><p><strong>Ctrl+Shift+F7，在文件中高亮显示用法</strong></p>\n<div><strong>【VCS】</strong></div>\n</li>\n<li><p><strong>Alt+~，VCS 操作菜单</strong></p>\n</li>\n<li><strong>Ctrl+K，提交更改</strong></li>\n<li><strong>Ctrl+T，更新项目</strong></li>\n<li><strong>Ctrl+Alt+Shift+D，显示变化</strong></li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p><strong><span style=\"font-size: 14px;\">原文：<a href=\"http://www.cnblogs.com/tonycody/p/3257601.html\">http://www.cnblogs.com/tonycody/p/3257601.html</a> </span></strong></p>\n<hr>\n<div><strong>【常规】</strong></div>\n\n<ol>\n<li><strong>Ctrl+Shift + Enter，语句完成</strong></li>\n<li><strong>“！”，否定完成，输入表达式时按 “！”键</strong></li>\n<li><strong>Ctrl+E，最近的文件</strong></li>\n<li><strong>Ctrl+Shift+E，最近更改的文件</strong></li>\n<li><strong>Shift+Click，可以关闭文件</strong></li>\n<li><strong>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</strong></li>\n<li><strong>Ctrl+F12，可以显示当前文件的结构</strong></li>\n<li><strong>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</strong></li>\n<li><strong>Ctrl+N，可以快速打开类</strong></li>\n<li><strong>Ctrl+Shift+N，可以快速打开文件</strong></li>\n<li><strong>Alt+Q，可以看到当前方法的声明</strong></li>\n<li><strong>Ctrl+P，可以显示参数信息</strong></li>\n<li><strong>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</strong></li>\n<li><strong>Alt+Insert，可以生成构造器/Getter/Setter等</strong></li>\n<li><strong>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</strong></li>\n<li><strong>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</strong></li>\n<li><strong>Ctrl+Enter，导入包，自动修正</strong></li>\n<li><strong>Ctrl+Alt+L，格式化代码</strong></li>\n<li><strong>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</strong></li>\n<li><strong>Ctrl+Alt+O，优化导入的类和包</strong></li>\n<li><strong>Ctrl+R，替换文本</strong></li>\n<li><strong>Ctrl+F，查找文本</strong></li>\n<li><strong>Ctrl+Shift+Space，自动补全代码</strong></li>\n<li><strong>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</strong></li>\n<li><strong>Ctrl+Shift+Alt+N，查找类中的方法或变量</strong></li>\n<li><strong>Alt+Shift+C，最近的更改</strong></li>\n<li><strong>Alt+Shift+Up/Down，上/下移一行</strong></li>\n<li><strong>Shift+F6，重构 - 重命名</strong></li>\n<li><strong>Ctrl+X，删除行</strong></li>\n<li><strong>Ctrl+D，复制行</strong></li>\n<li><strong>Ctrl+/或Ctrl+Shift+/，注释（//或者/</strong>/）**</li>\n<li><strong>Ctrl+J，自动代码（例如：serr）</strong></li>\n<li><strong>Ctrl+Alt+J，用动态模板环绕</strong></li>\n<li><strong>Ctrl+H，显示类结构图（类的继承层次）</strong></li>\n<li><strong>Ctrl+Q，显示注释文档</strong></li>\n<li><strong>Alt+F1，查找代码所在位置</strong></li>\n<li><strong>Alt+1，快速打开或隐藏工程面板</strong></li>\n<li><strong>Ctrl+Alt+left/right，返回至上次浏览的位置</strong></li>\n<li><strong>Alt+left/right，切换代码视图</strong></li>\n<li><strong>Alt+Up/Down，在方法间快速移动定位</strong></li>\n<li><strong>Ctrl+Shift+Up/Down，向上/下移动语句</strong></li>\n<li><strong>F2 或 Shift+F2，高亮错误或警告快速定位</strong></li>\n<li><strong>Tab，代码标签输入完成后，按 Tab，生成代码</strong></li>\n<li><strong>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</strong></li>\n<li><strong>Alt+F3，逐个往下查找相同文本，并高亮显示</strong></li>\n<li><strong>Ctrl+Up/Down，光标中转到第一行或最后一行下</strong></li>\n<li><strong>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</strong></li>\n<li><strong>Ctrl+Alt+B，跳转到方法实现处</strong></li>\n<li><strong>Ctrl+Shift+Backspace，跳转到上次编辑的地方</strong></li>\n<li><strong>Ctrl+O，重写方法</strong></li>\n<li><strong>Ctrl+Alt+Space，类名自动完成</strong></li>\n<li><strong>Ctrl+Alt+Up/Down，快速跳转搜索结果</strong></li>\n<li><strong>Ctrl+Shift+J，整合两行</strong></li>\n<li><strong>Alt+F8，计算变量值</strong></li>\n<li><strong>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</strong></li>\n<li><strong>Ctrl+Alt+Shift+V，简单粘贴</strong></li>\n<li><strong>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</strong></li>\n<li><strong>F12，把焦点从编辑器移到最近使用的工具窗口</strong></li>\n<li><strong>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</strong></li>\n<li><strong>Ctrl+W，可以选择单词继而语句继而行继而函数</strong></li>\n<li><strong>Ctrl+Shift+W，取消选择光标所在词</strong></li>\n<li><strong>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</strong></li>\n<li><strong>Ctrl+I，实现方法</strong></li>\n<li><strong>Ctrl+Shift+U，大小写转化</strong></li>\n<li><strong>Ctrl+Y，删除当前行</strong></li>\n<li><strong>Shift+Enter，向下插入新行</strong></li>\n<li><strong>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</strong></li>\n<li><strong>Ctrl+Shift+F，全局查找</strong></li>\n<li><strong>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</strong></li>\n<li><strong>Ctrl+Shift+S，高级搜索</strong></li>\n<li><strong>Ctrl+U，转到父类</strong></li>\n<li><strong>Ctrl+Alt+S，打开设置对话框</strong></li>\n<li><strong>Alt+Shift+Inert，开启/关闭列选择模式</strong></li>\n<li><strong>Ctrl+Alt+Shift+S，打开当前项目/模块属性</strong></li>\n<li><strong>Ctrl+G，定位行</strong></li>\n<li><strong>Alt+Home，跳转到导航栏</strong></li>\n<li><strong>Ctrl+Enter，上插一行</strong></li>\n<li><strong>Ctrl+Backspace，按单词删除</strong></li>\n<li><strong>Ctrl+”+/-“，当前方法展开、折叠</strong></li>\n<li><p><strong>Ctrl+Shift+”+/-“，全部展开、折叠</strong></p>\n<div><strong>【调试部分、编译】</strong></div>\n</li>\n<li><p><strong>Ctrl+F2，停止</strong></p>\n</li>\n<li><strong>Alt+Shift+F9，选择 Debug</strong></li>\n<li><strong>Alt+Shift+F10，选择 Run</strong></li>\n<li><strong>Ctrl+Shift+F9，编译</strong></li>\n<li><strong>Ctrl+Shift+F10，运行</strong></li>\n<li><strong>Ctrl+Shift+F8，查看断点</strong></li>\n<li><strong>F8，步过</strong></li>\n<li><strong>F7，步入</strong></li>\n<li><strong>Shift+F7，智能步入</strong></li>\n<li><strong>Shift+F8，步出</strong></li>\n<li><strong>Alt+Shift+F8，强制步过</strong></li>\n<li><strong>Alt+Shift+F7，强制步入</strong></li>\n<li><strong>Alt+F9，运行至光标处</strong></li>\n<li><strong>Ctrl+Alt+F9，强制运行至光标处</strong></li>\n<li><strong>F9，恢复程序</strong></li>\n<li><strong>Alt+F10，定位到断点</strong></li>\n<li><strong>Ctrl+F8，切换行断点</strong></li>\n<li><strong>Ctrl+F9，生成项目</strong></li>\n<li><strong>Alt+1，项目</strong></li>\n<li><strong>Alt+2，收藏</strong></li>\n<li><strong>Alt+6，TODO</strong></li>\n<li><strong>Alt+7，结构</strong></li>\n<li><strong>Ctrl+Shift+C，复制路径</strong></li>\n<li><strong>Ctrl+Alt+Shift+C，复制引用，必须选择类名</strong></li>\n<li><strong>Ctrl+Alt+Y，同步</strong></li>\n<li><strong>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</strong></li>\n<li><strong>Shift+F12，还原默认布局</strong></li>\n<li><strong>Ctrl+Shift+F12，隐藏/恢复所有窗口</strong></li>\n<li><strong>Ctrl+F4，关闭</strong></li>\n<li><strong>Ctrl+Shift+F4，关闭活动选项卡</strong></li>\n<li><strong>Ctrl+Tab，转到下一个拆分器</strong></li>\n<li><p><strong>Ctrl+Shift+Tab，转到上一个拆分器</strong></p>\n<div><strong>【重构】</strong></div>\n</li>\n<li><p><strong>Ctrl+Alt+Shift+T，弹出重构菜单</strong></p>\n</li>\n<li><strong>Shift+F6，重命名</strong></li>\n<li><strong>F6，移动</strong></li>\n<li><strong>F5，复制</strong></li>\n<li><strong>Alt+Delete，安全删除</strong></li>\n<li><p><strong>Ctrl+Alt+N，内联</strong></p>\n<div><strong>【查找】</strong></div>\n</li>\n<li><p><strong>Ctrl+F，查找</strong></p>\n</li>\n<li><strong>Ctrl+R，替换</strong></li>\n<li><strong>F3，查找下一个</strong></li>\n<li><strong>Shift+F3，查找上一个</strong></li>\n<li><strong>Ctrl+Shift+F，在路径中查找</strong></li>\n<li><strong>Ctrl+Shift+R，在路径中替换</strong></li>\n<li><strong>Ctrl+Shift+S，搜索结构</strong></li>\n<li><strong>Ctrl+Shift+M，替换结构</strong></li>\n<li><strong>Alt+F7，查找用法</strong></li>\n<li><strong>Ctrl+Alt+F7，显示用法</strong></li>\n<li><strong>Ctrl+F7，在文件中查找用法</strong></li>\n<li><p><strong>Ctrl+Shift+F7，在文件中高亮显示用法</strong></p>\n<div><strong>【VCS】</strong></div>\n</li>\n<li><p><strong>Alt+~，VCS 操作菜单</strong></p>\n</li>\n<li><strong>Ctrl+K，提交更改</strong></li>\n<li><strong>Ctrl+T，更新项目</strong></li>\n<li><p><strong>Ctrl+Alt+Shift+D，显示变化【常规】</strong></p>\n<ol>\n<li><strong>Ctrl+Shift + Enter，语句完成</strong></li>\n<li><strong>“！”，否定完成，输入表达式时按 “！”键</strong></li>\n<li><strong>Ctrl+E，最近的文件</strong></li>\n<li><strong>Ctrl+Shift+E，最近更改的文件</strong></li>\n<li><strong>Shift+Click，可以关闭文件</strong></li>\n<li><strong>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</strong></li>\n<li><strong>Ctrl+F12，可以显示当前文件的结构</strong></li>\n<li><strong>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</strong></li>\n<li><strong>Ctrl+N，可以快速打开类</strong></li>\n<li><strong>Ctrl+Shift+N，可以快速打开文件</strong></li>\n<li><strong>Alt+Q，可以看到当前方法的声明</strong></li>\n<li><strong>Ctrl+P，可以显示参数信息</strong></li>\n<li><strong>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</strong></li>\n<li><strong>Alt+Insert，可以生成构造器/Getter/Setter等</strong></li>\n<li><strong>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</strong></li>\n<li><strong>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</strong></li>\n<li><strong>Ctrl+Enter，导入包，自动修正</strong></li>\n<li><strong>Ctrl+Alt+L，格式化代码</strong></li>\n<li><strong>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</strong></li>\n<li><strong>Ctrl+Alt+O，优化导入的类和包</strong></li>\n<li><strong>Ctrl+R，替换文本</strong></li>\n<li><strong>Ctrl+F，查找文本</strong></li>\n<li><strong>Ctrl+Shift+Space，自动补全代码</strong></li>\n<li><strong>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</strong></li>\n<li><strong>Ctrl+Shift+Alt+N，查找类中的方法或变量</strong></li>\n<li><strong>Alt+Shift+C，最近的更改</strong></li>\n<li><strong>Alt+Shift+Up/Down，上/下移一行</strong></li>\n<li><strong>Shift+F6，重构 - 重命名</strong></li>\n<li><strong>Ctrl+X，删除行</strong></li>\n<li><strong>Ctrl+D，复制行</strong></li>\n<li><strong>Ctrl+/或Ctrl+Shift+/，注释（//或者/</strong>/）**</li>\n<li><strong>Ctrl+J，自动代码（例如：serr）</strong></li>\n<li><strong>Ctrl+Alt+J，用动态模板环绕</strong></li>\n<li><strong>Ctrl+H，显示类结构图（类的继承层次）</strong></li>\n<li><strong>Ctrl+Q，显示注释文档</strong></li>\n<li><strong>Alt+F1，查找代码所在位置</strong></li>\n<li><strong>Alt+1，快速打开或隐藏工程面板</strong></li>\n<li><strong>Ctrl+Alt+left/right，返回至上次浏览的位置</strong></li>\n<li><strong>Alt+left/right，切换代码视图</strong></li>\n<li><strong>Alt+Up/Down，在方法间快速移动定位</strong></li>\n<li><strong>Ctrl+Shift+Up/Down，向上/下移动语句</strong></li>\n<li><strong>F2 或 Shift+F2，高亮错误或警告快速定位</strong></li>\n<li><strong>Tab，代码标签输入完成后，按 Tab，生成代码</strong></li>\n<li><strong>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</strong></li>\n<li><strong>Alt+F3，逐个往下查找相同文本，并高亮显示</strong></li>\n<li><strong>Ctrl+Up/Down，光标中转到第一行或最后一行下</strong></li>\n<li><strong>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</strong></li>\n<li><strong>Ctrl+Alt+B，跳转到方法实现处</strong></li>\n<li><strong>Ctrl+Shift+Backspace，跳转到上次编辑的地方</strong></li>\n<li><strong>Ctrl+O，重写方法</strong></li>\n<li><strong>Ctrl+Alt+Space，类名自动完成</strong></li>\n<li><strong>Ctrl+Alt+Up/Down，快速跳转搜索结果</strong></li>\n<li><strong>Ctrl+Shift+J，整合两行</strong></li>\n<li><strong>Alt+F8，计算变量值</strong></li>\n<li><strong>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</strong></li>\n<li><strong>Ctrl+Alt+Shift+V，简单粘贴</strong></li>\n<li><strong>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</strong></li>\n<li><strong>F12，把焦点从编辑器移到最近使用的工具窗口</strong></li>\n<li><strong>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</strong></li>\n<li><strong>Ctrl+W，可以选择单词继而语句继而行继而函数</strong></li>\n<li><strong>Ctrl+Shift+W，取消选择光标所在词</strong></li>\n<li><strong>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</strong></li>\n<li><strong>Ctrl+I，实现方法</strong></li>\n<li><strong>Ctrl+Shift+U，大小写转化</strong></li>\n<li><strong>Ctrl+Y，删除当前行</strong></li>\n<li><strong>Shift+Enter，向下插入新行</strong></li>\n<li><strong>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</strong></li>\n<li><strong>Ctrl+Shift+F，全局查找</strong></li>\n<li><strong>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</strong></li>\n<li><strong>Ctrl+Shift+S，高级搜索</strong></li>\n<li><strong>Ctrl+U，转到父类</strong></li>\n<li><strong>Ctrl+Alt+S，打开设置对话框</strong></li>\n<li><strong>Alt+Shift+Inert，开启/关闭列选择模式</strong></li>\n<li><strong>Ctrl+Alt+Shift+S，打开当前项目/模块属性</strong></li>\n<li><strong>Ctrl+G，定位行</strong></li>\n<li><strong>Alt+Home，跳转到导航栏</strong></li>\n<li><strong>Ctrl+Enter，上插一行</strong></li>\n<li><strong>Ctrl+Backspace，按单词删除</strong></li>\n<li><strong>Ctrl+”+/-“，当前方法展开、折叠</strong></li>\n<li><p><strong>Ctrl+Shift+”+/-“，全部展开、折叠</strong></p>\n<div><strong>【调试部分、编译】</strong></div>\n</li>\n<li><p><strong>Ctrl+F2，停止</strong></p>\n</li>\n<li><strong>Alt+Shift+F9，选择 Debug</strong></li>\n<li><strong>Alt+Shift+F10，选择 Run</strong></li>\n<li><strong>Ctrl+Shift+F9，编译</strong></li>\n<li><strong>Ctrl+Shift+F10，运行</strong></li>\n<li><strong>Ctrl+Shift+F8，查看断点</strong></li>\n<li><strong>F8，步过</strong></li>\n<li><strong>F7，步入</strong></li>\n<li><strong>Shift+F7，智能步入</strong></li>\n<li><strong>Shift+F8，步出</strong></li>\n<li><strong>Alt+Shift+F8，强制步过</strong></li>\n<li><strong>Alt+Shift+F7，强制步入</strong></li>\n<li><strong>Alt+F9，运行至光标处</strong></li>\n<li><strong>Ctrl+Alt+F9，强制运行至光标处</strong></li>\n<li><strong>F9，恢复程序</strong></li>\n<li><strong>Alt+F10，定位到断点</strong></li>\n<li><strong>Ctrl+F8，切换行断点</strong></li>\n<li><strong>Ctrl+F9，生成项目</strong></li>\n<li><strong>Alt+1，项目</strong></li>\n<li><strong>Alt+2，收藏</strong></li>\n<li><strong>Alt+6，TODO</strong></li>\n<li><strong>Alt+7，结构</strong></li>\n<li><strong>Ctrl+Shift+C，复制路径</strong></li>\n<li><strong>Ctrl+Alt+Shift+C，复制引用，必须选择类名</strong></li>\n<li><strong>Ctrl+Alt+Y，同步</strong></li>\n<li><strong>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</strong></li>\n<li><strong>Shift+F12，还原默认布局</strong></li>\n<li><strong>Ctrl+Shift+F12，隐藏/恢复所有窗口</strong></li>\n<li><strong>Ctrl+F4，关闭</strong></li>\n<li><strong>Ctrl+Shift+F4，关闭活动选项卡</strong></li>\n<li><strong>Ctrl+Tab，转到下一个拆分器</strong></li>\n<li><p><strong>Ctrl+Shift+Tab，转到上一个拆分器</strong></p>\n<div><strong>【重构】</strong></div>\n</li>\n<li><p><strong>Ctrl+Alt+Shift+T，弹出重构菜单</strong></p>\n</li>\n<li><strong>Shift+F6，重命名</strong></li>\n<li><strong>F6，移动</strong></li>\n<li><strong>F5，复制</strong></li>\n<li><strong>Alt+Delete，安全删除</strong></li>\n<li><p><strong>Ctrl+Alt+N，内联</strong></p>\n<div><strong>【查找】</strong></div>\n</li>\n<li><p><strong>Ctrl+F，查找</strong></p>\n</li>\n<li><strong>Ctrl+R，替换</strong></li>\n<li><strong>F3，查找下一个</strong></li>\n<li><strong>Shift+F3，查找上一个</strong></li>\n<li><strong>Ctrl+Shift+F，在路径中查找</strong></li>\n<li><strong>Ctrl+Shift+R，在路径中替换</strong></li>\n<li><strong>Ctrl+Shift+S，搜索结构</strong></li>\n<li><strong>Ctrl+Shift+M，替换结构</strong></li>\n<li><strong>Alt+F7，查找用法</strong></li>\n<li><strong>Ctrl+Alt+F7，显示用法</strong></li>\n<li><strong>Ctrl+F7，在文件中查找用法</strong></li>\n<li><p><strong>Ctrl+Shift+F7，在文件中高亮显示用法</strong></p>\n<div><strong>【VCS】</strong></div>\n</li>\n<li><p><strong>Alt+~，VCS 操作菜单</strong></p>\n</li>\n<li><strong>Ctrl+K，提交更改</strong></li>\n<li><strong>Ctrl+T，更新项目</strong></li>\n<li><strong>Ctrl+Alt+Shift+D，显示变化</strong></li>\n</ol>\n</li>\n</ol>\n"},{"title":"java复习(二) 闭包和类的加载与初始化","id":"76","date":"2015-05-30T23:23:32.000Z","_content":"\n<span style=\"font-size: 20px;\">参考链接:[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html) (闭包)</span>\n\n<span style=\"font-size: 20px;\">参考链接:[http://www.importnew.com/6579.html](http://www.importnew.com/6579.html)(类的加载和初始化)</span>\n\n<span style=\"font-size: 20px;\">一个类加载的时候只是会初始化它的static成员变量和static域(从上往下依次加载),而类的初始化则必须在加载的基础上依次初始化非static变量和非static域(从上往下依次加载),然后调用类的构造器,进行初始化.若一个类中包含父类,则必须先初始化父类(当一个类要加载时也是同样的),这样递归到没有父类的类,然后父类到子类依次执行初始化顺序,首先从父类到子类依次加载类,然后从父类到子类依次初始化静态域和静态常量,从父类到子类依次 初始化非静态域和非静态常量,和构造器(先初始非静态的变量,然后初始化构造器)</span>\n\n&nbsp;\n\n&nbsp;\n\n<span style=\"font-size: 20px;\">闭包的概念:链接中已经挺详细的,这也是内部类的一个用途</span>","source":"_posts/java-e5-a4-8d-e4-b9-a0-e4-ba-8c-e9-97-ad-e5-8c-85-e5-92-8c-e7-b1-bb-e7-9a-84-e5-8a-a0-e8-bd-bd-e4-b8-8e-e5-88-9d-e5-a7-8b-e5-8c-96.md","raw":"---\ntitle: java复习(二) 闭包和类的加载与初始化\nid: 76\ncategories:\n  - Java复习\ndate: 2015-05-31 07:23:32\ntags:\n    - Java\n    - 闭包\n    - 类的加载与初始化\n---\n\n<span style=\"font-size: 20px;\">参考链接:[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html) (闭包)</span>\n\n<span style=\"font-size: 20px;\">参考链接:[http://www.importnew.com/6579.html](http://www.importnew.com/6579.html)(类的加载和初始化)</span>\n\n<span style=\"font-size: 20px;\">一个类加载的时候只是会初始化它的static成员变量和static域(从上往下依次加载),而类的初始化则必须在加载的基础上依次初始化非static变量和非static域(从上往下依次加载),然后调用类的构造器,进行初始化.若一个类中包含父类,则必须先初始化父类(当一个类要加载时也是同样的),这样递归到没有父类的类,然后父类到子类依次执行初始化顺序,首先从父类到子类依次加载类,然后从父类到子类依次初始化静态域和静态常量,从父类到子类依次 初始化非静态域和非静态常量,和构造器(先初始非静态的变量,然后初始化构造器)</span>\n\n&nbsp;\n\n&nbsp;\n\n<span style=\"font-size: 20px;\">闭包的概念:链接中已经挺详细的,这也是内部类的一个用途</span>","slug":"java-e5-a4-8d-e4-b9-a0-e4-ba-8c-e9-97-ad-e5-8c-85-e5-92-8c-e7-b1-bb-e7-9a-84-e5-8a-a0-e8-bd-bd-e4-b8-8e-e5-88-9d-e5-a7-8b-e5-8c-96","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pq001j2smaym7e9enn","content":"<p><span style=\"font-size: 20px;\">参考链接:<a href=\"http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html</a> (闭包)</span></p>\n<p><span style=\"font-size: 20px;\">参考链接:<a href=\"http://www.importnew.com/6579.html\" target=\"_blank\" rel=\"external\">http://www.importnew.com/6579.html</a>(类的加载和初始化)</span></p>\n<p><span style=\"font-size: 20px;\">一个类加载的时候只是会初始化它的static成员变量和static域(从上往下依次加载),而类的初始化则必须在加载的基础上依次初始化非static变量和非static域(从上往下依次加载),然后调用类的构造器,进行初始化.若一个类中包含父类,则必须先初始化父类(当一个类要加载时也是同样的),这样递归到没有父类的类,然后父类到子类依次执行初始化顺序,首先从父类到子类依次加载类,然后从父类到子类依次初始化静态域和静态常量,从父类到子类依次 初始化非静态域和非静态常量,和构造器(先初始非静态的变量,然后初始化构造器)</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 20px;\">闭包的概念:链接中已经挺详细的,这也是内部类的一个用途</span></p>\n","excerpt":"","more":"<p><span style=\"font-size: 20px;\">参考链接:<a href=\"http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html\">http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html</a> (闭包)</span></p>\n<p><span style=\"font-size: 20px;\">参考链接:<a href=\"http://www.importnew.com/6579.html\">http://www.importnew.com/6579.html</a>(类的加载和初始化)</span></p>\n<p><span style=\"font-size: 20px;\">一个类加载的时候只是会初始化它的static成员变量和static域(从上往下依次加载),而类的初始化则必须在加载的基础上依次初始化非static变量和非static域(从上往下依次加载),然后调用类的构造器,进行初始化.若一个类中包含父类,则必须先初始化父类(当一个类要加载时也是同样的),这样递归到没有父类的类,然后父类到子类依次执行初始化顺序,首先从父类到子类依次加载类,然后从父类到子类依次初始化静态域和静态常量,从父类到子类依次 初始化非静态域和非静态常量,和构造器(先初始非静态的变量,然后初始化构造器)</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 20px;\">闭包的概念:链接中已经挺详细的,这也是内部类的一个用途</span></p>\n"},{"title":"Java日期类的总结","id":"249","date":"2016-05-19T07:42:27.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。\n\n&nbsp;&nbsp;&nbsp;&nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了\n\n&nbsp;&nbsp;&nbsp;&nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下:\n\n[java]Date date = new Date(126, 4, 20);[/java]\n\n&nbsp;&nbsp;&nbsp;&nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。\n\n&nbsp;&nbsp;&nbsp;&nbsp;初始化一个Calendar类的语句:\n\n&nbsp;&nbsp;&nbsp;&nbsp;[java]Calendar calendar = Calendar.getInstance();[/java]\n\n如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。\n\n其中key值包含Calendar.YEAR等枚举类型。\n\n要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日\n\n除了年月日的获取，对时间的操作也是类似的。\n\n说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat\n\n创建方式如下:\n\n[java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);[/java]\n\n对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。","source":"_posts/java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: Java日期类的总结\nid: 249\ncategories:\n  - Java date\n  - Java复习\ndate: 2016-05-19 15:42:27\ntags:\n    - Java\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。\n\n&nbsp;&nbsp;&nbsp;&nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了\n\n&nbsp;&nbsp;&nbsp;&nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下:\n\n[java]Date date = new Date(126, 4, 20);[/java]\n\n&nbsp;&nbsp;&nbsp;&nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。\n\n&nbsp;&nbsp;&nbsp;&nbsp;初始化一个Calendar类的语句:\n\n&nbsp;&nbsp;&nbsp;&nbsp;[java]Calendar calendar = Calendar.getInstance();[/java]\n\n如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。\n\n其中key值包含Calendar.YEAR等枚举类型。\n\n要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日\n\n除了年月日的获取，对时间的操作也是类似的。\n\n说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat\n\n创建方式如下:\n\n[java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);[/java]\n\n对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。","slug":"java-e6-97-a5-e6-9c-9f-e7-b1-bb-e7-9a-84-e6-80-bb-e7-bb-93","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29pt001m2sma365oz2gs","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下:</p>\n<p>[java]Date date = new Date(126, 4, 20);[/java]</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;初始化一个Calendar类的语句:</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;[java]Calendar calendar = Calendar.getInstance();[/java]</p>\n<p>如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。</p>\n<p>其中key值包含Calendar.YEAR等枚举类型。</p>\n<p>要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日</p>\n<p>除了年月日的获取，对时间的操作也是类似的。</p>\n<p>说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat</p>\n<p>创建方式如下:</p>\n<p>[java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);[/java]</p>\n<p>对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。</p>\n","excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;最近在做一个安卓的小玩意，因为用到了日期的一些操作，便写下一边博客，提醒大家如何少走坑路，正确使用正确的日期。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Java 8中已经增加了time包了，但是如果由于条件的限制不能使用Java8的time包的话，那就使用Calendar类和SimpleDateFormat类来进行时间的操作了</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;之前一直想用Date类，后来发现Date类好多方法都废弃了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;原因是Date中一些操作不方便，例如创建一个Date的时候，传入的year的值是要创建的年份-1990，而月份的值也是要减1的，这就不太符合人们的一些习惯。例如我们打算创建2016-05-20 我们的构造语句如下:</p>\n<p>[java]Date date = new Date(126, 4, 20);[/java]</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;于是找到一个更好用的类，Calendar类，这个类可以获取当前日期，也可以自定义日期。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;初始化一个Calendar类的语句:</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;[java]Calendar calendar = Calendar.getInstance();[/java]</p>\n<p>如果我们想要自定一个一个时间,初始化Calendar类之后，可以通过[java]calendar.set(int key, int value);[/java] 的方法来进行时期的设定。</p>\n<p>其中key值包含Calendar.YEAR等枚举类型。</p>\n<p>要获取一个日期的年月日也是相当的方便，通过[java]calendar.getXXX()[/java]方法可以获得年月日</p>\n<p>除了年月日的获取，对时间的操作也是类似的。</p>\n<p>说了时间的创建和获取以及修改，我们再来谈一谈如何对时间进行格式化，这里用到时间格式化的类，SimpleDateFormat</p>\n<p>创建方式如下:</p>\n<p>[java]SimpleDateFormate simpleDateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);[/java]</p>\n<p>对日期进行格式可以通过[java]simpleDateFormate.format()[/java]方法进行格式化，但是切忌不能把Calendar对象之间传入，可以通过calendar.getTime()获取当前的Date对象，从而实日期的格式化。</p>\n"},{"title":"Java nio 实现文件复制","id":"108","date":"2015-06-04T04:35:06.000Z","_content":"\n[code lang=\"java\"]\n/**\n * Created by lei on 15-6-4.\n */\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.channels.FileChannel;\n\npublic class MyCopy1 {\n    public static void main(String[] args) throws IOException {\n        File file1 = new File(args[0]);\n        File file2 = new File(args[1]);\n        FileOutputStream fileOutputStream = new FileOutputStream(file2);\n        FileInputStream fileInputStream = new FileInputStream(file1);\n        FileChannel fileChannel = fileInputStream.getChannel();\n        FileChannel fileChannel1 = fileOutputStream.getChannel();\n     //   fileChannel.transferTo( 0, fileChannel.size(),fileChannel1);\n        fileChannel1.transferFrom(fileChannel, 0, fileChannel.size());\n        fileChannel.close();\n        fileChannel1.close();\n\n    }\n}\n\n[/code]","source":"_posts/java-nio-e5-ae-9e-e7-8e-b0-e6-96-87-e4-bb-b6-e5-a4-8d-e5-88-b6.md","raw":"---\ntitle: Java nio 实现文件复制\nid: 108\ncategories:\n  - Java复习\ndate: 2015-06-04 12:35:06\ntags:\n    - Java nio\n    - Java\n---\n\n[code lang=\"java\"]\n/**\n * Created by lei on 15-6-4.\n */\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.channels.FileChannel;\n\npublic class MyCopy1 {\n    public static void main(String[] args) throws IOException {\n        File file1 = new File(args[0]);\n        File file2 = new File(args[1]);\n        FileOutputStream fileOutputStream = new FileOutputStream(file2);\n        FileInputStream fileInputStream = new FileInputStream(file1);\n        FileChannel fileChannel = fileInputStream.getChannel();\n        FileChannel fileChannel1 = fileOutputStream.getChannel();\n     //   fileChannel.transferTo( 0, fileChannel.size(),fileChannel1);\n        fileChannel1.transferFrom(fileChannel, 0, fileChannel.size());\n        fileChannel.close();\n        fileChannel1.close();\n\n    }\n}\n\n[/code]","slug":"java-nio-e5-ae-9e-e7-8e-b0-e6-96-87-e4-bb-b6-e5-a4-8d-e5-88-b6","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29px001q2smaxj0uld6i","content":"<p>[code lang=”java”]<br>/**</p>\n<ul>\n<li>Created by lei on 15-6-4.<br><em>/<br>import java.io.</em>;<br>import java.nio.*;<br>import java.nio.channels.FileChannel;</li>\n</ul>\n<p>public class MyCopy1 {<br>    public static void main(String[] args) throws IOException {<br>        File file1 = new File(args[0]);<br>        File file2 = new File(args[1]);<br>        FileOutputStream fileOutputStream = new FileOutputStream(file2);<br>        FileInputStream fileInputStream = new FileInputStream(file1);<br>        FileChannel fileChannel = fileInputStream.getChannel();<br>        FileChannel fileChannel1 = fileOutputStream.getChannel();<br>     //   fileChannel.transferTo( 0, fileChannel.size(),fileChannel1);<br>        fileChannel1.transferFrom(fileChannel, 0, fileChannel.size());<br>        fileChannel.close();<br>        fileChannel1.close();</p>\n<pre><code>}\n</code></pre><p>}</p>\n<p>[/code]</p>\n","excerpt":"","more":"<p>[code lang=”java”]<br>/**</p>\n<ul>\n<li>Created by lei on 15-6-4.<br><em>/<br>import java.io.</em>;<br>import java.nio.*;<br>import java.nio.channels.FileChannel;</li>\n</ul>\n<p>public class MyCopy1 {<br>    public static void main(String[] args) throws IOException {<br>        File file1 = new File(args[0]);<br>        File file2 = new File(args[1]);<br>        FileOutputStream fileOutputStream = new FileOutputStream(file2);<br>        FileInputStream fileInputStream = new FileInputStream(file1);<br>        FileChannel fileChannel = fileInputStream.getChannel();<br>        FileChannel fileChannel1 = fileOutputStream.getChannel();<br>     //   fileChannel.transferTo( 0, fileChannel.size(),fileChannel1);<br>        fileChannel1.transferFrom(fileChannel, 0, fileChannel.size());<br>        fileChannel.close();<br>        fileChannel1.close();</p>\n<pre><code>}\n</code></pre><p>}</p>\n<p>[/code]</p>\n"},{"title":"Java复习资料小整理","id":"114","date":"2015-06-05T06:10:13.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 今天下午去听了一位学长的Java Web后台开发的讲座,受益匪浅,不过也深受打击了,学长告诉我他一周学完了SSH框架的struts和Hibernate,然后用两周的时间学完了Spring,整个学习Java EE的过程只用了一个多月,听了学长的一席话,整个人都不好了,曾经认为自己的学习能力是可以的,没想到学长的学习能力是如此</span><span style=\"font-size:20px;\">的强大,看来还是要努力进取啊,不过比较高兴的一点是见到了一位好长时间都不见的好友,虽然不知道如何跟她说话,不过感觉还是可以的,好了,闲话不多说,现在开始步入正题.</span>\n\n\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size:20px;\">最近一周的时间一直在复习java SE,不妨趁着有时间,整理一下自己找到的一些学习资料</span>\n\n\t<span style=\"font-size:20px;\">首先是一些Java SE的基础资料,[http://www.cnblogs.com/dolphin0520/category/361055.html](http://www.cnblogs.com/dolphin0520/category/361055.html)(海子的博客,适合新手看)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/column/details/java-2014.html](http://blog.csdn.net/column/details/java-2014.html)(Thinking in Java的读书笔记,适合边读书边看)</span>\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1415453057980.html](http://www.open-open.com/lib/view/open1415453057980.html)(Java 数据类型的简介)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)(Java内部类介绍)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html)(Java闭包的介绍)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html](http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html)(正则表达式)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html](http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html)(正则表达式大全)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1421034895953.html](http://www.open-open.com/lib/view/open1421034895953.html)&nbsp;(Java正则基础)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1421034806796.html](http://www.open-open.com/lib/view/open1421034806796.html)&nbsp;(Java正则)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/column/details/concurrency.html](http://blog.csdn.net/column/details/concurrency.html)&nbsp; (Java 并发编程)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://zhangshixi.iteye.com/blog](http://zhangshixi.iteye.com/blog/679959)</span>http://blog.csdn.net/ns_code/article/category/1823903<span style=\"font-size:20px;\">[/679959](http://zhangshixi.iteye.com/blog/679959)&nbsp; (Java nio)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/ns_code/article/category/1823903](http://blog.csdn.net/ns_code/article/category/1823903)&nbsp;(深入理解Java虚拟机)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://zhangshixi.iteye.com/blog/674856](http://zhangshixi.iteye.com/blog/674856)&nbsp; (java一些集合类和其他类的源码解析)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">以上的链接差不多就是最近一周有在看的东西,希望自己能够向赵琛学长看齐,同时希望自己能过不浮躁,踏实一点,自己给自己鼓舞,加油!&nbsp;</span>\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;","source":"_posts/java-e5-a4-8d-e4-b9-a0-e8-b5-84-e6-96-99-e5-b0-8f-e6-95-b4-e7-90-86.md","raw":"---\ntitle: Java复习资料小整理\nid: 114\ncategories:\n  - Java复习\ndate: 2015-06-05 14:10:13\ntags:\n\t- 资料整理\n\t- Java\n---\n\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 今天下午去听了一位学长的Java Web后台开发的讲座,受益匪浅,不过也深受打击了,学长告诉我他一周学完了SSH框架的struts和Hibernate,然后用两周的时间学完了Spring,整个学习Java EE的过程只用了一个多月,听了学长的一席话,整个人都不好了,曾经认为自己的学习能力是可以的,没想到学长的学习能力是如此</span><span style=\"font-size:20px;\">的强大,看来还是要努力进取啊,不过比较高兴的一点是见到了一位好长时间都不见的好友,虽然不知道如何跟她说话,不过感觉还是可以的,好了,闲话不多说,现在开始步入正题.</span>\n\n\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size:20px;\">最近一周的时间一直在复习java SE,不妨趁着有时间,整理一下自己找到的一些学习资料</span>\n\n\t<span style=\"font-size:20px;\">首先是一些Java SE的基础资料,[http://www.cnblogs.com/dolphin0520/category/361055.html](http://www.cnblogs.com/dolphin0520/category/361055.html)(海子的博客,适合新手看)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/column/details/java-2014.html](http://blog.csdn.net/column/details/java-2014.html)(Thinking in Java的读书笔记,适合边读书边看)</span>\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1415453057980.html](http://www.open-open.com/lib/view/open1415453057980.html)(Java 数据类型的简介)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)(Java内部类介绍)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html)(Java闭包的介绍)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html](http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html)(正则表达式)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html](http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html)(正则表达式大全)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1421034895953.html](http://www.open-open.com/lib/view/open1421034895953.html)&nbsp;(Java正则基础)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://www.open-open.com/lib/view/open1421034806796.html](http://www.open-open.com/lib/view/open1421034806796.html)&nbsp;(Java正则)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/column/details/concurrency.html](http://blog.csdn.net/column/details/concurrency.html)&nbsp; (Java 并发编程)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://zhangshixi.iteye.com/blog](http://zhangshixi.iteye.com/blog/679959)</span>http://blog.csdn.net/ns_code/article/category/1823903<span style=\"font-size:20px;\">[/679959](http://zhangshixi.iteye.com/blog/679959)&nbsp; (Java nio)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://blog.csdn.net/ns_code/article/category/1823903](http://blog.csdn.net/ns_code/article/category/1823903)&nbsp;(深入理解Java虚拟机)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">[http://zhangshixi.iteye.com/blog/674856](http://zhangshixi.iteye.com/blog/674856)&nbsp; (java一些集合类和其他类的源码解析)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">以上的链接差不多就是最近一周有在看的东西,希望自己能够向赵琛学长看齐,同时希望自己能过不浮躁,踏实一点,自己给自己鼓舞,加油!&nbsp;</span>\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t&nbsp;","slug":"java-e5-a4-8d-e4-b9-a0-e8-b5-84-e6-96-99-e5-b0-8f-e6-95-b4-e7-90-86","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29py001t2smamw7tpe3d","content":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 今天下午去听了一位学长的Java Web后台开发的讲座,受益匪浅,不过也深受打击了,学长告诉我他一周学完了SSH框架的struts和Hibernate,然后用两周的时间学完了Spring,整个学习Java EE的过程只用了一个多月,听了学长的一席话,整个人都不好了,曾经认为自己的学习能力是可以的,没想到学长的学习能力是如此</span><span style=\"font-size:20px;\">的强大,看来还是要努力进取啊,不过比较高兴的一点是见到了一位好长时间都不见的好友,虽然不知道如何跟她说话,不过感觉还是可以的,好了,闲话不多说,现在开始步入正题.</span></p>\n<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;最近一周的时间一直在复习java SE,不妨趁着有时间,整理一下自己找到的一些学习资料&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;首先是一些Java SE的基础资料,[http://www.cnblogs.com/dolphin0520/category/361055.html](http://www.cnblogs.com/dolphin0520/category/361055.html)(海子的博客,适合新手看)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/java-2014.html](http://blog.csdn.net/column/details/java-2014.html)(Thinking in Java的读书笔记,适合边读书边看)&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1415453057980.html](http://www.open-open.com/lib/view/open1415453057980.html)(Java 数据类型的简介)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)(Java内部类介绍)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html)(Java闭包的介绍)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html](http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html)(正则表达式)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html](http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html)(正则表达式大全)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034895953.html](http://www.open-open.com/lib/view/open1421034895953.html)&amp;nbsp;(Java正则基础)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034806796.html](http://www.open-open.com/lib/view/open1421034806796.html)&amp;nbsp;(Java正则)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/concurrency.html](http://blog.csdn.net/column/details/concurrency.html)&amp;nbsp; (Java 并发编程)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog](http://zhangshixi.iteye.com/blog/679959)&lt;/span&gt;http://blog.csdn.net/ns_code/article/category/1823903&lt;span style=&quot;font-size:20px;&quot;&gt;[/679959](http://zhangshixi.iteye.com/blog/679959)&amp;nbsp; (Java nio)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/ns_code/article/category/1823903](http://blog.csdn.net/ns_code/article/category/1823903)&amp;nbsp;(深入理解Java虚拟机)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog/674856](http://zhangshixi.iteye.com/blog/674856)&amp;nbsp; (java一些集合类和其他类的源码解析)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;以上的链接差不多就是最近一周有在看的东西,希望自己能够向赵琛学长看齐,同时希望自己能过不浮躁,踏实一点,自己给自己鼓舞,加油!&amp;nbsp;&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 今天下午去听了一位学长的Java Web后台开发的讲座,受益匪浅,不过也深受打击了,学长告诉我他一周学完了SSH框架的struts和Hibernate,然后用两周的时间学完了Spring,整个学习Java EE的过程只用了一个多月,听了学长的一席话,整个人都不好了,曾经认为自己的学习能力是可以的,没想到学长的学习能力是如此</span><span style=\"font-size:20px;\">的强大,看来还是要努力进取啊,不过比较高兴的一点是见到了一位好长时间都不见的好友,虽然不知道如何跟她说话,不过感觉还是可以的,好了,闲话不多说,现在开始步入正题.</span></p>\n<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;最近一周的时间一直在复习java SE,不妨趁着有时间,整理一下自己找到的一些学习资料&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;首先是一些Java SE的基础资料,[http://www.cnblogs.com/dolphin0520/category/361055.html](http://www.cnblogs.com/dolphin0520/category/361055.html)(海子的博客,适合新手看)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/java-2014.html](http://blog.csdn.net/column/details/java-2014.html)(Thinking in Java的读书笔记,适合边读书边看)&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1415453057980.html](http://www.open-open.com/lib/view/open1415453057980.html)(Java 数据类型的简介)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1422791124330.html](http://www.open-open.com/lib/view/open1422791124330.html)(Java内部类介绍)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html](http://blog.sina.com.cn/s/blog_8d2da7430100xjk5.html)(Java闭包的介绍)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html](http://www.cnblogs.com/dragon/archive/2006/05/08/394078.html)(正则表达式)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html](http://www.cnblogs.com/elleniou/archive/2012/07/31/2617312.html)(正则表达式大全)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034895953.html](http://www.open-open.com/lib/view/open1421034895953.html)&amp;nbsp;(Java正则基础)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://www.open-open.com/lib/view/open1421034806796.html](http://www.open-open.com/lib/view/open1421034806796.html)&amp;nbsp;(Java正则)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/column/details/concurrency.html](http://blog.csdn.net/column/details/concurrency.html)&amp;nbsp; (Java 并发编程)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog](http://zhangshixi.iteye.com/blog/679959)&lt;/span&gt;http://blog.csdn.net/ns_code/article/category/1823903&lt;span style=&quot;font-size:20px;&quot;&gt;[/679959](http://zhangshixi.iteye.com/blog/679959)&amp;nbsp; (Java nio)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://blog.csdn.net/ns_code/article/category/1823903](http://blog.csdn.net/ns_code/article/category/1823903)&amp;nbsp;(深入理解Java虚拟机)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;[http://zhangshixi.iteye.com/blog/674856](http://zhangshixi.iteye.com/blog/674856)&amp;nbsp; (java一些集合类和其他类的源码解析)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;以上的链接差不多就是最近一周有在看的东西,希望自己能够向赵琛学长看齐,同时希望自己能过不浮躁,踏实一点,自己给自己鼓舞,加油!&amp;nbsp;&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>"},{"title":"java问题定位技术","date":"2016-08-01T13:11:06.000Z","_content":"\n## 简介\n\n  &nbsp;&nbsp;&nbsp;&nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西，\n   从而确定出问题所在和系统的瓶颈所在。\n\n### jps\n jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。\n 参数:\n >  -l 打印详细的类的信息，包括类的全称名。\n >  -m 打印出虚拟机的输入的参数,即args。\n >  -v 打印出虚拟机的具体参数。\n \n### jstack\n\n> 既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令\n> 生成的内存快照，可以分析Java进程的内存信息。\n\n> 快照中的一些信息会具体再写一篇博文进行叙述。\n\njstack <pid> 生成pid进程的java内存信息\n\n### jmap\n\njmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。\n\n> -heap <pid> 打印出内存堆的信息。\n> -histo <pid> 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。\n> -histo:live 先进行一次内存回收，然后再打印-histo的东西。\n> -dump:[live]format=b,file=<filename> 以proof二进制格式转储Java堆到指定filenanme\n文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。\n\n### jhat\n\njhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。\n\n### jinfo\n\njinfo 是查看某个Java进程的JVM的具体的参数的。\n\n\n### javap\n\njavap是生成java简单汇编代码的工具。\n\n\n\n","source":"_posts/java问题定位技术.md","raw":"---\ntitle: java问题定位技术\ndate: 2016-08-01 21:11:06\ntags:\n -Java\n -Java进阶\ncategories:\n -Java\n -Java进阶\n---\n\n## 简介\n\n  &nbsp;&nbsp;&nbsp;&nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西，\n   从而确定出问题所在和系统的瓶颈所在。\n\n### jps\n jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。\n 参数:\n >  -l 打印详细的类的信息，包括类的全称名。\n >  -m 打印出虚拟机的输入的参数,即args。\n >  -v 打印出虚拟机的具体参数。\n \n### jstack\n\n> 既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令\n> 生成的内存快照，可以分析Java进程的内存信息。\n\n> 快照中的一些信息会具体再写一篇博文进行叙述。\n\njstack <pid> 生成pid进程的java内存信息\n\n### jmap\n\njmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。\n\n> -heap <pid> 打印出内存堆的信息。\n> -histo <pid> 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。\n> -histo:live 先进行一次内存回收，然后再打印-histo的东西。\n> -dump:[live]format=b,file=<filename> 以proof二进制格式转储Java堆到指定filenanme\n文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。\n\n### jhat\n\njhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。\n\n### jinfo\n\njinfo 是查看某个Java进程的JVM的具体的参数的。\n\n\n### javap\n\njavap是生成java简单汇编代码的工具。\n\n\n\n","slug":"java问题定位技术","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29q2001x2smaytbpzeme","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  &nbsp;&nbsp;&nbsp;&nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西，<br>   从而确定出问题所在和系统的瓶颈所在。</p>\n<h3 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h3><p> jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。<br> 参数:</p>\n<blockquote>\n<p> -l 打印详细的类的信息，包括类的全称名。<br> -m 打印出虚拟机的输入的参数,即args。<br> -v 打印出虚拟机的具体参数。</p>\n</blockquote>\n<h3 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h3><blockquote>\n<p>既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令<br>生成的内存快照，可以分析Java进程的内存信息。</p>\n<p>快照中的一些信息会具体再写一篇博文进行叙述。</p>\n</blockquote>\n<p>jstack <pid> 生成pid进程的java内存信息</pid></p>\n<h3 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h3><p>jmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。</p>\n<blockquote>\n<p>-heap <pid> 打印出内存堆的信息。<br>-histo <pid> 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。<br>-histo:live 先进行一次内存回收，然后再打印-histo的东西。<br>-dump:[live]format=b,file=<filename> 以proof二进制格式转储Java堆到指定filenanme<br>文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。</filename></pid></pid></p>\n</blockquote>\n<h3 id=\"jhat\"><a href=\"#jhat\" class=\"headerlink\" title=\"jhat\"></a>jhat</h3><p>jhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。</p>\n<h3 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h3><p>jinfo 是查看某个Java进程的JVM的具体的参数的。</p>\n<h3 id=\"javap\"><a href=\"#javap\" class=\"headerlink\" title=\"javap\"></a>javap</h3><p>javap是生成java简单汇编代码的工具。</p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  &nbsp;&nbsp;&nbsp;&nbsp; Java 定位问题主要是解决Java程序的，可以通过一些命令查看一些Java内存的一些东西，<br>   从而确定出问题所在和系统的瓶颈所在。</p>\n<h3 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h3><p> jps 命令可以打印出所有的Java进程，类似于linux下ps命令打印出Java所有进程的信息。<br> 参数:</p>\n<blockquote>\n<p> -l 打印详细的类的信息，包括类的全称名。<br> -m 打印出虚拟机的输入的参数,即args。<br> -v 打印出虚拟机的具体参数。</p>\n</blockquote>\n<h3 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h3><blockquote>\n<p>既然jps能够具体的打印出Java进程的具体的pid，那么jstack就可以生成某一时刻的内存快照，通过jstack命令<br>生成的内存快照，可以分析Java进程的内存信息。</p>\n<p>快照中的一些信息会具体再写一篇博文进行叙述。</p>\n</blockquote>\n<p>jstack <pid> 生成pid进程的java内存信息</p>\n<h3 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h3><p>jmap命令可以通过可以对内存的一些信息进行映射或者堆的内存细节。</p>\n<blockquote>\n<p>-heap <pid> 打印出内存堆的信息。<br>-histo <pid> 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小、还有类的权限定名。<br>-histo:live 先进行一次内存回收，然后再打印-histo的东西。<br>-dump:[live]format=b,file=<filename> 以proof二进制格式转储Java堆到指定filenanme<br>文件中。live子选项是可选的。可以通过jhat工具来读取生成的文件。</p>\n</blockquote>\n<h3 id=\"jhat\"><a href=\"#jhat\" class=\"headerlink\" title=\"jhat\"></a>jhat</h3><p>jhat 是一个工具类，通过这个类可以查看dump文件。也可以通过浏览器来进行查看。</p>\n<h3 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h3><p>jinfo 是查看某个Java进程的JVM的具体的参数的。</p>\n<h3 id=\"javap\"><a href=\"#javap\" class=\"headerlink\" title=\"javap\"></a>javap</h3><p>javap是生成java简单汇编代码的工具。</p>\n"},{"title":"JSP复习","id":"195","date":"2015-07-24T08:14:22.000Z","_content":"\n# \n\t<span style=\"font-family:arial,helvetica,sans-serif;\">&nbsp;复习了JSP 的一些基础的东西,总结一下.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:20px;\">首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.</span></span>\n\n\t<span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:20px;\">jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.</span></span>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的四种基本语法:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp注释</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp表达式的输出</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp声明</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp脚本</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp注释:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">注释的格式&lt;%-- --%&gt; html的注释格式&lt;!-- --&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp表达式的输出</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;%=表达式%&gt;(注意后面没有分号);</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp声明</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;%!</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">%&gt;</span></font><font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&nbsp;在此声明,多次请求一个jsp只会初始化一次声明.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp脚本</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;% 脚本 %&gt;凡是在&lt;% %&gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的三个编译指令</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)page指令 &lt;%@ page .... %&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">这是对整个页面的一个描述后面可以加language=&quot;&quot; , charset=&quot;&quot;, contenttype=&quot;&quot;, import=&quot;&quot;, isErrorPage=&quot;&quot;, isElIgnored=&quot;&quot;, extends=&quot;&quot;.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)taglib指令&lt;%@ taglib uri=&quot;&quot; prefix=&quot;&quot;%&gt;(后面提到的两个属性都是必需的)</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)include指令&lt;%@ include file=&quot;&quot;(必需的,且只有一个) %&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">JSP的七个指令动作:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp:forward 转发</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&lt;jsp:param name=&quot;&quot; value=&quot;&quot; &gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp:include 用于动态引入一个JSP页面</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">也可以通过&lt;jsp:param&gt;设置参数</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;page=&quot;&quot;该属性是必需的&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;autoflash=&quot;&quot;&gt;设置是否自动刷新</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp:param 初始化参数</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">一般和jsp:forward和jsp:include混合使用</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp:plugin</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)jsp:useBean 引入JavaBean实例</span></font>\n\n\t<span style=\"font-size:20px;\">&lt;jsp:useBean id=&quot;&quot;(必需的)&nbsp;class=&quot;&#39; beanName=&quot;&quot; scope=&quot;&quot;(可选属性application,page,request,session)</span>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)jsp:setProperty 设置javaBean实例中的属性</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;jsp:setProerty property = &quot;&quot;(必需的) name=&quot;&quot;(必需的) &nbsp;value=&quot;&quot;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(7)jsp:getProperty 获取javaBean实例中的属性</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;jsp:getProperty property =&quot;&quot; name=&quot;&quot;&nbsp;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的9个内置对象.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)request</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于Servlet中HttpRequest对象,</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)response</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于Servlet中HttpResponse对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)session</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应与Servlet中HttpSession对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)page</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于pageContext实例.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)config</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于ServletConfig对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)application</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">ServletContext实例</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于整个web应用</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(7)out</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(8)exception</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(9)pageContext</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于ServletContext对象.</span></font>\n\n\t&nbsp;\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">JSP的生命周期:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)翻译阶段:将JSP代码翻译成Servlet代码</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)初始化阶段:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)运行阶段</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)销毁阶段</span></font>","source":"_posts/jsp-e5-a4-8d-e4-b9-a0.md","raw":"---\ntitle: JSP复习\nid: 195\ncategories:\n  - Java复习\ndate: 2015-07-24 16:14:22\ntags:\n\t- Java\n\t- JSP\n---\n\n# \n\t<span style=\"font-family:arial,helvetica,sans-serif;\">&nbsp;复习了JSP 的一些基础的东西,总结一下.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:20px;\">首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.</span></span>\n\n\t<span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:20px;\">jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.</span></span>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的四种基本语法:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp注释</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp表达式的输出</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp声明</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp脚本</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp注释:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">注释的格式&lt;%-- --%&gt; html的注释格式&lt;!-- --&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp表达式的输出</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;%=表达式%&gt;(注意后面没有分号);</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp声明</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;%!</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">%&gt;</span></font><font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&nbsp;在此声明,多次请求一个jsp只会初始化一次声明.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp脚本</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;% 脚本 %&gt;凡是在&lt;% %&gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的三个编译指令</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)page指令 &lt;%@ page .... %&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">这是对整个页面的一个描述后面可以加language=&quot;&quot; , charset=&quot;&quot;, contenttype=&quot;&quot;, import=&quot;&quot;, isErrorPage=&quot;&quot;, isElIgnored=&quot;&quot;, extends=&quot;&quot;.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)taglib指令&lt;%@ taglib uri=&quot;&quot; prefix=&quot;&quot;%&gt;(后面提到的两个属性都是必需的)</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)include指令&lt;%@ include file=&quot;&quot;(必需的,且只有一个) %&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">JSP的七个指令动作:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)jsp:forward 转发</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&lt;jsp:param name=&quot;&quot; value=&quot;&quot; &gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)jsp:include 用于动态引入一个JSP页面</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">也可以通过&lt;jsp:param&gt;设置参数</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;page=&quot;&quot;该属性是必需的&gt;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;autoflash=&quot;&quot;&gt;设置是否自动刷新</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)jsp:param 初始化参数</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">一般和jsp:forward和jsp:include混合使用</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)jsp:plugin</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)jsp:useBean 引入JavaBean实例</span></font>\n\n\t<span style=\"font-size:20px;\">&lt;jsp:useBean id=&quot;&quot;(必需的)&nbsp;class=&quot;&#39; beanName=&quot;&quot; scope=&quot;&quot;(可选属性application,page,request,session)</span>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)jsp:setProperty 设置javaBean实例中的属性</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;jsp:setProerty property = &quot;&quot;(必需的) name=&quot;&quot;(必需的) &nbsp;value=&quot;&quot;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(7)jsp:getProperty 获取javaBean实例中的属性</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">&lt;jsp:getProperty property =&quot;&quot; name=&quot;&quot;&nbsp;</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">jsp的9个内置对象.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)request</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于Servlet中HttpRequest对象,</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)response</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于Servlet中HttpResponse对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)session</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应与Servlet中HttpSession对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)page</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于pageContext实例.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)config</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于ServletConfig对象</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)application</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">ServletContext实例</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于整个web应用</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(7)out</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(8)exception</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(9)pageContext</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">对应于ServletContext对象.</span></font>\n\n\t&nbsp;\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">JSP的生命周期:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(2)翻译阶段:将JSP代码翻译成Servlet代码</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(4)初始化阶段:</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(5)运行阶段</span></font>\n\n\t<font face=\"arial, helvetica, sans-serif\"><span style=\"font-size: 20px; line-height: 32px;\">(6)销毁阶段</span></font>","slug":"jsp-e5-a4-8d-e4-b9-a0","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29q400202smano5bsgkq","content":"<p>#<br>    <span style=\"font-family:arial,helvetica,sans-serif;\">&nbsp;复习了JSP 的一些基础的东西,总结一下.</span></p>\n<pre><code>&amp;nbsp;\n\n&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.&lt;/span&gt;&lt;/span&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的四种基本语法:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;注释的格式&amp;lt;%-- --%&amp;gt; html的注释格式&amp;lt;!-- --&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%=表达式%&amp;gt;(注意后面没有分号);&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%!&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;在此声明,多次请求一个jsp只会初始化一次声明.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;% 脚本 %&amp;gt;凡是在&amp;lt;% %&amp;gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的三个编译指令&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)page指令 &amp;lt;%@ page .... %&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;这是对整个页面的一个描述后面可以加language=&amp;quot;&amp;quot; , charset=&amp;quot;&amp;quot;, contenttype=&amp;quot;&amp;quot;, import=&amp;quot;&amp;quot;, isErrorPage=&amp;quot;&amp;quot;, isElIgnored=&amp;quot;&amp;quot;, extends=&amp;quot;&amp;quot;.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)taglib指令&amp;lt;%@ taglib uri=&amp;quot;&amp;quot; prefix=&amp;quot;&amp;quot;%&amp;gt;(后面提到的两个属性都是必需的)&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)include指令&amp;lt;%@ include file=&amp;quot;&amp;quot;(必需的,且只有一个) %&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的七个指令动作:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp:forward 转发&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&amp;lt;jsp:param name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot; &amp;gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp:include 用于动态引入一个JSP页面&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;也可以通过&amp;lt;jsp:param&amp;gt;设置参数&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;page=&amp;quot;&amp;quot;该属性是必需的&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;autoflash=&amp;quot;&amp;quot;&amp;gt;设置是否自动刷新&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp:param 初始化参数&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;一般和jsp:forward和jsp:include混合使用&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp:plugin&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)jsp:useBean 引入JavaBean实例&lt;/span&gt;&lt;/font&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;jsp:useBean id=&amp;quot;&amp;quot;(必需的)&amp;nbsp;class=&amp;quot;&amp;#39; beanName=&amp;quot;&amp;quot; scope=&amp;quot;&amp;quot;(可选属性application,page,request,session)&lt;/span&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)jsp:setProperty 设置javaBean实例中的属性&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:setProerty property = &amp;quot;&amp;quot;(必需的) name=&amp;quot;&amp;quot;(必需的) &amp;nbsp;value=&amp;quot;&amp;quot;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)jsp:getProperty 获取javaBean实例中的属性&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:getProperty property =&amp;quot;&amp;quot; name=&amp;quot;&amp;quot;&amp;nbsp;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的9个内置对象.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)request&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpRequest对象,&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)response&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpResponse对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)session&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应与Servlet中HttpSession对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)page&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于pageContext实例.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)config&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletConfig对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)application&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;ServletContext实例&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于整个web应用&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)out&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(8)exception&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(9)pageContext&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletContext对象.&lt;/span&gt;&lt;/font&gt;\n\n&amp;nbsp;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的生命周期:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)翻译阶段:将JSP代码翻译成Servlet代码&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)初始化阶段:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)运行阶段&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)销毁阶段&lt;/span&gt;&lt;/font&gt;\n</code></pre>","excerpt":"","more":"<p>#<br>    <span style=\"font-family:arial,helvetica,sans-serif;\">&nbsp;复习了JSP 的一些基础的东西,总结一下.</span></p>\n<pre><code>&amp;nbsp;\n\n&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;首先jsp是一门后台语言,但是在web开发中,如果用jsp+servlet+javaBean开发的话,jsp作为mvc中的view层,主要用来表现的.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;jsp的工作原理,其实jsp的本质就是servlet,当用户第一次访问一个jsp页面的时候,web容器把jsp页面编译成相应的servlet进行响应.&lt;/span&gt;&lt;/span&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的四种基本语法:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp注释:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;注释的格式&amp;lt;%-- --%&amp;gt; html的注释格式&amp;lt;!-- --&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp表达式的输出&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%=表达式%&amp;gt;(注意后面没有分号);&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp声明&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;%!&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/font&gt;&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;在此声明,多次请求一个jsp只会初始化一次声明.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp脚本&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;% 脚本 %&amp;gt;凡是在&amp;lt;% %&amp;gt;中的内容都是jsp脚本的内容,可以在jsp脚本中插入html代码&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的三个编译指令&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)page指令 &amp;lt;%@ page .... %&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;这是对整个页面的一个描述后面可以加language=&amp;quot;&amp;quot; , charset=&amp;quot;&amp;quot;, contenttype=&amp;quot;&amp;quot;, import=&amp;quot;&amp;quot;, isErrorPage=&amp;quot;&amp;quot;, isElIgnored=&amp;quot;&amp;quot;, extends=&amp;quot;&amp;quot;.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)taglib指令&amp;lt;%@ taglib uri=&amp;quot;&amp;quot; prefix=&amp;quot;&amp;quot;%&amp;gt;(后面提到的两个属性都是必需的)&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)include指令&amp;lt;%@ include file=&amp;quot;&amp;quot;(必需的,且只有一个) %&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的七个指令动作:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)jsp:forward 转发&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;里面只有一个page属性且是必需的.转发的时候相应的url是不变的,可以通过&amp;lt;jsp:param name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot; &amp;gt;传入参数,且转发的时候之前的请求属性等等是不会丢失的.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)jsp:include 用于动态引入一个JSP页面&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;也可以通过&amp;lt;jsp:param&amp;gt;设置参数&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;page=&amp;quot;&amp;quot;该属性是必需的&amp;gt;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;autoflash=&amp;quot;&amp;quot;&amp;gt;设置是否自动刷新&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)jsp:param 初始化参数&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;一般和jsp:forward和jsp:include混合使用&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)jsp:plugin&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)jsp:useBean 引入JavaBean实例&lt;/span&gt;&lt;/font&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;jsp:useBean id=&amp;quot;&amp;quot;(必需的)&amp;nbsp;class=&amp;quot;&amp;#39; beanName=&amp;quot;&amp;quot; scope=&amp;quot;&amp;quot;(可选属性application,page,request,session)&lt;/span&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)jsp:setProperty 设置javaBean实例中的属性&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:setProerty property = &amp;quot;&amp;quot;(必需的) name=&amp;quot;&amp;quot;(必需的) &amp;nbsp;value=&amp;quot;&amp;quot;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)jsp:getProperty 获取javaBean实例中的属性&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;lt;jsp:getProperty property =&amp;quot;&amp;quot; name=&amp;quot;&amp;quot;&amp;nbsp;&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;jsp的9个内置对象.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)request&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpRequest对象,&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)response&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于Servlet中HttpResponse对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)session&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应与Servlet中HttpSession对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)page&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于pageContext实例.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)config&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletConfig对象&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)application&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;ServletContext实例&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于整个web应用&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(7)out&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(8)exception&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(9)pageContext&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;对应于ServletContext对象.&lt;/span&gt;&lt;/font&gt;\n\n&amp;nbsp;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;JSP的生命周期:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(1)解析阶段:Servlet容器解析jsp代码,如果有错误,就返回错误.&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(2)翻译阶段:将JSP代码翻译成Servlet代码&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(3)编译阶段:Servlet容器编译相应的Servlet源文件,生成Servlet类&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(4)初始化阶段:&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(5)运行阶段&lt;/span&gt;&lt;/font&gt;\n\n&lt;font face=&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;(6)销毁阶段&lt;/span&gt;&lt;/font&gt;\n</code></pre>"},{"title":"Linux下java的JNI技术(入门)","id":"159","date":"2015-07-15T03:00:36.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 今天下午,舍友都已经离校了,宿舍里只剩下了两个人,于是我想到了如果另一个舍友也离开之后我一个人,我的联通网怎么激活上网(我用的是Linux系统),于是我想起了之前我们学校贴吧曾经公开的激活工具的源码,核心代码是用C写的,于是我想可不可以自己写了Java程序,这样就可以跨平台激活了,然而要用C作为核心,于是我就想到了JNI技术.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;</span>&nbsp; &nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">好了,闲话不多说,开始进入我们的正题,JNI技术<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">是Java Native Interface的缩写，它提供了若干的</span>[API](http://baike.baidu.com/subview/16068/5889234.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">实现了Java和其他语言的通信（主要是</span>[C](http://baike.baidu.com/subview/10075/6770152.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">&amp;</span>[C++](http://baike.baidu.com/view/824.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">）,Object类中的clone方法就是native方法.</span></span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\"><span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">&nbsp;&nbsp;首先,创建一个Java文件,然后如果想要用到本地的方法,就是简单的声明方法,而不用实现,记得要加上native.</span></span>\n\n\t[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">例如,我写的这个sayHelloWorld方法就是一个本地的方法,完成之后,在命令行下调用javah命令. javah -jni TestJni (这里需要注意的是后面跟的参数是类名而不是文件名)</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后你会发现生成了一个和你的类名相同的.h文件,打开文件,格式如下:</span>\n\n\t[![2015-07-15 18:01:11 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏-300x159.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏.png)\n\n\t<span style=\"font-size:20px;\">请看第15和第16行,这就是你要写的函数的声明,刚才的命令已经把格式写好,你只需要创建相应的C文件或CPP文件即可(c文件和cpp文件命名无要求,但是必须包含之前生成的.h文件),我在这里创建的是sayHello.cpp</span>\n\n\t<span style=\"font-size:20px;\">内容如下:</span>\n\n\t[![2015-07-15 18:04:52 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏-300x102.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">你会发现该函数没有main函数,然后函数的返回值和参数以及函数名与之前生成的.h文件的是一样的,这个是必须的,然后里面写具体的实现就好.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 写完之后,需要编译生成动态链接库,(Linux下的动态链接库的格式为libXXXX.so),用gcc 命令 gcc -shared -fPIC -I /path&nbsp;-I /path/ -I /usr/include -I ./ xxx.c -o libxxx.so (其中path是路径,一般在jdk下的include 里面包含头文件jni.h 在该目录下 有一个linux子目录,里面有jni_md.h这两个文件是我们所需要的,/usr/include 是我们C和CPP文件中一些必要的头文件,然后./表示是当前路径下生成.h文件 -o 表示生成的动态链接库的名称, -fPIC&nbsp;<span style=\"color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;\">：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真 正代码段共享的目的.&nbsp;</span></span>\n\n\t<span style=\"font-size:20px;\"><span style=\"color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;\">&nbsp;&nbsp; &nbsp; 接下来只需要导入这个库即可,导入的时候用System.loadLibrary(&quot;库名&quot;) (比如你之前生成的库名叫做libxxx.so,这里库名要填xxx不要前面的lib和后面 的.so).</span></span>\n\n\t[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">最后java 类名,运行,可能报异常这个时候要用java -Djava.library.path=./ 类名或者把相应的动态链接库复制到相应的u路径下即可.</span>","source":"_posts/linux-e4-b8-8bjava-e7-9a-84jni-e6-8a-80-e6-9c-af-e5-85-a5-e9-97-a8.md","raw":"---\ntitle: Linux下java的JNI技术(入门)\nid: 159\ncategories:\n  - Java JNI入门\ndate: 2015-07-15 11:00:36\ntags:\n\t- Java\n\t- JNI\n---\n\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 今天下午,舍友都已经离校了,宿舍里只剩下了两个人,于是我想到了如果另一个舍友也离开之后我一个人,我的联通网怎么激活上网(我用的是Linux系统),于是我想起了之前我们学校贴吧曾经公开的激活工具的源码,核心代码是用C写的,于是我想可不可以自己写了Java程序,这样就可以跨平台激活了,然而要用C作为核心,于是我就想到了JNI技术.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;</span>&nbsp; &nbsp; &nbsp;&nbsp;<span style=\"font-size:20px;\">好了,闲话不多说,开始进入我们的正题,JNI技术<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">是Java Native Interface的缩写，它提供了若干的</span>[API](http://baike.baidu.com/subview/16068/5889234.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">实现了Java和其他语言的通信（主要是</span>[C](http://baike.baidu.com/subview/10075/6770152.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">&amp;</span>[C++](http://baike.baidu.com/view/824.htm)<span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">）,Object类中的clone方法就是native方法.</span></span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\"><span style=\"font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;\">&nbsp;&nbsp;首先,创建一个Java文件,然后如果想要用到本地的方法,就是简单的声明方法,而不用实现,记得要加上native.</span></span>\n\n\t[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">例如,我写的这个sayHelloWorld方法就是一个本地的方法,完成之后,在命令行下调用javah命令. javah -jni TestJni (这里需要注意的是后面跟的参数是类名而不是文件名)</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后你会发现生成了一个和你的类名相同的.h文件,打开文件,格式如下:</span>\n\n\t[![2015-07-15 18:01:11 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏-300x159.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏.png)\n\n\t<span style=\"font-size:20px;\">请看第15和第16行,这就是你要写的函数的声明,刚才的命令已经把格式写好,你只需要创建相应的C文件或CPP文件即可(c文件和cpp文件命名无要求,但是必须包含之前生成的.h文件),我在这里创建的是sayHello.cpp</span>\n\n\t<span style=\"font-size:20px;\">内容如下:</span>\n\n\t[![2015-07-15 18:04:52 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏-300x102.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">你会发现该函数没有main函数,然后函数的返回值和参数以及函数名与之前生成的.h文件的是一样的,这个是必须的,然后里面写具体的实现就好.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; 写完之后,需要编译生成动态链接库,(Linux下的动态链接库的格式为libXXXX.so),用gcc 命令 gcc -shared -fPIC -I /path&nbsp;-I /path/ -I /usr/include -I ./ xxx.c -o libxxx.so (其中path是路径,一般在jdk下的include 里面包含头文件jni.h 在该目录下 有一个linux子目录,里面有jni_md.h这两个文件是我们所需要的,/usr/include 是我们C和CPP文件中一些必要的头文件,然后./表示是当前路径下生成.h文件 -o 表示生成的动态链接库的名称, -fPIC&nbsp;<span style=\"color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;\">：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真 正代码段共享的目的.&nbsp;</span></span>\n\n\t<span style=\"font-size:20px;\"><span style=\"color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;\">&nbsp;&nbsp; &nbsp; 接下来只需要导入这个库即可,导入的时候用System.loadLibrary(&quot;库名&quot;) (比如你之前生成的库名叫做libxxx.so,这里库名要填xxx不要前面的lib和后面 的.so).</span></span>\n\n\t[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">最后java 类名,运行,可能报异常这个时候要用java -Djava.library.path=./ 类名或者把相应的动态链接库复制到相应的u路径下即可.</span>","slug":"linux-e4-b8-8bjava-e7-9a-84jni-e6-8a-80-e6-9c-af-e5-85-a5-e9-97-a8","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29q600222sma8cuyzx5m","content":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 今天下午,舍友都已经离校了,宿舍里只剩下了两个人,于是我想到了如果另一个舍友也离开之后我一个人,我的联通网怎么激活上网(我用的是Linux系统),于是我想起了之前我们学校贴吧曾经公开的激活工具的源码,核心代码是用C写的,于是我想可不可以自己写了Java程序,这样就可以跨平台激活了,然而要用C作为核心,于是我就想到了JNI技术.</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;好了,闲话不多说,开始进入我们的正题,JNI技术&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;是Java Native Interface的缩写，它提供了若干的&lt;/span&gt;[API](http://baike.baidu.com/subview/16068/5889234.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;实现了Java和其他语言的通信（主要是&lt;/span&gt;[C](http://baike.baidu.com/subview/10075/6770152.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;amp;&lt;/span&gt;[C++](http://baike.baidu.com/view/824.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;）,Object类中的clone方法就是native方法.&lt;/span&gt;&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先,创建一个Java文件,然后如果想要用到本地的方法,就是简单的声明方法,而不用实现,记得要加上native.&lt;/span&gt;&lt;/span&gt;\n\n[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;例如,我写的这个sayHelloWorld方法就是一个本地的方法,完成之后,在命令行下调用javah命令. javah -jni TestJni (这里需要注意的是后面跟的参数是类名而不是文件名)&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;然后你会发现生成了一个和你的类名相同的.h文件,打开文件,格式如下:&lt;/span&gt;\n\n[![2015-07-15 18:01:11 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏-300x159.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;请看第15和第16行,这就是你要写的函数的声明,刚才的命令已经把格式写好,你只需要创建相应的C文件或CPP文件即可(c文件和cpp文件命名无要求,但是必须包含之前生成的.h文件),我在这里创建的是sayHello.cpp&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;内容如下:&lt;/span&gt;\n\n[![2015-07-15 18:04:52 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏-300x102.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;你会发现该函数没有main函数,然后函数的返回值和参数以及函数名与之前生成的.h文件的是一样的,这个是必须的,然后里面写具体的实现就好.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 写完之后,需要编译生成动态链接库,(Linux下的动态链接库的格式为libXXXX.so),用gcc 命令 gcc -shared -fPIC -I /path&amp;nbsp;-I /path/ -I /usr/include -I ./ xxx.c -o libxxx.so (其中path是路径,一般在jdk下的include 里面包含头文件jni.h 在该目录下 有一个linux子目录,里面有jni_md.h这两个文件是我们所需要的,/usr/include 是我们C和CPP文件中一些必要的头文件,然后./表示是当前路径下生成.h文件 -o 表示生成的动态链接库的名称, -fPIC&amp;nbsp;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真 正代码段共享的目的.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 接下来只需要导入这个库即可,导入的时候用System.loadLibrary(&amp;quot;库名&amp;quot;) (比如你之前生成的库名叫做libxxx.so,这里库名要填xxx不要前面的lib和后面 的.so).&lt;/span&gt;&lt;/span&gt;\n\n[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;最后java 类名,运行,可能报异常这个时候要用java -Djava.library.path=./ 类名或者把相应的动态链接库复制到相应的u路径下即可.&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; 今天下午,舍友都已经离校了,宿舍里只剩下了两个人,于是我想到了如果另一个舍友也离开之后我一个人,我的联通网怎么激活上网(我用的是Linux系统),于是我想起了之前我们学校贴吧曾经公开的激活工具的源码,核心代码是用C写的,于是我想可不可以自己写了Java程序,这样就可以跨平台激活了,然而要用C作为核心,于是我就想到了JNI技术.</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;好了,闲话不多说,开始进入我们的正题,JNI技术&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;是Java Native Interface的缩写，它提供了若干的&lt;/span&gt;[API](http://baike.baidu.com/subview/16068/5889234.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;实现了Java和其他语言的通信（主要是&lt;/span&gt;[C](http://baike.baidu.com/subview/10075/6770152.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;amp;&lt;/span&gt;[C++](http://baike.baidu.com/view/824.htm)&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;）,Object类中的clone方法就是native方法.&lt;/span&gt;&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif; line-height: 24px; text-indent: 28px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先,创建一个Java文件,然后如果想要用到本地的方法,就是简单的声明方法,而不用实现,记得要加上native.&lt;/span&gt;&lt;/span&gt;\n\n[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;例如,我写的这个sayHelloWorld方法就是一个本地的方法,完成之后,在命令行下调用javah命令. javah -jni TestJni (这里需要注意的是后面跟的参数是类名而不是文件名)&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;然后你会发现生成了一个和你的类名相同的.h文件,打开文件,格式如下:&lt;/span&gt;\n\n[![2015-07-15 18:01:11 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏-300x159.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180111-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;请看第15和第16行,这就是你要写的函数的声明,刚才的命令已经把格式写好,你只需要创建相应的C文件或CPP文件即可(c文件和cpp文件命名无要求,但是必须包含之前生成的.h文件),我在这里创建的是sayHello.cpp&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;内容如下:&lt;/span&gt;\n\n[![2015-07-15 18:04:52 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏-300x102.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-180452-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;你会发现该函数没有main函数,然后函数的返回值和参数以及函数名与之前生成的.h文件的是一样的,这个是必须的,然后里面写具体的实现就好.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 写完之后,需要编译生成动态链接库,(Linux下的动态链接库的格式为libXXXX.so),用gcc 命令 gcc -shared -fPIC -I /path&amp;nbsp;-I /path/ -I /usr/include -I ./ xxx.c -o libxxx.so (其中path是路径,一般在jdk下的include 里面包含头文件jni.h 在该目录下 有一个linux子目录,里面有jni_md.h这两个文件是我们所需要的,/usr/include 是我们C和CPP文件中一些必要的头文件,然后./表示是当前路径下生成.h文件 -o 表示生成的动态链接库的名称, -fPIC&amp;nbsp;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真 正代码段共享的目的.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica, Tahoma, Arial, sans-serif; line-height: 25.2000007629395px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; 接下来只需要导入这个库即可,导入的时候用System.loadLibrary(&amp;quot;库名&amp;quot;) (比如你之前生成的库名叫做libxxx.so,这里库名要填xxx不要前面的lib和后面 的.so).&lt;/span&gt;&lt;/span&gt;\n\n[![2015-07-15 17:58:04 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏-300x135.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-15-175804-的截屏.png)\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;最后java 类名,运行,可能报异常这个时候要用java -Djava.library.path=./ 类名或者把相应的动态链接库复制到相应的u路径下即可.&lt;/span&gt;\n</code></pre>"},{"title":"Java nio","id":"112","date":"2015-06-04T05:18:26.000Z","_content":"\n## \n\t<span style=\"font-size:20px;\">最近再看I/O的一些东西,写出来,感觉有点水,仅供自己复习的时候看</span>\n\n\t<span style=\"font-size:20px;\">前面基本的I/O流都差不多有看过,根据字节流和字符流也是比较容易区分的,但是有时候需要写入固定格式的数据,这时候就有点头疼,比如说我要写书10条double类型的数据和10条int类型的数据到文件中,用基本的输入输出流有点麻烦,必须把double和int类型转换成String才能写入,这个时候就可以用到DataInputStream 和 OutputStream的字节流来写入,如果想要用字符流写入Int和double类型,用PrintWriter可以方便的写入,不过读出的时候却比较麻烦.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">还有之前遗忘的一点就是Sytstem.setIn(InputStream) System.setOut(InputStream) System.setErr(inputStream)这三个是系统的输入输出流重定向用的.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">字节流和字符流的区别除了基本单位不同外,我还学到了一点就是字符流是通过系统的缓冲区为中介的,如果你用字符流向文件写入的时候忘记了close(),你会那发现文件中并没有写入数据,这是因为字符流中读入的数据仍然存在系统的缓冲区中,这是你需要flush或者close掉字符流,你就会发现已经存在里面了.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">对象的序列化也是I/O的比较重要的一个部分,不过没有仔细的研究过.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">字节流转换为字符流的InputStreamReader 和OutputStreamWriter可以很好的帮助我们从键盘中输入汉字,然后以字符的形式写入到另一个流中(比如说写入到文本中,此时不会出现乱码)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">最近还有在看一些NIO的东西</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">nio中的BtyeBuffer可以人为的去创建一段缓冲区,通过调用ByteBuffer.allocate(size)来创建,除了ByteBuffer外,其他类型的Buffer也都有,不过ByteBuffer比较常见.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">nio中多了的东西叫做Channel的,FileInputStream, FileOutputStream和RandomAcessFile,都可以调用getChannel()方法,产生一个通道,利用这个特性可以提高IO读写的速度</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">read() 和write()方法中可以直接以自己定义的缓冲区作为目标,当缓冲区从读状态变成写入的时候,一定要先调用flip()这个方法把limit设置为position,然后把position设置为0,然后写入的时候刚好把要写入的内容写入,然后调用clear方法,这是把position设置为0,limit设置为capcity,又实现了从0开始读数据.</span>\n","source":"_posts/java-nio.md","raw":"---\ntitle: Java nio\nid: 112\ncategories:\n  - Java复习\ndate: 2015-06-04 13:18:26\ntags:\n    - Java\n    - nio\n---\n\n## \n\t<span style=\"font-size:20px;\">最近再看I/O的一些东西,写出来,感觉有点水,仅供自己复习的时候看</span>\n\n\t<span style=\"font-size:20px;\">前面基本的I/O流都差不多有看过,根据字节流和字符流也是比较容易区分的,但是有时候需要写入固定格式的数据,这时候就有点头疼,比如说我要写书10条double类型的数据和10条int类型的数据到文件中,用基本的输入输出流有点麻烦,必须把double和int类型转换成String才能写入,这个时候就可以用到DataInputStream 和 OutputStream的字节流来写入,如果想要用字符流写入Int和double类型,用PrintWriter可以方便的写入,不过读出的时候却比较麻烦.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">还有之前遗忘的一点就是Sytstem.setIn(InputStream) System.setOut(InputStream) System.setErr(inputStream)这三个是系统的输入输出流重定向用的.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">字节流和字符流的区别除了基本单位不同外,我还学到了一点就是字符流是通过系统的缓冲区为中介的,如果你用字符流向文件写入的时候忘记了close(),你会那发现文件中并没有写入数据,这是因为字符流中读入的数据仍然存在系统的缓冲区中,这是你需要flush或者close掉字符流,你就会发现已经存在里面了.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">对象的序列化也是I/O的比较重要的一个部分,不过没有仔细的研究过.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">字节流转换为字符流的InputStreamReader 和OutputStreamWriter可以很好的帮助我们从键盘中输入汉字,然后以字符的形式写入到另一个流中(比如说写入到文本中,此时不会出现乱码)</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">最近还有在看一些NIO的东西</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">nio中的BtyeBuffer可以人为的去创建一段缓冲区,通过调用ByteBuffer.allocate(size)来创建,除了ByteBuffer外,其他类型的Buffer也都有,不过ByteBuffer比较常见.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">nio中多了的东西叫做Channel的,FileInputStream, FileOutputStream和RandomAcessFile,都可以调用getChannel()方法,产生一个通道,利用这个特性可以提高IO读写的速度</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">read() 和write()方法中可以直接以自己定义的缓冲区作为目标,当缓冲区从读状态变成写入的时候,一定要先调用flip()这个方法把limit设置为position,然后把position设置为0,然后写入的时候刚好把要写入的内容写入,然后调用clear方法,这是把position设置为0,limit设置为capcity,又实现了从0开始读数据.</span>\n","slug":"java-nio","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qa00272sma3w53gt7s","content":"<p>##<br>    <span style=\"font-size:20px;\">最近再看I/O的一些东西,写出来,感觉有点水,仅供自己复习的时候看</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;前面基本的I/O流都差不多有看过,根据字节流和字符流也是比较容易区分的,但是有时候需要写入固定格式的数据,这时候就有点头疼,比如说我要写书10条double类型的数据和10条int类型的数据到文件中,用基本的输入输出流有点麻烦,必须把double和int类型转换成String才能写入,这个时候就可以用到DataInputStream 和 OutputStream的字节流来写入,如果想要用字符流写入Int和double类型,用PrintWriter可以方便的写入,不过读出的时候却比较麻烦.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;还有之前遗忘的一点就是Sytstem.setIn(InputStream) System.setOut(InputStream) System.setErr(inputStream)这三个是系统的输入输出流重定向用的.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;字节流和字符流的区别除了基本单位不同外,我还学到了一点就是字符流是通过系统的缓冲区为中介的,如果你用字符流向文件写入的时候忘记了close(),你会那发现文件中并没有写入数据,这是因为字符流中读入的数据仍然存在系统的缓冲区中,这是你需要flush或者close掉字符流,你就会发现已经存在里面了.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;对象的序列化也是I/O的比较重要的一个部分,不过没有仔细的研究过.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;字节流转换为字符流的InputStreamReader 和OutputStreamWriter可以很好的帮助我们从键盘中输入汉字,然后以字符的形式写入到另一个流中(比如说写入到文本中,此时不会出现乱码)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;最近还有在看一些NIO的东西&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中的BtyeBuffer可以人为的去创建一段缓冲区,通过调用ByteBuffer.allocate(size)来创建,除了ByteBuffer外,其他类型的Buffer也都有,不过ByteBuffer比较常见.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中多了的东西叫做Channel的,FileInputStream, FileOutputStream和RandomAcessFile,都可以调用getChannel()方法,产生一个通道,利用这个特性可以提高IO读写的速度&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;read() 和write()方法中可以直接以自己定义的缓冲区作为目标,当缓冲区从读状态变成写入的时候,一定要先调用flip()这个方法把limit设置为position,然后把position设置为0,然后写入的时候刚好把要写入的内容写入,然后调用clear方法,这是把position设置为0,limit设置为capcity,又实现了从0开始读数据.&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p>##<br>    <span style=\"font-size:20px;\">最近再看I/O的一些东西,写出来,感觉有点水,仅供自己复习的时候看</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;前面基本的I/O流都差不多有看过,根据字节流和字符流也是比较容易区分的,但是有时候需要写入固定格式的数据,这时候就有点头疼,比如说我要写书10条double类型的数据和10条int类型的数据到文件中,用基本的输入输出流有点麻烦,必须把double和int类型转换成String才能写入,这个时候就可以用到DataInputStream 和 OutputStream的字节流来写入,如果想要用字符流写入Int和double类型,用PrintWriter可以方便的写入,不过读出的时候却比较麻烦.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;还有之前遗忘的一点就是Sytstem.setIn(InputStream) System.setOut(InputStream) System.setErr(inputStream)这三个是系统的输入输出流重定向用的.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;字节流和字符流的区别除了基本单位不同外,我还学到了一点就是字符流是通过系统的缓冲区为中介的,如果你用字符流向文件写入的时候忘记了close(),你会那发现文件中并没有写入数据,这是因为字符流中读入的数据仍然存在系统的缓冲区中,这是你需要flush或者close掉字符流,你就会发现已经存在里面了.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;对象的序列化也是I/O的比较重要的一个部分,不过没有仔细的研究过.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;字节流转换为字符流的InputStreamReader 和OutputStreamWriter可以很好的帮助我们从键盘中输入汉字,然后以字符的形式写入到另一个流中(比如说写入到文本中,此时不会出现乱码)&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;最近还有在看一些NIO的东西&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中的BtyeBuffer可以人为的去创建一段缓冲区,通过调用ByteBuffer.allocate(size)来创建,除了ByteBuffer外,其他类型的Buffer也都有,不过ByteBuffer比较常见.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;nio中多了的东西叫做Channel的,FileInputStream, FileOutputStream和RandomAcessFile,都可以调用getChannel()方法,产生一个通道,利用这个特性可以提高IO读写的速度&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;read() 和write()方法中可以直接以自己定义的缓冲区作为目标,当缓冲区从读状态变成写入的时候,一定要先调用flip()这个方法把limit设置为position,然后把position设置为0,然后写入的时候刚好把要写入的内容写入,然后调用clear方法,这是把position设置为0,limit设置为capcity,又实现了从0开始读数据.&lt;/span&gt;\n</code></pre>"},{"title":"js中正则匹配","id":"61","date":"2015-05-21T04:55:46.000Z","_content":"\n\\\\表示转义.\\\\w表示匹配所有的字符或者数字\n\n\t\\\\.表示匹配小数点\n","source":"_posts/js-e4-b8-ad-e6-ad-a3-e5-88-99-e5-8c-b9-e9-85-8d.md","raw":"---\ntitle: js中正则匹配\ntags:\n  - js\n  - 正则\nid: 61\ncategories:\n  - 未分类\ndate: 2015-05-21 12:55:46\n---\n\n\\\\表示转义.\\\\w表示匹配所有的字符或者数字\n\n\t\\\\.表示匹配小数点\n","slug":"js-e4-b8-ad-e6-ad-a3-e5-88-99-e5-8c-b9-e9-85-8d","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qf00292sma5ezhqfa7","content":"<p>\\表示转义.\\w表示匹配所有的字符或者数字</p>\n<pre><code>\\\\.表示匹配小数点\n</code></pre>","excerpt":"","more":"<p>\\表示转义.\\w表示匹配所有的字符或者数字</p>\n<pre><code>\\\\.表示匹配小数点\n</code></pre>"},{"title":"Linux下 Intellij idea + github","id":"29","date":"2015-04-17T05:27:24.000Z","_content":"\n## \n\t刚在Intellij上实现了github的同步,分享一下\n\n\t首先,打开一个工程,或者新建一个工程,然后在工具栏中单击VCS, 然后选中import into version control ,然后选中share project on github,\n\n\t(中间输入密码的环节省略),然后会弹出窗口:[![2015-04-17 21:19:36 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏-300x156.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏.png)\n\n\tNew repository 就是你的仓库名,然后下面填描述,然后点集Share,完成本地代码,上传到Github中\n\n\t&nbsp;\n\n## \n\t远程代码克隆到本地\n\n\t点击VCS,然后选中checkout from control version,然后选中github,[![2015-04-17 21:24:10 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏-300x119.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏.png)\n\n\tGit Repository URL就是你想要拉倒本地的远程仓库的url, Parent Director就是本地目录,然后点击Clone,就可以实现将远程代码克隆到本地.\n\n\t&nbsp;\n\n\t代码修改.\n\n\tgit commit( CTRL + K)\n\n\tgit push ( CTRL + Shift + K )\n\n\t也可以点击VCS,然后选中commit 或者push进行git的commit和push命令.","source":"_posts/linux-e4-b8-8b-intellij-idea-github.md","raw":"---\ntitle: Linux下 Intellij idea + github\nid: 29\ncategories:\n  - IDE 使用\ndate: 2015-04-17 13:27:24\ntags:\n\t- Intellij IDEA\n\t- github\n---\n\n## \n\t刚在Intellij上实现了github的同步,分享一下\n\n\t首先,打开一个工程,或者新建一个工程,然后在工具栏中单击VCS, 然后选中import into version control ,然后选中share project on github,\n\n\t(中间输入密码的环节省略),然后会弹出窗口:[![2015-04-17 21:19:36 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏-300x156.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏.png)\n\n\tNew repository 就是你的仓库名,然后下面填描述,然后点集Share,完成本地代码,上传到Github中\n\n\t&nbsp;\n\n## \n\t远程代码克隆到本地\n\n\t点击VCS,然后选中checkout from control version,然后选中github,[![2015-04-17 21:24:10 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏-300x119.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏.png)\n\n\tGit Repository URL就是你想要拉倒本地的远程仓库的url, Parent Director就是本地目录,然后点击Clone,就可以实现将远程代码克隆到本地.\n\n\t&nbsp;\n\n\t代码修改.\n\n\tgit commit( CTRL + K)\n\n\tgit push ( CTRL + Shift + K )\n\n\t也可以点击VCS,然后选中commit 或者push进行git的commit和push命令.","slug":"linux-e4-b8-8b-intellij-idea-github","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qk002d2sma68puevyy","content":"<p>##<br>    刚在Intellij上实现了github的同步,分享一下</p>\n<pre><code>首先,打开一个工程,或者新建一个工程,然后在工具栏中单击VCS, 然后选中import into version control ,然后选中share project on github,\n\n(中间输入密码的环节省略),然后会弹出窗口:[![2015-04-17 21:19:36 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏-300x156.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏.png)\n\nNew repository 就是你的仓库名,然后下面填描述,然后点集Share,完成本地代码,上传到Github中\n\n&amp;nbsp;\n</code></pre><p>##<br>    远程代码克隆到本地</p>\n<pre><code>点击VCS,然后选中checkout from control version,然后选中github,[![2015-04-17 21:24:10 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏-300x119.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏.png)\n\nGit Repository URL就是你想要拉倒本地的远程仓库的url, Parent Director就是本地目录,然后点击Clone,就可以实现将远程代码克隆到本地.\n\n&amp;nbsp;\n\n代码修改.\n\ngit commit( CTRL + K)\n\ngit push ( CTRL + Shift + K )\n\n也可以点击VCS,然后选中commit 或者push进行git的commit和push命令.\n</code></pre>","excerpt":"","more":"<p>##<br>    刚在Intellij上实现了github的同步,分享一下</p>\n<pre><code>首先,打开一个工程,或者新建一个工程,然后在工具栏中单击VCS, 然后选中import into version control ,然后选中share project on github,\n\n(中间输入密码的环节省略),然后会弹出窗口:[![2015-04-17 21:19:36 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏-300x156.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-211936-的截屏.png)\n\nNew repository 就是你的仓库名,然后下面填描述,然后点集Share,完成本地代码,上传到Github中\n\n&amp;nbsp;\n</code></pre><p>##<br>    远程代码克隆到本地</p>\n<pre><code>点击VCS,然后选中checkout from control version,然后选中github,[![2015-04-17 21:24:10 的截屏](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏-300x119.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/2015-04-17-212410-的截屏.png)\n\nGit Repository URL就是你想要拉倒本地的远程仓库的url, Parent Director就是本地目录,然后点击Clone,就可以实现将远程代码克隆到本地.\n\n&amp;nbsp;\n\n代码修改.\n\ngit commit( CTRL + K)\n\ngit push ( CTRL + Shift + K )\n\n也可以点击VCS,然后选中commit 或者push进行git的commit和push命令.\n</code></pre>"},{"title":"Mariadb 修改字符编码","id":"122","date":"2015-06-15T04:28:34.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp; &nbsp;最近在数据库的时候遇到了字符编码的问题,用了一点时间终于解决了这个问题,现在来分享一下解决的方法.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp; 首先,在mariadb中输入 show variables like &#39;character%&#39;,然后就会看到你的字符编码,结果如图:</span>[![2015-06-15 20:12:09 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏-300x154.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏.png)\n\n\t<span style=\"font-size:20px;\">从图片中可以看到你的server字符编码是latinl的,而client的字符编码是utf8的,你的database的编码也是utf8的,为了正常显示中文,需要将你的server和database的编码都设置成utf8的,</span>\n\n\t<span style=\"font-size:20px;\">vim打开/etc/my.cnf</span>\n\n\t[![2015-06-15 20:13:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏-300x183.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏.png)￼\n\n\t<span style=\"font-size:20px;\">找到[mysqld] 和[mysql],连个模块,然后添加character_set_server=utf8 和 character-set = utf8 然后保存,重启一下数据库</span>\n\n\t<span style=\"font-size:20px;\">mariadb的重启命令是systemctl restart maria.db然后登录mariadb&nbsp;<span style=\"line-height: 32px;\">&nbsp;show variables like &#39;character%</span></span>[![2015-06-15 20:17:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏-300x127.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏.png)\n\n\t<span style=\"font-size:20px;\">看到字符编码都统一了为utf8,这样就解决了字符编码的乱码问题.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;对于以前已经创建好的表,可以用alter table db.tb convert to character set &lt;字符编码&gt;来实现问题的解决.</span>\n\n\t&nbsp;\n\n\t&nbsp;","source":"_posts/mariadb-e4-bf-ae-e6-94-b9-e5-ad-97-e7-ac-a6-e7-bc-96-e7-a0-81.md","raw":"---\ntitle: Mariadb 修改字符编码\nid: 122\ncategories:\n  - 数据库\ndate: 2015-06-15 12:28:34\ntags:\n\t- mysql\n\t- 数据库\n---\n\n<span style=\"font-size:20px;\">&nbsp; &nbsp;最近在数据库的时候遇到了字符编码的问题,用了一点时间终于解决了这个问题,现在来分享一下解决的方法.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp; 首先,在mariadb中输入 show variables like &#39;character%&#39;,然后就会看到你的字符编码,结果如图:</span>[![2015-06-15 20:12:09 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏-300x154.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏.png)\n\n\t<span style=\"font-size:20px;\">从图片中可以看到你的server字符编码是latinl的,而client的字符编码是utf8的,你的database的编码也是utf8的,为了正常显示中文,需要将你的server和database的编码都设置成utf8的,</span>\n\n\t<span style=\"font-size:20px;\">vim打开/etc/my.cnf</span>\n\n\t[![2015-06-15 20:13:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏-300x183.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏.png)￼\n\n\t<span style=\"font-size:20px;\">找到[mysqld] 和[mysql],连个模块,然后添加character_set_server=utf8 和 character-set = utf8 然后保存,重启一下数据库</span>\n\n\t<span style=\"font-size:20px;\">mariadb的重启命令是systemctl restart maria.db然后登录mariadb&nbsp;<span style=\"line-height: 32px;\">&nbsp;show variables like &#39;character%</span></span>[![2015-06-15 20:17:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏-300x127.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏.png)\n\n\t<span style=\"font-size:20px;\">看到字符编码都统一了为utf8,这样就解决了字符编码的乱码问题.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;对于以前已经创建好的表,可以用alter table db.tb convert to character set &lt;字符编码&gt;来实现问题的解决.</span>\n\n\t&nbsp;\n\n\t&nbsp;","slug":"mariadb-e4-bf-ae-e6-94-b9-e5-ad-97-e7-ac-a6-e7-bc-96-e7-a0-81","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qm002g2sma89e7p8nw","content":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp;最近在数据库的时候遇到了字符编码的问题,用了一点时间终于解决了这个问题,现在来分享一下解决的方法.</span></p>\n<pre><code>&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; 首先,在mariadb中输入 show variables like &amp;#39;character%&amp;#39;,然后就会看到你的字符编码,结果如图:&lt;/span&gt;[![2015-06-15 20:12:09 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏-300x154.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;从图片中可以看到你的server字符编码是latinl的,而client的字符编码是utf8的,你的database的编码也是utf8的,为了正常显示中文,需要将你的server和database的编码都设置成utf8的,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;vim打开/etc/my.cnf&lt;/span&gt;\n\n[![2015-06-15 20:13:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏-300x183.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏.png)￼\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;找到[mysqld] 和[mysql],连个模块,然后添加character_set_server=utf8 和 character-set = utf8 然后保存,重启一下数据库&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;mariadb的重启命令是systemctl restart maria.db然后登录mariadb&amp;nbsp;&lt;span style=&quot;line-height: 32px;&quot;&gt;&amp;nbsp;show variables like &amp;#39;character%&lt;/span&gt;&lt;/span&gt;[![2015-06-15 20:17:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏-300x127.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;看到字符编码都统一了为utf8,这样就解决了字符编码的乱码问题.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;对于以前已经创建好的表,可以用alter table db.tb convert to character set &amp;lt;字符编码&amp;gt;来实现问题的解决.&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp;最近在数据库的时候遇到了字符编码的问题,用了一点时间终于解决了这个问题,现在来分享一下解决的方法.</span></p>\n<pre><code>&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; 首先,在mariadb中输入 show variables like &amp;#39;character%&amp;#39;,然后就会看到你的字符编码,结果如图:&lt;/span&gt;[![2015-06-15 20:12:09 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏-300x154.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201209-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;从图片中可以看到你的server字符编码是latinl的,而client的字符编码是utf8的,你的database的编码也是utf8的,为了正常显示中文,需要将你的server和database的编码都设置成utf8的,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;vim打开/etc/my.cnf&lt;/span&gt;\n\n[![2015-06-15 20:13:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏-300x183.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201301-的截屏.png)￼\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;找到[mysqld] 和[mysql],连个模块,然后添加character_set_server=utf8 和 character-set = utf8 然后保存,重启一下数据库&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;mariadb的重启命令是systemctl restart maria.db然后登录mariadb&amp;nbsp;&lt;span style=&quot;line-height: 32px;&quot;&gt;&amp;nbsp;show variables like &amp;#39;character%&lt;/span&gt;&lt;/span&gt;[![2015-06-15 20:17:01 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏-300x127.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/06/2015-06-15-201701-的截屏.png)\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;看到字符编码都统一了为utf8,这样就解决了字符编码的乱码问题.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp;对于以前已经创建好的表,可以用alter table db.tb convert to character set &amp;lt;字符编码&amp;gt;来实现问题的解决.&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>"},{"title":"Mysql主从复制的实现","id":"241","date":"2016-04-25T01:44:46.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,\n\n&nbsp; &nbsp; &nbsp; &nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-id=2\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-name=&lt;hostname&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-user=&lt;user&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-password=&lt;password&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;master-log-file=\n\n&nbsp; &nbsp; 然后重启数据库\n\n(2)在启动mysql后输入命令:\n\n&nbsp; CHANGE MASTER TO\n\n&nbsp; &nbsp; MASTER_NAME=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_USER=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_PASSWORD=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_LOG_FILE=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_LOG_POS&#39;&#39;;\n\nSTART SLAVE;\n\n后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现\n\n参考链接：http://blog.csdn.net/hw_libo/article/details/38072287\n\n&nbsp;&nbsp;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp;","source":"_posts/mysql-e4-b8-bb-e4-bb-8e-e5-a4-8d-e5-88-b6-e7-9a-84-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: Mysql主从复制的实现\nid: 241\ncategories:\n  - 数据库\ndate: 2016-04-25 09:44:46\ntags:\n    - 数据库\n    - mysql\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,\n\n&nbsp; &nbsp; &nbsp; &nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-id=2\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-name=&lt;hostname&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-user=&lt;user&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-password=&lt;password&gt;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;master-log-file=\n\n&nbsp; &nbsp; 然后重启数据库\n\n(2)在启动mysql后输入命令:\n\n&nbsp; CHANGE MASTER TO\n\n&nbsp; &nbsp; MASTER_NAME=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_USER=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_PASSWORD=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_LOG_FILE=&#39;&#39;,\n\n&nbsp; &nbsp; MASTER_LOG_POS&#39;&#39;;\n\nSTART SLAVE;\n\n后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现\n\n参考链接：http://blog.csdn.net/hw_libo/article/details/38072287\n\n&nbsp;&nbsp;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp;","slug":"mysql-e4-b8-bb-e4-bb-8e-e5-a4-8d-e5-88-b6-e7-9a-84-e5-ae-9e-e7-8e-b0","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qp002k2smarzgnk1ii","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-id=2</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-name=&lt;hostname&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-user=&lt;user&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-password=&lt;password&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;master-log-file=</p>\n<p>&nbsp; &nbsp; 然后重启数据库</p>\n<p>(2)在启动mysql后输入命令:</p>\n<p>&nbsp; CHANGE MASTER TO</p>\n<p>&nbsp; &nbsp; MASTER_NAME=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_USER=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_PASSWORD=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_LOG_FILE=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_LOG_POS&#39;&#39;;</p>\n<p>START SLAVE;</p>\n<p>后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现</p>\n<p>参考链接：<a href=\"http://blog.csdn.net/hw_libo/article/details/38072287\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hw_libo/article/details/38072287</a></p>\n<p>&nbsp;&nbsp;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\n<p>&nbsp; &nbsp;</p>\n","excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近想实现MySql的主从复制,在网上搜了资料后有两种实现方式,</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; (1)修改 /etc/my.cnf 文件,在从数据库的配置文件中修改</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server-id=2</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-name=&lt;hostname&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-user=&lt;user&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;host-password=&lt;password&gt;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;master-log-file=</p>\n<p>&nbsp; &nbsp; 然后重启数据库</p>\n<p>(2)在启动mysql后输入命令:</p>\n<p>&nbsp; CHANGE MASTER TO</p>\n<p>&nbsp; &nbsp; MASTER_NAME=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_USER=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_PASSWORD=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_LOG_FILE=&#39;&#39;,</p>\n<p>&nbsp; &nbsp; MASTER_LOG_POS&#39;&#39;;</p>\n<p>START SLAVE;</p>\n<p>后来在自己的mariadb 10.0下用第一种方式,发现mysql重启报错,后来查了一下资料是因为MySql5.5之后不再支持,所以用第二种实现</p>\n<p>参考链接：<a href=\"http://blog.csdn.net/hw_libo/article/details/38072287\">http://blog.csdn.net/hw_libo/article/details/38072287</a></p>\n<p>&nbsp;&nbsp;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\n<p>&nbsp; &nbsp;</p>\n"},{"title":"mysql的简单语句","id":"129","date":"2015-06-15T06:28:18.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 最近在做一个小型的图书管理系统,用到了mysql的一点操作,不用不知道,一用吓一跳,码了一小会sql的语句,才发现自己的sql学的是如此的差,连基本的语句都不会了,更不用说是设计数据库了.</span>\n\n\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size:20px;\">基本的操作语句就不再陈述了,简单的,一些技巧性的东西,在此罗列一下,比如说想要让某一列的数值自动的增长,可以在建表的时候给某个列设置auto_increment 属性,然后设置在建表后的括号后面加上语句auto_increment=n ,n表示增长的基数. 然后移动字段,比如说你想把一个叫做Id的列移动到首行,这时候你要用到alter table &lt;表名&gt;&lt;列名&gt;&lt;属性&gt; first; 或者你想把某一个列移动到某个列的后面,这时候要用alter tabke&lt;表名&gt;&lt;列名&gt;&lt;属性&gt; after &lt;列名&gt;. 如果想要更改某个表的字符编码可以用alte table &lt;表名&gt; convert to character set &lt;字符编码&gt;.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; 接下来,谈谈用户的增加删除,修改密码.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp;增加用户: 可以用create user &#39;&lt;username&gt;&#39;@&#39;&lt;host&gt;&#39; identitied by &#39;password&#39;&nbsp;</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 或者是insert into mysql.user(Host, User, Password) valuse(&#39;%&#39;, &#39;test&#39;, password(&#39;test&#39;)) &#39;%&#39;表示在任意主机可以登录,上条语句表示创建了一个test用户,密码为test. 要使命令生效,必须调用flush privileges.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;删除用户:和增加用户相对立,drop user &#39;&lt;usernaem&gt;&#39;@&#39;&lt;host&gt;&#39; ;</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;或者是通过修改mysql.user表来进行删除修改 delete from user where User = &#39;user&#39; and &nbsp;Host = &#39;host&#39;;</span>\n\n\t&nbsp;&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;给用户授权: grant &lt;privileges&gt; on db.tb to &#39;user&#39;@&#39;host&#39;其中db.db表示给用户某个表授权,如果是*.*表示对所有的数据库授权,db.*表示对db数据库里面的所有表授权,然后&lt;privileges&gt; 有select , update, delete , alter, index, 等权限.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 看一下某一个用户有哪些权限可以通过 show grants for &#39;user&#39;@&#39;host&#39;查看&nbsp;</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;给用户删除权利: revoke&lt;privileges&gt; on db.tb from &#39;user&#39;@&#39;host&#39; 其中,所有的参数与授权的时候的参数是一致的.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;这个时候注意的是,如果你在授权的时候 grant all on db.special to &#39;lei&#39;@&#39;localhost&#39; 和 grant all on db.* to &#39;lei&#39;@&#39;localhost&#39;, 但是再给用户删除权利的时候只是调用revoke all on db.* 这个时候用户仍然具有 db.special的所有权限，这是一个比较特别的地方，具体的原因我也不知道．</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">　　　用户密码的修改：可以通过　set password for &#39;user&#39;@&#39;host&#39; = password(&#39;newpassword&#39;)来进行修改,也可以通过修改 mysql.user表来进行修改.</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;修改root密码:(1)在mysql.cnf中加上skip-grant-table然后重启mysql的服务,然后通过修改mysql的user表中的部分来进行密码的修改\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)mysqladmin -u root -p password newpasswd 然后输入密码,这个时候要用root权限,输入新密码\n</span>\n\n<span style=\"font-size: 20px;\">\n\t&nbsp;</span>\n\n\t&nbsp;\n\n\t&nbsp;","source":"_posts/mysql-e7-9a-84-e7-ae-80-e5-8d-95-e8-af-ad-e5-8f-a5.md","raw":"---\ntitle: mysql的简单语句\nid: 129\ncategories:\n  - 数据库\ndate: 2015-06-15 14:28:18\ntags:\n\t- 数据库\n\t- mysql\n---\n\n<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 最近在做一个小型的图书管理系统,用到了mysql的一点操作,不用不知道,一用吓一跳,码了一小会sql的语句,才发现自己的sql学的是如此的差,连基本的语句都不会了,更不用说是设计数据库了.</span>\n\n\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"font-size:20px;\">基本的操作语句就不再陈述了,简单的,一些技巧性的东西,在此罗列一下,比如说想要让某一列的数值自动的增长,可以在建表的时候给某个列设置auto_increment 属性,然后设置在建表后的括号后面加上语句auto_increment=n ,n表示增长的基数. 然后移动字段,比如说你想把一个叫做Id的列移动到首行,这时候你要用到alter table &lt;表名&gt;&lt;列名&gt;&lt;属性&gt; first; 或者你想把某一个列移动到某个列的后面,这时候要用alter tabke&lt;表名&gt;&lt;列名&gt;&lt;属性&gt; after &lt;列名&gt;. 如果想要更改某个表的字符编码可以用alte table &lt;表名&gt; convert to character set &lt;字符编码&gt;.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; 接下来,谈谈用户的增加删除,修改密码.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp;增加用户: 可以用create user &#39;&lt;username&gt;&#39;@&#39;&lt;host&gt;&#39; identitied by &#39;password&#39;&nbsp;</span>\n\n\t<span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 或者是insert into mysql.user(Host, User, Password) valuse(&#39;%&#39;, &#39;test&#39;, password(&#39;test&#39;)) &#39;%&#39;表示在任意主机可以登录,上条语句表示创建了一个test用户,密码为test. 要使命令生效,必须调用flush privileges.</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;删除用户:和增加用户相对立,drop user &#39;&lt;usernaem&gt;&#39;@&#39;&lt;host&gt;&#39; ;</span>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;或者是通过修改mysql.user表来进行删除修改 delete from user where User = &#39;user&#39; and &nbsp;Host = &#39;host&#39;;</span>\n\n\t&nbsp;&nbsp;\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;给用户授权: grant &lt;privileges&gt; on db.tb to &#39;user&#39;@&#39;host&#39;其中db.db表示给用户某个表授权,如果是*.*表示对所有的数据库授权,db.*表示对db数据库里面的所有表授权,然后&lt;privileges&gt; 有select , update, delete , alter, index, 等权限.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 看一下某一个用户有哪些权限可以通过 show grants for &#39;user&#39;@&#39;host&#39;查看&nbsp;</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;给用户删除权利: revoke&lt;privileges&gt; on db.tb from &#39;user&#39;@&#39;host&#39; 其中,所有的参数与授权的时候的参数是一致的.</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;这个时候注意的是,如果你在授权的时候 grant all on db.special to &#39;lei&#39;@&#39;localhost&#39; 和 grant all on db.* to &#39;lei&#39;@&#39;localhost&#39;, 但是再给用户删除权利的时候只是调用revoke all on db.* 这个时候用户仍然具有 db.special的所有权限，这是一个比较特别的地方，具体的原因我也不知道．</span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">　　　用户密码的修改：可以通过　set password for &#39;user&#39;@&#39;host&#39; = password(&#39;newpassword&#39;)来进行修改,也可以通过修改 mysql.user表来进行修改.</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;修改root密码:(1)在mysql.cnf中加上skip-grant-table然后重启mysql的服务,然后通过修改mysql的user表中的部分来进行密码的修改\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)mysqladmin -u root -p password newpasswd 然后输入密码,这个时候要用root权限,输入新密码\n</span>\n\n<span style=\"font-size: 20px;\">\n\t&nbsp;</span>\n\n\t&nbsp;\n\n\t&nbsp;","slug":"mysql-e7-9a-84-e7-ae-80-e5-8d-95-e8-af-ad-e5-8f-a5","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qr002m2smacgvia3z5","content":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 最近在做一个小型的图书管理系统,用到了mysql的一点操作,不用不知道,一用吓一跳,码了一小会sql的语句,才发现自己的sql学的是如此的差,连基本的语句都不会了,更不用说是设计数据库了.</span></p>\n<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;基本的操作语句就不再陈述了,简单的,一些技巧性的东西,在此罗列一下,比如说想要让某一列的数值自动的增长,可以在建表的时候给某个列设置auto_increment 属性,然后设置在建表后的括号后面加上语句auto_increment=n ,n表示增长的基数. 然后移动字段,比如说你想把一个叫做Id的列移动到首行,这时候你要用到alter table &amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; first; 或者你想把某一个列移动到某个列的后面,这时候要用alter tabke&amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; after &amp;lt;列名&amp;gt;. 如果想要更改某个表的字符编码可以用alte table &amp;lt;表名&amp;gt; convert to character set &amp;lt;字符编码&amp;gt;.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来,谈谈用户的增加删除,修改密码.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;增加用户: 可以用create user &amp;#39;&amp;lt;username&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; identitied by &amp;#39;password&amp;#39;&amp;nbsp;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 或者是insert into mysql.user(Host, User, Password) valuse(&amp;#39;%&amp;#39;, &amp;#39;test&amp;#39;, password(&amp;#39;test&amp;#39;)) &amp;#39;%&amp;#39;表示在任意主机可以登录,上条语句表示创建了一个test用户,密码为test. 要使命令生效,必须调用flush privileges.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;删除用户:和增加用户相对立,drop user &amp;#39;&amp;lt;usernaem&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; ;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;或者是通过修改mysql.user表来进行删除修改 delete from user where User = &amp;#39;user&amp;#39; and &amp;nbsp;Host = &amp;#39;host&amp;#39;;&lt;/span&gt;\n\n&amp;nbsp;&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户授权: grant &amp;lt;privileges&amp;gt; on db.tb to &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;其中db.db表示给用户某个表授权,如果是*.*表示对所有的数据库授权,db.*表示对db数据库里面的所有表授权,然后&amp;lt;privileges&amp;gt; 有select , update, delete , alter, index, 等权限.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 看一下某一个用户有哪些权限可以通过 show grants for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;查看&amp;nbsp;&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户删除权利: revoke&amp;lt;privileges&amp;gt; on db.tb from &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; 其中,所有的参数与授权的时候的参数是一致的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;这个时候注意的是,如果你在授权的时候 grant all on db.special to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39; 和 grant all on db.* to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39;, 但是再给用户删除权利的时候只是调用revoke all on db.* 这个时候用户仍然具有 db.special的所有权限，这是一个比较特别的地方，具体的原因我也不知道．&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;　　　用户密码的修改：可以通过　set password for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; = password(&amp;#39;newpassword&amp;#39;)来进行修改,也可以通过修改 mysql.user表来进行修改.&lt;/span&gt;\n</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;修改root密码:(1)在mysql.cnf中加上skip-grant-table然后重启mysql的服务,然后通过修改mysql的user表中的部分来进行密码的修改<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)mysqladmin -u root -p password newpasswd 然后输入密码,这个时候要用root权限,输入新密码<br></span></p>\n<p><span style=\"font-size: 20px;\"><br>    &nbsp;</span></p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp; &nbsp; &nbsp; &nbsp; 最近在做一个小型的图书管理系统,用到了mysql的一点操作,不用不知道,一用吓一跳,码了一小会sql的语句,才发现自己的sql学的是如此的差,连基本的语句都不会了,更不用说是设计数据库了.</span></p>\n<pre><code>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;基本的操作语句就不再陈述了,简单的,一些技巧性的东西,在此罗列一下,比如说想要让某一列的数值自动的增长,可以在建表的时候给某个列设置auto_increment 属性,然后设置在建表后的括号后面加上语句auto_increment=n ,n表示增长的基数. 然后移动字段,比如说你想把一个叫做Id的列移动到首行,这时候你要用到alter table &amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; first; 或者你想把某一个列移动到某个列的后面,这时候要用alter tabke&amp;lt;表名&amp;gt;&amp;lt;列名&amp;gt;&amp;lt;属性&amp;gt; after &amp;lt;列名&amp;gt;. 如果想要更改某个表的字符编码可以用alte table &amp;lt;表名&amp;gt; convert to character set &amp;lt;字符编码&amp;gt;.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来,谈谈用户的增加删除,修改密码.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;增加用户: 可以用create user &amp;#39;&amp;lt;username&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; identitied by &amp;#39;password&amp;#39;&amp;nbsp;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 或者是insert into mysql.user(Host, User, Password) valuse(&amp;#39;%&amp;#39;, &amp;#39;test&amp;#39;, password(&amp;#39;test&amp;#39;)) &amp;#39;%&amp;#39;表示在任意主机可以登录,上条语句表示创建了一个test用户,密码为test. 要使命令生效,必须调用flush privileges.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;删除用户:和增加用户相对立,drop user &amp;#39;&amp;lt;usernaem&amp;gt;&amp;#39;@&amp;#39;&amp;lt;host&amp;gt;&amp;#39; ;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;或者是通过修改mysql.user表来进行删除修改 delete from user where User = &amp;#39;user&amp;#39; and &amp;nbsp;Host = &amp;#39;host&amp;#39;;&lt;/span&gt;\n\n&amp;nbsp;&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户授权: grant &amp;lt;privileges&amp;gt; on db.tb to &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;其中db.db表示给用户某个表授权,如果是*.*表示对所有的数据库授权,db.*表示对db数据库里面的所有表授权,然后&amp;lt;privileges&amp;gt; 有select , update, delete , alter, index, 等权限.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 看一下某一个用户有哪些权限可以通过 show grants for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39;查看&amp;nbsp;&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;给用户删除权利: revoke&amp;lt;privileges&amp;gt; on db.tb from &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; 其中,所有的参数与授权的时候的参数是一致的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;这个时候注意的是,如果你在授权的时候 grant all on db.special to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39; 和 grant all on db.* to &amp;#39;lei&amp;#39;@&amp;#39;localhost&amp;#39;, 但是再给用户删除权利的时候只是调用revoke all on db.* 这个时候用户仍然具有 db.special的所有权限，这是一个比较特别的地方，具体的原因我也不知道．&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;　　　用户密码的修改：可以通过　set password for &amp;#39;user&amp;#39;@&amp;#39;host&amp;#39; = password(&amp;#39;newpassword&amp;#39;)来进行修改,也可以通过修改 mysql.user表来进行修改.&lt;/span&gt;\n</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;修改root密码:(1)在mysql.cnf中加上skip-grant-table然后重启mysql的服务,然后通过修改mysql的user表中的部分来进行密码的修改<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)mysqladmin -u root -p password newpasswd 然后输入密码,这个时候要用root权限,输入新密码<br></span></p>\n<p><span style=\"font-size: 20px;\"><br>    &nbsp;</span></p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>"},{"title":"mysql triggle 遇到的小问题","id":"164","date":"2015-07-22T08:33:02.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;今天在做小组的faq的问答用到了mysql,遇到了一点小问题(mysql创建触发器的问题)</span>\n\n\t<span style=\"font-size:20px;\">首先创建触发器的格式 : CREATE TRIGGER &lt;trigger_name&gt; [BEFROE][AFTER]+[UPDATE][DELETE][INSERT] ON 表名 FOR EACH ROW BEGIN + sql语句 +END;</span>\n\n\t<span style=\"font-size:20px;\">在表myTable中想要实现a字段根据b字段的变化而变化,定义的触发器是</span>\n\n\t<span style=\"font-size:20px;\">CREATE TRIGGER &#39;myTrigger&#39; AFTER UPDATE ON myTable FOR EACH ROW BEGIN</span>\n\n\t<span style=\"font-size:20px;\">UPDATE myTable SET a=new.b WHERE myTable.b = new.b;这样之后可以编译成功,但是在用的时候会报错,</span>&nbsp;<span style=\"font-size:20px;\">Can&#39;t update table &#39;app_faq_question&#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.出现了这个问题,这个问题的原因是循环更新了,网上查了一下资料,说是不要用UPDATE,直接用SET,于是改为</span>\n\n\t<span style=\"font-size: 20px;\">CREATE TRIGGER &#39;myTrigger&#39; BEFORE&nbsp;UPDATE ON myTable FOR EACH ROW BEGIN</span>\n\n\t<span style=\"font-size: 20px;\">&nbsp;SET a = new.b;最后还是失败了,然后把BEFORE改为AFTER成功.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px;\">还有学到了一点是mysql的timestamp类型,如果你设置:DEFAULT CURRENT_TIMESTAMP的话,它是会默认创建ON UPDATE CURRENT_TIMESTAMP只要你对这一行的记录有所更新,这个值就会更新,所以如果你想要取消掉这个特性,可以设置</span><span style=\"font-size: 20px; line-height: 20.7999992370605px;\">DEFAULT&nbsp;</span><span style=\"font-size: 20px; line-height: 20.7999992370605px;\">CURRENT_TIMESTAMP NULL, 或者直接给初始值 设置为0,还有就是mysql的NOW()函数,返回当前的时间,除此之外,每个表中只能有一个默CURRENT_TIMESTAMP,</span>\n\n\t<span style=\"font-size: 20px;\">所以你要实现两个,就要向上面我说的那样,创建一个触发器,来实现同步.</span>\n\n\t&nbsp;","source":"_posts/mysql-triggle-e9-81-87-e5-88-b0-e7-9a-84-e5-b0-8f-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: mysql triggle 遇到的小问题\nid: 164\ncategories:\n  - 数据库\ndate: 2015-07-22 16:33:02\ntags:\n- 数据库\n- mysql \n- mysql triggl\n---\n\n<span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;今天在做小组的faq的问答用到了mysql,遇到了一点小问题(mysql创建触发器的问题)</span>\n\n\t<span style=\"font-size:20px;\">首先创建触发器的格式 : CREATE TRIGGER &lt;trigger_name&gt; [BEFROE][AFTER]+[UPDATE][DELETE][INSERT] ON 表名 FOR EACH ROW BEGIN + sql语句 +END;</span>\n\n\t<span style=\"font-size:20px;\">在表myTable中想要实现a字段根据b字段的变化而变化,定义的触发器是</span>\n\n\t<span style=\"font-size:20px;\">CREATE TRIGGER &#39;myTrigger&#39; AFTER UPDATE ON myTable FOR EACH ROW BEGIN</span>\n\n\t<span style=\"font-size:20px;\">UPDATE myTable SET a=new.b WHERE myTable.b = new.b;这样之后可以编译成功,但是在用的时候会报错,</span>&nbsp;<span style=\"font-size:20px;\">Can&#39;t update table &#39;app_faq_question&#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.出现了这个问题,这个问题的原因是循环更新了,网上查了一下资料,说是不要用UPDATE,直接用SET,于是改为</span>\n\n\t<span style=\"font-size: 20px;\">CREATE TRIGGER &#39;myTrigger&#39; BEFORE&nbsp;UPDATE ON myTable FOR EACH ROW BEGIN</span>\n\n\t<span style=\"font-size: 20px;\">&nbsp;SET a = new.b;最后还是失败了,然后把BEFORE改为AFTER成功.</span>\n\n\t&nbsp;\n\n\t<span style=\"font-size: 20px;\">还有学到了一点是mysql的timestamp类型,如果你设置:DEFAULT CURRENT_TIMESTAMP的话,它是会默认创建ON UPDATE CURRENT_TIMESTAMP只要你对这一行的记录有所更新,这个值就会更新,所以如果你想要取消掉这个特性,可以设置</span><span style=\"font-size: 20px; line-height: 20.7999992370605px;\">DEFAULT&nbsp;</span><span style=\"font-size: 20px; line-height: 20.7999992370605px;\">CURRENT_TIMESTAMP NULL, 或者直接给初始值 设置为0,还有就是mysql的NOW()函数,返回当前的时间,除此之外,每个表中只能有一个默CURRENT_TIMESTAMP,</span>\n\n\t<span style=\"font-size: 20px;\">所以你要实现两个,就要向上面我说的那样,创建一个触发器,来实现同步.</span>\n\n\t&nbsp;","slug":"mysql-triggle-e9-81-87-e5-88-b0-e7-9a-84-e5-b0-8f-e9-97-ae-e9-a2-98","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qt002q2sma96rpotdh","content":"<p><span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;今天在做小组的faq的问答用到了mysql,遇到了一点小问题(mysql创建触发器的问题)</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;首先创建触发器的格式 : CREATE TRIGGER &amp;lt;trigger_name&amp;gt; [BEFROE][AFTER]+[UPDATE][DELETE][INSERT] ON 表名 FOR EACH ROW BEGIN + sql语句 +END;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;在表myTable中想要实现a字段根据b字段的变化而变化,定义的触发器是&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; AFTER UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;UPDATE myTable SET a=new.b WHERE myTable.b = new.b;这样之后可以编译成功,但是在用的时候会报错,&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;Can&amp;#39;t update table &amp;#39;app_faq_question&amp;#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.出现了这个问题,这个问题的原因是循环更新了,网上查了一下资料,说是不要用UPDATE,直接用SET,于是改为&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; BEFORE&amp;nbsp;UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;SET a = new.b;最后还是失败了,然后把BEFORE改为AFTER成功.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;还有学到了一点是mysql的timestamp类型,如果你设置:DEFAULT CURRENT_TIMESTAMP的话,它是会默认创建ON UPDATE CURRENT_TIMESTAMP只要你对这一行的记录有所更新,这个值就会更新,所以如果你想要取消掉这个特性,可以设置&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;DEFAULT&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;CURRENT_TIMESTAMP NULL, 或者直接给初始值 设置为0,还有就是mysql的NOW()函数,返回当前的时间,除此之外,每个表中只能有一个默CURRENT_TIMESTAMP,&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;所以你要实现两个,就要向上面我说的那样,创建一个触发器,来实现同步.&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp;&nbsp; &nbsp;今天在做小组的faq的问答用到了mysql,遇到了一点小问题(mysql创建触发器的问题)</span></p>\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;首先创建触发器的格式 : CREATE TRIGGER &amp;lt;trigger_name&amp;gt; [BEFROE][AFTER]+[UPDATE][DELETE][INSERT] ON 表名 FOR EACH ROW BEGIN + sql语句 +END;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;在表myTable中想要实现a字段根据b字段的变化而变化,定义的触发器是&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; AFTER UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;UPDATE myTable SET a=new.b WHERE myTable.b = new.b;这样之后可以编译成功,但是在用的时候会报错,&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-size:20px;&quot;&gt;Can&amp;#39;t update table &amp;#39;app_faq_question&amp;#39; in stored function/trigger because it is already used by statement which invoked this stored function/trigger.出现了这个问题,这个问题的原因是循环更新了,网上查了一下资料,说是不要用UPDATE,直接用SET,于是改为&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;CREATE TRIGGER &amp;#39;myTrigger&amp;#39; BEFORE&amp;nbsp;UPDATE ON myTable FOR EACH ROW BEGIN&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;&amp;nbsp;SET a = new.b;最后还是失败了,然后把BEFORE改为AFTER成功.&lt;/span&gt;\n\n&amp;nbsp;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;还有学到了一点是mysql的timestamp类型,如果你设置:DEFAULT CURRENT_TIMESTAMP的话,它是会默认创建ON UPDATE CURRENT_TIMESTAMP只要你对这一行的记录有所更新,这个值就会更新,所以如果你想要取消掉这个特性,可以设置&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;DEFAULT&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 20px; line-height: 20.7999992370605px;&quot;&gt;CURRENT_TIMESTAMP NULL, 或者直接给初始值 设置为0,还有就是mysql的NOW()函数,返回当前的时间,除此之外,每个表中只能有一个默CURRENT_TIMESTAMP,&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px;&quot;&gt;所以你要实现两个,就要向上面我说的那样,创建一个触发器,来实现同步.&lt;/span&gt;\n\n&amp;nbsp;\n</code></pre>"},{"title":"Redis 使用","id":"244","date":"2016-04-25T05:01:13.000Z","_content":"\n(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &nbsp; password\n\n(2)在登录的时候需要redis-cli -a password &nbsp;或者登录之后调用auth命令输入密码","source":"_posts/redis-e4-bd-bf-e7-94-a8.md","raw":"---\ntitle: Redis 使用\nid: 244\ncategories:\n  - redis\ndate: 2016-04-25 13:01:13\ntags:\n    - redis\n---\n\n(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &nbsp; password\n\n(2)在登录的时候需要redis-cli -a password &nbsp;或者登录之后调用auth命令输入密码","slug":"redis-e4-bd-bf-e7-94-a8","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qu002s2smafpwv6ipb","content":"<p>(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &nbsp; password</p>\n<p>(2)在登录的时候需要redis-cli -a password &nbsp;或者登录之后调用auth命令输入密码</p>\n","excerpt":"","more":"<p>(1)设置redis的登录密码:在redis的配置文件中用添加requirepass &nbsp; password</p>\n<p>(2)在登录的时候需要redis-cli -a password &nbsp;或者登录之后调用auth命令输入密码</p>\n"},{"title":"Servlet复习","id":"190","date":"2015-07-23T17:42:27.000Z","_content":"\n<span style=\"font-size:20px;\">&nbsp;\n\n\t之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.</span>\n\n\t<span style=\"font-size:20px;\">我学的都是最基础的,最简单的东西.</span>\n\n\t<span style=\"font-size:20px;\">首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件.\n\n\t根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.</span>\n\n\t<span style=\"font-size:20px;\">接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了.\n\n\t最基础的是&lt;servlet&gt;元素一定在&lt;servlet-mapping&gt;元素之后,而&lt;context&gt;元素在&lt;servlet&gt;元素之前,&lt;context-param&gt;在&lt;servlet&gt;元素之前,在此列出一下最常用的一些元素的顺序:&lt;display-name&gt; , &lt;description&gt;, &lt;filter&gt;,&lt;filter-mapping&gt;, &lt;listener&gt;,&lt;servlet&gt; ,&lt;servlet-mapping&gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.</span>\n\n\t<span style=\"font-size:20px;\">&lt;servlet&gt;配置:需要的子元素&lt;servlet-name&gt; &lt;servlet-classs&gt;(这两个元素是必须的)\n\n\t&nbsp;&lt;servlet-mapping&gt;配置:需要子元素&lt;servlet-name&gt;(此元素的值必须与&lt;servlet&gt;中的某个值匹配) &lt;url-pattern&gt;(次元素可以有多个值) (这两个元素是必须的)\n\n\t也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下:\n\n\t@WebServlet(name=&quot;name&quot;, urlPatterns={&quot;pattern1&quot;, &quot;pattern2&#39;}, initParams={@WebInitParam(name=&quot;name&quot;, value=&quot;value&quot;), @WebInitParam(name=&quot;name1&quot;, value=&quot;value1&quot;)})</span>\n\n\t<span style=\"font-size:20px;\">&lt;filter&gt;配置:和servlet的配置基本一致,在此就不再重复.</span>\n\n\t<span style=\"font-size:20px;\">&lt;listener&gt;配置:只需要&lt; listener-class&gt;子元素</span>\n\n\t<span style=\"font-size:20px;\">&lt;context-param&gt;配置:需要的子元素&lt;param-name&gt;和&lt;param-value&gt;(至少这两个元素,且只准出现一次)</span>\n\n\t<span style=\"font-size:20px;\">说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.</span>\n\n\t<span style=\"font-size:20px;\">HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name),\n\n\tgetAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.</span>\n\n\t<span style=\"font-size:20px;\">HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(),\n\n\tHttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);</span>\n\n\t<span style=\"font-size:20px;\">ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&lt;servlet&gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,</span>\n\n\t<span style=\"font-size:20px;\">ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)</span>\n\n\t<span style=\"font-size:20px;\">HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().</span>\n\n\t<span style=\"font-size:20px;\">Cookie接口:</span>\n\n\t<span style=\"font-size:20px;\">列举完了几个常用的Servlet接口,接下来谈一下Web应用,\n\n\tWeb应用的生命周期:\n\n\t(1)启动阶段\n\n\t(2)运行阶段\n\n\t(3)终止阶段</span>\n\n\t<span style=\"font-size:20px;\">Web应用的启动阶段:\n\n\t(1)将web.xml读入内存中\n\n\t(2)创建一个ServletContext实例\n\n\t(3)初始化Filter\n\n\t(4)初始化必要的Servlet(load-on-startup)</span>\n\n\t<span style=\"font-size:20px;\">Web应用的运行阶段:Servlet都处于待命的状态</span>\n\n\t<span style=\"font-size:20px;\">Web应用的终止阶段:\n\n\t(1)销毁Servlet实例\n\n\t(2)销毁Filter\n\n\t(3)销毁与JavaWeb应用有关的对象,如ServletContext</span>\n\n\t<span style=\"font-size:20px;\">谈一下Servlet的生命周期:\n\n\t(1)初始化阶段\n\n\t(2)运行阶段\n\n\t(3)销毁阶段</span>\n\n\t<span style=\"font-size:20px;\">初始化阶段:\n\n\t(1)加载.class文件到内存中\n\n\t(2)Servlet创建ServletConfig对象.\n\n\t(3)创建Servlet对象\n\n\t(4)调用Servlet的Init()方法</span>\n\n\t<span style=\"font-size:20px;\">运行阶段:</span>\n\n\t<span style=\"font-size:20px;\">销毁阶段;\n\n\t调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.</span>\n\n\t<span style=\"font-size:20px;\">包含与转发:\n\n\tServletContext对象的getRequestDispatcher().forward() 或者.include();\n\n\t或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.</span>\n\n\t<span style=\"font-size:20px;\">重定向:\n\n\tresponse.sendRedirect(String location)重定向会丢失所有的请求参数.</span>\n\n\t&nbsp;\n\n\t&nbsp;","source":"_posts/servlet-e5-a4-8d-e4-b9-a0.md","raw":"---\ntitle: Servlet复习\nid: 190\ncategories:\n  - Java复习\ndate: 2015-07-24 01:42:27\ntags:\n\t- Java\n\t- Servlet\n---\n\n<span style=\"font-size:20px;\">&nbsp;\n\n\t之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.</span>\n\n\t<span style=\"font-size:20px;\">我学的都是最基础的,最简单的东西.</span>\n\n\t<span style=\"font-size:20px;\">首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件.\n\n\t根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.</span>\n\n\t<span style=\"font-size:20px;\">接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了.\n\n\t最基础的是&lt;servlet&gt;元素一定在&lt;servlet-mapping&gt;元素之后,而&lt;context&gt;元素在&lt;servlet&gt;元素之前,&lt;context-param&gt;在&lt;servlet&gt;元素之前,在此列出一下最常用的一些元素的顺序:&lt;display-name&gt; , &lt;description&gt;, &lt;filter&gt;,&lt;filter-mapping&gt;, &lt;listener&gt;,&lt;servlet&gt; ,&lt;servlet-mapping&gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.</span>\n\n\t<span style=\"font-size:20px;\">&lt;servlet&gt;配置:需要的子元素&lt;servlet-name&gt; &lt;servlet-classs&gt;(这两个元素是必须的)\n\n\t&nbsp;&lt;servlet-mapping&gt;配置:需要子元素&lt;servlet-name&gt;(此元素的值必须与&lt;servlet&gt;中的某个值匹配) &lt;url-pattern&gt;(次元素可以有多个值) (这两个元素是必须的)\n\n\t也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下:\n\n\t@WebServlet(name=&quot;name&quot;, urlPatterns={&quot;pattern1&quot;, &quot;pattern2&#39;}, initParams={@WebInitParam(name=&quot;name&quot;, value=&quot;value&quot;), @WebInitParam(name=&quot;name1&quot;, value=&quot;value1&quot;)})</span>\n\n\t<span style=\"font-size:20px;\">&lt;filter&gt;配置:和servlet的配置基本一致,在此就不再重复.</span>\n\n\t<span style=\"font-size:20px;\">&lt;listener&gt;配置:只需要&lt; listener-class&gt;子元素</span>\n\n\t<span style=\"font-size:20px;\">&lt;context-param&gt;配置:需要的子元素&lt;param-name&gt;和&lt;param-value&gt;(至少这两个元素,且只准出现一次)</span>\n\n\t<span style=\"font-size:20px;\">说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.</span>\n\n\t<span style=\"font-size:20px;\">HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name),\n\n\tgetAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.</span>\n\n\t<span style=\"font-size:20px;\">HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(),\n\n\tHttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);</span>\n\n\t<span style=\"font-size:20px;\">ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&lt;servlet&gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,</span>\n\n\t<span style=\"font-size:20px;\">ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)</span>\n\n\t<span style=\"font-size:20px;\">HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().</span>\n\n\t<span style=\"font-size:20px;\">Cookie接口:</span>\n\n\t<span style=\"font-size:20px;\">列举完了几个常用的Servlet接口,接下来谈一下Web应用,\n\n\tWeb应用的生命周期:\n\n\t(1)启动阶段\n\n\t(2)运行阶段\n\n\t(3)终止阶段</span>\n\n\t<span style=\"font-size:20px;\">Web应用的启动阶段:\n\n\t(1)将web.xml读入内存中\n\n\t(2)创建一个ServletContext实例\n\n\t(3)初始化Filter\n\n\t(4)初始化必要的Servlet(load-on-startup)</span>\n\n\t<span style=\"font-size:20px;\">Web应用的运行阶段:Servlet都处于待命的状态</span>\n\n\t<span style=\"font-size:20px;\">Web应用的终止阶段:\n\n\t(1)销毁Servlet实例\n\n\t(2)销毁Filter\n\n\t(3)销毁与JavaWeb应用有关的对象,如ServletContext</span>\n\n\t<span style=\"font-size:20px;\">谈一下Servlet的生命周期:\n\n\t(1)初始化阶段\n\n\t(2)运行阶段\n\n\t(3)销毁阶段</span>\n\n\t<span style=\"font-size:20px;\">初始化阶段:\n\n\t(1)加载.class文件到内存中\n\n\t(2)Servlet创建ServletConfig对象.\n\n\t(3)创建Servlet对象\n\n\t(4)调用Servlet的Init()方法</span>\n\n\t<span style=\"font-size:20px;\">运行阶段:</span>\n\n\t<span style=\"font-size:20px;\">销毁阶段;\n\n\t调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.</span>\n\n\t<span style=\"font-size:20px;\">包含与转发:\n\n\tServletContext对象的getRequestDispatcher().forward() 或者.include();\n\n\t或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.</span>\n\n\t<span style=\"font-size:20px;\">重定向:\n\n\tresponse.sendRedirect(String location)重定向会丢失所有的请求参数.</span>\n\n\t&nbsp;\n\n\t&nbsp;","slug":"servlet-e5-a4-8d-e4-b9-a0","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29qw002u2sma8iery3ng","content":"<p><span style=\"font-size:20px;\">&nbsp;</span></p>\n<pre><code>之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;我学的都是最基础的,最简单的东西.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件.\n\n根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了.\n\n最基础的是&amp;lt;servlet&amp;gt;元素一定在&amp;lt;servlet-mapping&amp;gt;元素之后,而&amp;lt;context&amp;gt;元素在&amp;lt;servlet&amp;gt;元素之前,&amp;lt;context-param&amp;gt;在&amp;lt;servlet&amp;gt;元素之前,在此列出一下最常用的一些元素的顺序:&amp;lt;display-name&amp;gt; , &amp;lt;description&amp;gt;, &amp;lt;filter&amp;gt;,&amp;lt;filter-mapping&amp;gt;, &amp;lt;listener&amp;gt;,&amp;lt;servlet&amp;gt; ,&amp;lt;servlet-mapping&amp;gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;servlet&amp;gt;配置:需要的子元素&amp;lt;servlet-name&amp;gt; &amp;lt;servlet-classs&amp;gt;(这两个元素是必须的)\n\n&amp;nbsp;&amp;lt;servlet-mapping&amp;gt;配置:需要子元素&amp;lt;servlet-name&amp;gt;(此元素的值必须与&amp;lt;servlet&amp;gt;中的某个值匹配) &amp;lt;url-pattern&amp;gt;(次元素可以有多个值) (这两个元素是必须的)\n\n也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下:\n\n@WebServlet(name=&amp;quot;name&amp;quot;, urlPatterns={&amp;quot;pattern1&amp;quot;, &amp;quot;pattern2&amp;#39;}, initParams={@WebInitParam(name=&amp;quot;name&amp;quot;, value=&amp;quot;value&amp;quot;), @WebInitParam(name=&amp;quot;name1&amp;quot;, value=&amp;quot;value1&amp;quot;)})&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;filter&amp;gt;配置:和servlet的配置基本一致,在此就不再重复.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;listener&amp;gt;配置:只需要&amp;lt; listener-class&amp;gt;子元素&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;context-param&amp;gt;配置:需要的子元素&amp;lt;param-name&amp;gt;和&amp;lt;param-value&amp;gt;(至少这两个元素,且只准出现一次)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name),\n\ngetAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(),\n\nHttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&amp;lt;servlet&amp;gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Cookie接口:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;列举完了几个常用的Servlet接口,接下来谈一下Web应用,\n\nWeb应用的生命周期:\n\n(1)启动阶段\n\n(2)运行阶段\n\n(3)终止阶段&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的启动阶段:\n\n(1)将web.xml读入内存中\n\n(2)创建一个ServletContext实例\n\n(3)初始化Filter\n\n(4)初始化必要的Servlet(load-on-startup)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的运行阶段:Servlet都处于待命的状态&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的终止阶段:\n\n(1)销毁Servlet实例\n\n(2)销毁Filter\n\n(3)销毁与JavaWeb应用有关的对象,如ServletContext&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;谈一下Servlet的生命周期:\n\n(1)初始化阶段\n\n(2)运行阶段\n\n(3)销毁阶段&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;初始化阶段:\n\n(1)加载.class文件到内存中\n\n(2)Servlet创建ServletConfig对象.\n\n(3)创建Servlet对象\n\n(4)调用Servlet的Init()方法&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;运行阶段:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;销毁阶段;\n\n调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;包含与转发:\n\nServletContext对象的getRequestDispatcher().forward() 或者.include();\n\n或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;重定向:\n\nresponse.sendRedirect(String location)重定向会丢失所有的请求参数.&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>","excerpt":"","more":"<p><span style=\"font-size:20px;\">&nbsp;</p>\n<pre><code>之前学过jsp,servlet和struts2基础,因为学完后不久就在准备最后的Java比赛和期末考试,好久没有写关于这些方面的代码了,于是趁着最近的时间复习一下有关这方面的内容.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;我学的都是最基础的,最简单的东西.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;首先谈一下webapp的工作路径吧,首先要有一个根目录,然后根目录下面有一个WEB-INF文件夹和src文件夹,在这个文件夹里面有一个web.xml文件(Servlet3.0以后这个文件可以没有),然后相应的jsp页面应该放在根目录下面,如果放在WEB-INF文件夹下面,是没有办法直接在浏览器里输入URL访问的,但是可以通过相应的映射访问,(有些页面出于安全考虑,可以放在WEB-INF下面,这样一定程度上可以提高安全性),一般WEB-INF文件夹下面有class文件夹和lib文件夹,其中lib文件夹是存放应用中需要用到的第三方jar包,class文件夹存放.class文件.\n\n根目录下的src文件夹是存放各种用到的源文件,比如自己写的Servlet文件或者Filter文件或者JavaBean.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;接下来谈一下web.xml的配置,有一篇博客写的很棒,在此把它给粘上http://www.cnblogs.com/chinafine/archive/2010/09/02/1815980.html之前一直一位web.xml中的元素是没有顺序的,后来发现自己错的相当严重,导致花了好几个小时找错误,找不到哪里错了.\n\n最基础的是&amp;lt;servlet&amp;gt;元素一定在&amp;lt;servlet-mapping&amp;gt;元素之后,而&amp;lt;context&amp;gt;元素在&amp;lt;servlet&amp;gt;元素之前,&amp;lt;context-param&amp;gt;在&amp;lt;servlet&amp;gt;元素之前,在此列出一下最常用的一些元素的顺序:&amp;lt;display-name&amp;gt; , &amp;lt;description&amp;gt;, &amp;lt;filter&amp;gt;,&amp;lt;filter-mapping&amp;gt;, &amp;lt;listener&amp;gt;,&amp;lt;servlet&amp;gt; ,&amp;lt;servlet-mapping&amp;gt;,除了通过配置web.xml可以实现配置外,还可以通过注解的形式配置.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;servlet&amp;gt;配置:需要的子元素&amp;lt;servlet-name&amp;gt; &amp;lt;servlet-classs&amp;gt;(这两个元素是必须的)\n\n&amp;nbsp;&amp;lt;servlet-mapping&amp;gt;配置:需要子元素&amp;lt;servlet-name&amp;gt;(此元素的值必须与&amp;lt;servlet&amp;gt;中的某个值匹配) &amp;lt;url-pattern&amp;gt;(次元素可以有多个值) (这两个元素是必须的)\n\n也可以通过注解的形式来进行配置Servlet(要求Servlet版本至少3.0)格式如下:\n\n@WebServlet(name=&amp;quot;name&amp;quot;, urlPatterns={&amp;quot;pattern1&amp;quot;, &amp;quot;pattern2&amp;#39;}, initParams={@WebInitParam(name=&amp;quot;name&amp;quot;, value=&amp;quot;value&amp;quot;), @WebInitParam(name=&amp;quot;name1&amp;quot;, value=&amp;quot;value1&amp;quot;)})&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;filter&amp;gt;配置:和servlet的配置基本一致,在此就不再重复.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;listener&amp;gt;配置:只需要&amp;lt; listener-class&amp;gt;子元素&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;lt;context-param&amp;gt;配置:需要的子元素&amp;lt;param-name&amp;gt;和&amp;lt;param-value&amp;gt;(至少这两个元素,且只准出现一次)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;说完了简单web.xml的配置,说一下简单的Servlet,创建一个Servlet必须要继承HttpServlet这个类,这个类中有好多方法,比如说do+请求方式方法,如doGet, doPost等等,这些方法的参数是HttpServletRequest类型和HttpServletResponse类型,如果是直接请求一个Servlet的话,是service()方法来对它进行响应的.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletRequest接口实现了ServletRequest接口,ServletRequest接口的方法有getContextType(), getContextLength(),getInputStream(), getLocalAddr(), getLocalName(), getLocalPort(),getParameter(String name),\n\ngetAttribue(String name), setAttribute(String name, Object obj),removeAttribute(String name),getParameterNames(),getParameterMap()等等,HttpServletRequest接口中的方法:getCookies(), getHeader(String name), getHeaderNames(),getMethod(),getRequestURI(), getQueryString(),等.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpServletResponse接口实现了ServletResponse接口,ServletResponse接口的常用方法有:setContextType,setContextLength(),getOutputStream(),getWriter(),reset(),getCharacterEncoding(),flushBuffer(),\n\nHttpServletResponse接口中添加的方法有addHeader(String name, String value), setHeader(String name, String value), addCookie(Cookie cookie), setStatus(int sc), sendError(int sc);&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;ServletConfig接口中的方法getInitParameter(String name), getInitParameterNames(),getServleContext(),getServletName(),这个接口实例化后产生的是一个servlet的实例,而getInitParameter(String name)方法获取的参数来自于&amp;lt;servlet&amp;gt;里定义的或者在@WebServlet(initparameters)里面注解的参数.getServeletContext()方法返回一个ServletContext的实例,&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;ServletContext接口 ,每个Web应用有唯一的ServletContext对象,该接口中定义的方法有:setAttitute(String name, Object obj), getAttribuer(String name),getInitParameter(String name_, getInitParameterNames(), getAttributeNames(),getRequestDispatcher(String path), getRealPath(String path), log(String msg)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;HttpSession接口 :getId(), invalidata(),setAttribute(String name, Object, obj), getAttribute(String name), getAttributeNames(), removeAttribueName(String name), isNew(),SetMaxInactiveInterval(int interval),getServletContext().&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Cookie接口:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;列举完了几个常用的Servlet接口,接下来谈一下Web应用,\n\nWeb应用的生命周期:\n\n(1)启动阶段\n\n(2)运行阶段\n\n(3)终止阶段&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的启动阶段:\n\n(1)将web.xml读入内存中\n\n(2)创建一个ServletContext实例\n\n(3)初始化Filter\n\n(4)初始化必要的Servlet(load-on-startup)&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的运行阶段:Servlet都处于待命的状态&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;Web应用的终止阶段:\n\n(1)销毁Servlet实例\n\n(2)销毁Filter\n\n(3)销毁与JavaWeb应用有关的对象,如ServletContext&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;谈一下Servlet的生命周期:\n\n(1)初始化阶段\n\n(2)运行阶段\n\n(3)销毁阶段&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;初始化阶段:\n\n(1)加载.class文件到内存中\n\n(2)Servlet创建ServletConfig对象.\n\n(3)创建Servlet对象\n\n(4)调用Servlet的Init()方法&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;运行阶段:&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;销毁阶段;\n\n调用destory()方法.销毁Servlet对象,然后销毁ServletConfig对象.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;包含与转发:\n\nServletContext对象的getRequestDispatcher().forward() 或者.include();\n\n或者调用request对象的相应方法,两者的区别是前者只能使用绝对路径,后者可以使用相对路径.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;重定向:\n\nresponse.sendRedirect(String location)重定向会丢失所有的请求参数.&lt;/span&gt;\n\n&amp;nbsp;\n\n&amp;nbsp;\n</code></pre>"},{"title":"struts2 学习总结","id":"200","date":"2015-07-26T07:35:01.000Z","_content":"\n# \n\t从昨天开始看李刚的&lt;&lt;轻量级JavaEE&gt;&gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.\n\n<div>\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&lt;s:debug /&gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.</span>\n\n\t<span style=\"font-size:20px;\"><span style=\"line-height: 32px;\">假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&quot;&quot;和use.password=&quot;&#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&nbsp;</span></span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.</span>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">Map类型的参数格式为Key_&lt;MapPropName&gt;=&lt;key_type&gt; Element_&lt;MapPropName&gt;=&lt;key_type&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&lt;s:filederror /&gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&lt;propName&gt;=&lt;tipMsg&gt;.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;valiators&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;&lt;fieldName=&quot;name&quot; &gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &lt;fileld-validator type=&quot;type&quot;&gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;param name=&quot;条件&#39;&gt;条件&lt;/param&gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;message key=&quot;国际化提示消息&quot;&gt;如果校验错误,就输出这个信息&lt;/message&gt;(这个是必须的)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/field-validator&gt;&nbsp;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;field-validator type=&quot;&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; ...........</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;/field-validator&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;&lt;/fieldName&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/valiators&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">客户端校验:在&lt;s:form中设置 validate=&quot;true&quot; &gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">除了字段校验风格的校验器还有非字段校验风格的校验器.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;validators&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;validator&nbsp;type=&quot;&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;filelName&quot;&gt;字段的名字&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;参数名&quot;&gt;参数值&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;...</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;message key=&quot;国际化消息&quot;&gt;..&lt;/message&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/validator-type&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">设置格式是:在&lt;filed-name short-circuit=&quot;true&quot; &gt; 和&lt;validator short-circuit=&quot;true&quot; &gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">校验文件的搜索规则:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActonName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActionName&gt;-&lt;MethodName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-&lt;methodName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">输入校验的步骤:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(3)使用struts2配置的校验器进行输入校验</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(4)通过反射调用validteXxx方法</span>\n</div>\n\n<div>\n\t[![2015-07-26 23:11:15 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏-300x82.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏.png)\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">利用struts2实现文件的上传</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">struts.multipart.parser=jakarta</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">说明struts2的解析器是用到jakarta</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">文件上传中用到struts标签库中的一个标签&lt;s:file &gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后需要配置相应的action:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">需要额外配置三个参数:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">File xxx;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">String xxxContentType;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">String xxxFileName;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">实现文件下载:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;action&gt;的配置:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;result type=&quot;stream&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;param name =&quot;inputName&#39; &gt;xxxx(和上面的返回的InputStream的方法名相对应)&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &lt;param name=&quot;contentType&quot;&gt;&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;param name=&quot;contentDisposition&quot; /&gt;下载的文件名&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;param name=&quot;bufferSize&quot;&gt;下载缓冲区大小&lt;/param&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t&nbsp;\n</div>\n","source":"_posts/struts2-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: struts2 学习总结\nid: 200\ncategories:\n  - struts2\ndate: 2015-07-26 15:35:01\ntags:\n\t- strus2\n\t- 学习总结\n---\n\n# \n\t从昨天开始看李刚的&lt;&lt;轻量级JavaEE&gt;&gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.\n\n<div>\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n\t<span style=\"font-size:20px;\">&nbsp;&nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&lt;s:debug /&gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.</span>\n\n\t<span style=\"font-size:20px;\"><span style=\"line-height: 32px;\">假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&quot;&quot;和use.password=&quot;&#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&nbsp;</span></span>\n\n\t<span style=\"font-size: 20px; line-height: 32px;\">自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.</span>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">Map类型的参数格式为Key_&lt;MapPropName&gt;=&lt;key_type&gt; Element_&lt;MapPropName&gt;=&lt;key_type&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&lt;s:filederror /&gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&lt;propName&gt;=&lt;tipMsg&gt;.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;valiators&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;&lt;fieldName=&quot;name&quot; &gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &lt;fileld-validator type=&quot;type&quot;&gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;param name=&quot;条件&#39;&gt;条件&lt;/param&gt;(可以有多个)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;message key=&quot;国际化提示消息&quot;&gt;如果校验错误,就输出这个信息&lt;/message&gt;(这个是必须的)</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/field-validator&gt;&nbsp;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;field-validator type=&quot;&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; ...........</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;/field-validator&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;&lt;/fieldName&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/valiators&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">客户端校验:在&lt;s:form中设置 validate=&quot;true&quot; &gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">除了字段校验风格的校验器还有非字段校验风格的校验器.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;validators&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;validator&nbsp;type=&quot;&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;filelName&quot;&gt;字段的名字&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;参数名&quot;&gt;参数值&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;...</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;message key=&quot;国际化消息&quot;&gt;..&lt;/message&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/validator-type&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">设置格式是:在&lt;filed-name short-circuit=&quot;true&quot; &gt; 和&lt;validator short-circuit=&quot;true&quot; &gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">校验文件的搜索规则:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActonName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActionName&gt;-&lt;MethodName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-&lt;methodName&gt;-validation.xml</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">输入校验的步骤:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(3)使用struts2配置的校验器进行输入校验</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(4)通过反射调用validteXxx方法</span>\n</div>\n\n<div>\n\t[![2015-07-26 23:11:15 的截屏](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏-300x82.png)](http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏.png)\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">(6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">利用struts2实现文件的上传</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">struts.multipart.parser=jakarta</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">说明struts2的解析器是用到jakarta</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">文件上传中用到struts标签库中的一个标签&lt;s:file &gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">然后需要配置相应的action:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">需要额外配置三个参数:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">File xxx;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">String xxxContentType;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">String xxxFileName;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可.</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">实现文件下载:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可.</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;action&gt;的配置:</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;result type=&quot;stream&quot;&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;param name =&quot;inputName&#39; &gt;xxxx(和上面的返回的InputStream的方法名相对应)&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &lt;param name=&quot;contentType&quot;&gt;&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;param name=&quot;contentDisposition&quot; /&gt;下载的文件名&lt;/param&gt;</span>\n</div>\n\n<div>\n\t<span style=\"font-size: 20px; line-height: 32px;\">&lt;param name=&quot;bufferSize&quot;&gt;下载缓冲区大小&lt;/param&gt;</span>\n</div>\n\n<div>\n\t&nbsp;\n</div>\n\n<div>\n\t&nbsp;\n</div>\n","slug":"struts2-e5-ad-a6-e4-b9-a0-e6-80-bb-e7-bb-93","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29r0002y2smack6sia7d","content":"<p>#<br>    从昨天开始看李刚的&lt;&lt;轻量级JavaEE&gt;&gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.</p>\n<div><br>    <span style=\"font-size:20px;\">&nbsp;&nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&amp;lt;s:debug /&amp;gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;line-height: 32px;&quot;&gt;假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&amp;quot;&amp;quot;和use.password=&amp;quot;&amp;#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.&lt;/span&gt;\n</code></pre><div><br>    <span style=\"font-size: 20px; line-height: 32px;\">类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">Map类型的参数格式为Key_&lt;MapPropName&gt;=&lt;key<em>type&gt; Element</em>&lt;MapPropName&gt;=&lt;key_type&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&lt;s:filederror /&gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&lt;propName&gt;=&lt;tipMsg&gt;.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;valiators&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;&lt;fieldName=&quot;name&quot; &gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &lt;fileld-validator type=&quot;type&quot;&gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;param name=&quot;条件&#39;&gt;条件&lt;/param&gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;message key=&quot;国际化提示消息&quot;&gt;如果校验错误,就输出这个信息&lt;/message&gt;(这个是必须的)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/field-validator&gt;&nbsp;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;field-validator type=&quot;&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; ………..</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;/field-validator&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;&lt;/fieldName&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/valiators&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">客户端校验:在&lt;s:form中设置 validate=&quot;true&quot; &gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">除了字段校验风格的校验器还有非字段校验风格的校验器.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;validators&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;validator&nbsp;type=&quot;&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;filelName&quot;&gt;字段的名字&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;参数名&quot;&gt;参数值&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;…</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;message key=&quot;国际化消息&quot;&gt;..&lt;/message&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/validator-type&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">设置格式是:在&lt;filed-name short-circuit=&quot;true&quot; &gt; 和&lt;validator short-circuit=&quot;true&quot; &gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">校验文件的搜索规则:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActonName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActionName&gt;-&lt;MethodName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-&lt;methodName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">输入校验的步骤:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(3)使用struts2配置的校验器进行输入校验</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(4)通过反射调用validteXxx方法</span><br></div>\n\n<div><br>    <a href=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏-300x82.png\" alt=\"2015-07-26 23:11:15 的截屏\"></a><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">利用struts2实现文件的上传</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">struts.multipart.parser=jakarta</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">说明struts2的解析器是用到jakarta</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">文件上传中用到struts标签库中的一个标签&lt;s:file &gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">然后需要配置相应的action:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">需要额外配置三个参数:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">File xxx;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">String xxxContentType;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">String xxxFileName;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">实现文件下载:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;action&gt;的配置:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;result type=&quot;stream&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;param name =&quot;inputName&#39; &gt;xxxx(和上面的返回的InputStream的方法名相对应)&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &lt;param name=&quot;contentType&quot;&gt;&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;param name=&quot;contentDisposition&quot; /&gt;下载的文件名&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;param name=&quot;bufferSize&quot;&gt;下载缓冲区大小&lt;/param&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    &nbsp;<br></div>\n","excerpt":"","more":"<p>#<br>    从昨天开始看李刚的&lt;&lt;轻量级JavaEE&gt;&gt;的深入使用struts2,到现在感觉学的东西有点多,有点乱,有点杂,于是静下心来,整理一下.</p>\n<div><br>    <span style=\"font-size:20px;\">&nbsp;&nbsp; 深入使用struts2,我看了struts2的类型转换,字段的校验,文件的上传,文件的下载.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<pre><code>&lt;span style=&quot;font-size:20px;&quot;&gt;&amp;nbsp;&amp;nbsp;首先谈一下类型的转换,在此之前我想先说一下Action类中的属性,action类中的每一个属性都会对应着web应用的值,当你请求action的时候,然后转发到某个视图资源,通过&amp;lt;s:debug /&amp;gt;标签,你会看到,你的action中的每个属性都会存到valueStack中.那么问题就来了,这就牵扯到了类型的转换,valueStack中的对象都是Object类型的所以都要进行类型转换.struts2已经内建了int,double,float,bool,char.boolean以及它们的包装类和Date类型的参数.其余的复合类型就需要自己定义了.&lt;/span&gt;\n\n&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;span style=&quot;line-height: 32px;&quot;&gt;假如有一个Action类中定义一个名为user的对象,为User类型,而User类型有name和password两个属性,假如前台给你传过来的对象是一个字符串:user=leilei:helloworld这个时候 你就需要自己定义类型转换器,从字符串中解析出想要的东西,生成相应的User类型的对象.再比如前台跟你传过来的是user.name=&amp;quot;&amp;quot;和use.password=&amp;quot;&amp;#39;这种格式,这是给你传过来的一个user对象,如果你要给别的地方传一个String类型的对象,这个时候你也要进行类型转换,转换成String对象.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size: 20px; line-height: 32px;&quot;&gt;自定义的类型转换器,要求实现DefaultTypeConverter类后重写其中的convertvalue方法或者实现StrutsTypeConverter类重写ConvertToString(Map content, Object value) 和convertFromString(Map content, String [] value, Class toType)方法.&lt;/span&gt;\n</code></pre><div><br>    <span style=\"font-size: 20px; line-height: 32px;\">类型转换器定义好之后,还需要注册类型转换器,注册类型转换器有局部和全局两种.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">局部类型转换器:局部类型转换器要写在资源文件里,资源文件的命名规则是ActionName-conversion.properties,文件内容的格式为:对象名=相应的转换类的名字.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">全局类型转换器:在xwork-conversion.properties(此文件在class类的加载路径下),文件内容的格式和局部的内容格式是相同的.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">如果在Action中用到了集合类,而集合类的泛型没有明确指出,则需要在相应的Action-conversion.properties中配置,List类型的参数格式为Element_类型名=相应的类型定义类</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">Map类型的参数格式为Key_&lt;MapPropName&gt;=&lt;key<em>type&gt; Element</em>&lt;MapPropName&gt;=&lt;key_type&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">如果在类型转换中出现类型转换错误,则会返回一个input字符串,进入input的视图,在input视图中可以通过&lt;s:filederror /&gt;打印出错误信息,如果想更改这个信息的格式可以在资源文件中设置xwork.default.invalid.fieldvalue值.如果想对某一字段转换失败的错误消息作出更改,可在相应的Action的资源文件中配置invalid.fieldvalue.&lt;propName&gt;=&lt;tipMsg&gt;.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">接下来谈一下字段校验,字段校验是指某个字段必须满足某些条件,否则就要转发到input视图,编写校验规则一般要通过配置相应的xml文件实现,文件名为Action名-validation.xml名,validation的格式书写可以分为字段式的校验和非字段式的校验,字段式的校验格式:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;valiators&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;&lt;fieldName=&quot;name&quot; &gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &lt;fileld-validator type=&quot;type&quot;&gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;param name=&quot;条件&#39;&gt;条件&lt;/param&gt;(可以有多个)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;message key=&quot;国际化提示消息&quot;&gt;如果校验错误,就输出这个信息&lt;/message&gt;(这个是必须的)</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/field-validator&gt;&nbsp;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;field-validator type=&quot;&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; ………..</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &nbsp;&lt;/field-validator&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp; &nbsp; &nbsp;&lt;/fieldName&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/valiators&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">客户端校验:在&lt;s:form中设置 validate=&quot;true&quot; &gt;但是这样之后这个界面不能直接访问,否则会报错,必须通过其它的界面进行转发.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">除了字段校验风格的校验器还有非字段校验风格的校验器.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;validators&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;validator&nbsp;type=&quot;&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;filelName&quot;&gt;字段的名字&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp;&lt;param name=&quot;参数名&quot;&gt;参数值&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp; &nbsp;…</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;message key=&quot;国际化消息&quot;&gt;..&lt;/message&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&lt;/validator-type&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">短路校验:是指对于一个字段如果有多个校验条件,第一个校验规则不满足的时候会输出消息,阻止后面的校验输出消息.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">设置格式是:在&lt;filed-name short-circuit=&quot;true&quot; &gt; 和&lt;validator short-circuit=&quot;true&quot; &gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">校验文件的搜索规则:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActonName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;SuperActionName&gt;-&lt;MethodName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;ActionName&gt;-&lt;methodName&gt;-validation.xml</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">规则是:从上往下搜索,但是下面的会覆盖上面的,所有的xml文件都加载.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">除了以上配置xml校验外,还有基于注解的校验,和手动完成输入校验.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">手动完成的输入校验,需要重写Action中的validate方法,或者重写validateXxx方法.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">输入校验的步骤:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(1)类型转换器对字符串进行解析,将字符串解析成相应的对象形式</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(2)如果在解析过程中出现异常,conversionError拦截器将错误信息封装到FieldError里,然后执行第3步,;如果没有错误,直接执行第3步.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(3)使用struts2配置的校验器进行输入校验</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(4)通过反射调用validteXxx方法</span><br></div>\n\n<div><br>    <a href=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏.png\"><img src=\"http://www.dreamleilei.com/wordpress/wp-content/uploads/2015/07/2015-07-26-231115-的截屏-300x82.png\" alt=\"2015-07-26 23:11:15 的截屏\"></a><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">(6)如果以上都没有出现fieldError,调用Action里处理用户请求的方法,如果有fieldError,系统将转入input视图资源.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">利用struts2实现文件的上传</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">在strust包中,org.apache.struts.default.properties中有这样几行:你会发现这样一行</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">struts.multipart.parser=jakarta</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">说明struts2的解析器是用到jakarta</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">然后你需要额外引入common-io-2.2.jar和commons-fieldupload-1.3.1.jar</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">文件上传中用到struts标签库中的一个标签&lt;s:file &gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">然后需要配置相应的action:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">需要额外配置三个参数:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">File xxx;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">String xxxContentType;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">String xxxFileName;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">这三个参数由上传的File给指定,xxx代表这File的name,然后在action中配置好存储路径,实现好文件的复制即可.</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">实现文件下载:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">配置Action:需要一个方法返回类型为InputStream 方法名为getXxxx(),然后实现下载只需要配置相应的action即可.</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;action&gt;的配置:</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;result type=&quot;stream&quot;&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &nbsp; &lt;param name =&quot;inputName&#39; &gt;xxxx(和上面的返回的InputStream的方法名相对应)&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp; &lt;param name=&quot;contentType&quot;&gt;&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&nbsp;&nbsp;&lt;param name=&quot;contentDisposition&quot; /&gt;下载的文件名&lt;/param&gt;</span><br></div>\n\n<div><br>    <span style=\"font-size: 20px; line-height: 32px;\">&lt;param name=&quot;bufferSize&quot;&gt;下载缓冲区大小&lt;/param&gt;</span><br></div>\n\n<div><br>    &nbsp;<br></div>\n\n<div><br>    &nbsp;<br></div>\n"},{"title":"Test","id":"6","date":"2015-04-15T19:42:02.000Z","_content":"\n安装完wordpress,测试一下","source":"_posts/test-1.md","raw":"---\ntitle: Test\nid: 6\ncategories:\n  - 博客测试\ndate: 2015-04-16 03:42:02\ntags:\n---\n\n安装完wordpress,测试一下","slug":"test-1","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29r200302smaugxjlhna","content":"<p>安装完wordpress,测试一下</p>\n","excerpt":"","more":"<p>安装完wordpress,测试一下</p>\n"},{"title":"struts2实现rest","id":"223","date":"2015-12-08T23:11:24.000Z","_content":"\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的</span>[<span style=\"font-size: 20px;\">软酷网</span>](http://korent.dreamleilei.com)<span style=\"font-size: 20px;\">重构,把后天重构成rest格式的,试着用了一下strus2的rest插件.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先说明一下什么是rest.&nbsp;</span>[<span style=\"font-size: 20px;\">rest介绍</span>](http://www.ruanyifeng.com/blog/2011/09/restful.html)<span style=\"font-size: 20px;\"> 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth)\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定</span>\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;Source Code Pro&#39;;font-size:16pt;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.class&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;\n&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.prefixMapping&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;/rest:rest,:struts&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;</span></span></pre>\n\n<span style=\"font-size: 20px;\">即可让config-browser生效.</span>\n\n<span style=\"font-size: 20px;\">上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp; &nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;参考链接:&nbsp;[http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html](http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html)\n</span>","source":"_posts/struts2-e5-ae-9e-e7-8e-b0rest.md","raw":"---\ntitle: struts2实现rest\nid: 223\ncategories:\n  - struts2\ndate: 2015-12-09 07:11:24\ntags:\n    - struts2\n    - Rest\n---\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的</span>[<span style=\"font-size: 20px;\">软酷网</span>](http://korent.dreamleilei.com)<span style=\"font-size: 20px;\">重构,把后天重构成rest格式的,试着用了一下strus2的rest插件.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先说明一下什么是rest.&nbsp;</span>[<span style=\"font-size: 20px;\">rest介绍</span>](http://www.ruanyifeng.com/blog/2011/09/restful.html)<span style=\"font-size: 20px;\"> 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth)\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻.\n</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定</span>\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;Source Code Pro&#39;;font-size:16pt;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.class&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;\n&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.prefixMapping&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;/rest:rest,:struts&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;</span></span></pre>\n\n<span style=\"font-size: 20px;\">即可让config-browser生效.</span>\n\n<span style=\"font-size: 20px;\">上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射.</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp; &nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法</span>\n\n<span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;参考链接:&nbsp;[http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html](http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html)\n</span>","slug":"struts2-e5-ae-9e-e7-8e-b0rest","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29r500342smaq9fo0cdx","content":"<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的</span><a href=\"http://korent.dreamleilei.com\" target=\"_blank\" rel=\"external\"><span style=\"font-size: 20px;\">软酷网</span></a><span style=\"font-size: 20px;\">重构,把后天重构成rest格式的,试着用了一下strus2的rest插件.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先说明一下什么是rest.&nbsp;</span><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"external\"><span style=\"font-size: 20px;\">rest介绍</span></a><span style=\"font-size: 20px;\"> 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth)<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定</span></p>\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;Source Code Pro&#39;;font-size:16pt;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.class&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;\n&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.prefixMapping&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;/rest:rest,:struts&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;</span></span></pre>\n\n<p><span style=\"font-size: 20px;\">即可让config-browser生效.</span></p>\n<p><span style=\"font-size: 20px;\">上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp; &nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;参考链接:&nbsp;<a href=\"http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html</a><br></span></p>\n","excerpt":"","more":"<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 这学期跟着学长做了一个基于rest架构的php应用,学习了rest架构,便想着可以把之前自己做过的</span><a href=\"http://korent.dreamleilei.com\"><span style=\"font-size: 20px;\">软酷网</span></a><span style=\"font-size: 20px;\">重构,把后天重构成rest格式的,试着用了一下strus2的rest插件.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先说明一下什么是rest.&nbsp;</span><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\"><span style=\"font-size: 20px;\">rest介绍</span></a><span style=\"font-size: 20px;\"> 个人理解rest 是一种思想,通过实现这种思想进行web端的架构,可以真正的实现前后端完全的分离,实现前端不必理会后台用什么语言实现,只需要知道相应的接口即可,而后台更不用管视图页面使如何展现的,只需要按照相应的规则,返回数据即可.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重构的想法是想把前端完全不用jsp.都用html,前端通过ajax请求来获取相应的数据,后端对所有的请求统一返回json.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而用户的登录想用web token来实现(暂时没有思路),但是用php的laravel框架做过相应的例子(JWAuth)<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最初的网站用struts2作为controller层,实现rest架构,引入struts2-rest 和struts2-convention两个jar包,然后在struts.xml中进行 配置即可,进行相应配置的博文,网上搜一下一大堆,就不再墨迹,在这里罗列一下遇到的问题和要注意的事项.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先:版本的问题,因为struts2的版本太低,低于了struts2的2.1.16版本,结果在RequestUtil的类中找不到getUri方法,导致了无法正常web应用,后来花了好久的时间才找到原因,原来getUri方法,是2.1.16之后新增的方法,将struts2的版本设置成高版本之后,web应用可以正常运行.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在struts2的约定中默认只会搜索后缀为Action的类作为Action,这个时候可以修改struts2.convention.suffix的值来指定Action的后缀,还可以通过制定struts2.convention.action.packages这个类来指定除了默认的包搜索Action类以外还要在哪些包下搜寻(记得要从根路径下开始写起),这个要和struts2.convention.action.pacakge.locators区别开来前者制定的是除了后者之外还要在的包下搜寻.<br></span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当strus2-rest和struts2-browser包用的时候,struts2-browser就会失效,这个时候,在struts.xml中制定</span></p>\n<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;Source Code Pro&#39;;font-size:16pt;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.class&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;\n&lt;constant </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">name</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;struts.mapper.prefixMapping&quot; </span><span style=\"font-size: 20px; color: rgb(186, 186, 186);\">value</span><span style=\"font-size: 20px; color: rgb(165, 194, 97);\">=&quot;/rest:rest,:struts&quot; </span><span style=\"font-size: 20px; color: rgb(232, 191, 106);\">/&gt;</span></span></pre>\n\n<p><span style=\"font-size: 20px;\">即可让config-browser生效.</span></p>\n<p><span style=\"font-size: 20px;\">上面两句话的意思是使用访问空间映射,所有命名空间为/rest的都用rest格式映射,所有根命名空间用struts映射.</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp; &nbsp; struts-rest 不支持原生的put和delete请求,网上有相应的解决办法</span></p>\n<p><span style=\"font-size: 20px;\">&nbsp;&nbsp;&nbsp;&nbsp;参考链接:&nbsp;<a href=\"http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html\">http://www.cnblogs.com/yjmyzz/p/struts2-rest-plugin-advanced-usage.html</a><br></span></p>\n"},{"title":"test","date":"2016-06-20T15:59:15.000Z","_content":"\n# 这是第一次用hexo写博客\n## 好紧张\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2016-06-20 23:59:15\ntags: test\n---\n\n# 这是第一次用hexo写博客\n## 好紧张\n","slug":"test","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29r700372sma45i6zuib","content":"<h1 id=\"这是第一次用hexo写博客\"><a href=\"#这是第一次用hexo写博客\" class=\"headerlink\" title=\"这是第一次用hexo写博客\"></a>这是第一次用hexo写博客</h1><h2 id=\"好紧张\"><a href=\"#好紧张\" class=\"headerlink\" title=\"好紧张\"></a>好紧张</h2>","excerpt":"","more":"<h1 id=\"这是第一次用hexo写博客\"><a href=\"#这是第一次用hexo写博客\" class=\"headerlink\" title=\"这是第一次用hexo写博客\"></a>这是第一次用hexo写博客</h1><h2 id=\"好紧张\"><a href=\"#好紧张\" class=\"headerlink\" title=\"好紧张\"></a>好紧张</h2>"},{"title":"test","date":"2018-03-16T06:23:33.000Z","_content":"","source":"_posts/test-2.md","raw":"---\ntitle: test\ndate: 2018-03-16 14:23:33\ntags:\n---\n","slug":"test-2","published":1,"updated":"2018-03-16T06:23:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29ra003c2smapya46tmp","content":"","excerpt":"","more":""},{"title":"TestMusic","id":"4","date":"2015-04-16T22:38:09.000Z","_content":"\n添加wp-player实现播放音乐\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t[player autoplay=\"1\"]","source":"_posts/testmusic.md","raw":"---\ntitle: TestMusic\nid: 4\ncategories:\n  - 博客测试\n  - 未分类\ndate: 2015-04-17 06:38:09\ntags:\n---\n\n添加wp-player实现播放音乐\n\n\t&nbsp;\n\n\t&nbsp;\n\n\t[player autoplay=\"1\"]","slug":"testmusic","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rc003e2sma2xebved3","content":"<p>添加wp-player实现播放音乐</p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp;\n\n[player autoplay=&quot;1&quot;]\n</code></pre>","excerpt":"","more":"<p>添加wp-player实现播放音乐</p>\n<pre><code>&amp;nbsp;\n\n&amp;nbsp;\n\n[player autoplay=&quot;1&quot;]\n</code></pre>"},{"title":"WordPress搭建个人博客","id":"37","date":"2015-04-19T07:05:39.000Z","_content":"\n# \n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">刚刚用wordpress成功的搭建了自己的个人博客主页,分享一下</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">条件:虚拟主机+域名</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">首先你要有一个独立的空间,比如你可以申请万网的虚拟主机或者申请一个虚拟的云服务器之类的,总之你需要有一个空间放wodrpess,本人使用的万网提供的虚拟主机,小伙伴们如果也想要申请一下的话可以登录到_**http://www.net.cn/hosting/free/**_&nbsp;来申请自己的个人虚拟空间(不过每个人申请一个免费的,而且期限只有一年),申请的过程也不是太繁琐,就是需要各种拍照,各种认证.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">申请到虚拟主机之后登录到万网查看自己的主机信息,大约如下</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">[![test](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test-300x109.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test.png)</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">以后你就可以通过ftp登陆到相应的站点管理自己的空间了,有了这个之后,你去网上下载一个wordpress的压缩包,用ftp 上传到你的htdocs目录下,然后在万网登录自己的空间,解压一下,然后安装wordpress(网上教程和博文好多,此处不再重复),记得我当时遇到的问题是数据库的登录地址,不要填localhost要填万网提供的那个域名.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">安装完成后,你需要将自己的域名解析到自己的虚拟主机的ip,你可以在dns.la网站上设置免费的域名解析服务,我在这里不再啰嗦.</span></span>\n\n## \n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">分享一下安装完wordpress后做的几件事:</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">首先安装主题,主题有好多,你可以根据自己的喜好选择你所喜欢的主题.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">然后安装一些必要的插件.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">然后完善一下自己的资料啥的.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">我安装的插件:</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">FCEditor 一款不错的文本编辑插件,让你的编辑更加得心应手.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">wp-player 为了让自己得博客更加炫酷,可以实现博客中添加音乐的功能,具体的安装操作网上也有比较详细的教程.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">simple local avatars 这个插件可以让你上传自己的头像.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">为了让自己得首页更加的多彩,我还条件了新浪微博的挂件,和虾米音乐.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">新浪微博的挂件安装方法:http://app.weibo.com/tool/weiboshow在新浪微博的小工具里找到微博秀,然后他会给你提供HTML的代码,在wordpress的自定义,小工具里添加文本然后粘贴相应的HTML代码,即可实现新浪微博的挂件功能.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">虾米音乐的实现方法:登录虾米音乐的官方网站,然后搜索到o歌曲后点击more选择ai转帖到其它网站g同样也会得到一段HTML代码,根据以上类似的方法就可以实现首页的音乐播放器.</span></span>\n","source":"_posts/wordpress-e6-90-ad-e5-bb-ba-e4-b8-aa-e4-ba-ba-e5-8d-9a-e5-ae-a2.md","raw":"---\ntitle: WordPress搭建个人博客\nid: 37\ncategories:\n  - 博客搭建\ndate: 2015-04-19 15:05:39\ntags:\n    - 博客\n---\n\n# \n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">刚刚用wordpress成功的搭建了自己的个人博客主页,分享一下</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">条件:虚拟主机+域名</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">首先你要有一个独立的空间,比如你可以申请万网的虚拟主机或者申请一个虚拟的云服务器之类的,总之你需要有一个空间放wodrpess,本人使用的万网提供的虚拟主机,小伙伴们如果也想要申请一下的话可以登录到_**http://www.net.cn/hosting/free/**_&nbsp;来申请自己的个人虚拟空间(不过每个人申请一个免费的,而且期限只有一年),申请的过程也不是太繁琐,就是需要各种拍照,各种认证.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">申请到虚拟主机之后登录到万网查看自己的主机信息,大约如下</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">[![test](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test-300x109.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test.png)</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">以后你就可以通过ftp登陆到相应的站点管理自己的空间了,有了这个之后,你去网上下载一个wordpress的压缩包,用ftp 上传到你的htdocs目录下,然后在万网登录自己的空间,解压一下,然后安装wordpress(网上教程和博文好多,此处不再重复),记得我当时遇到的问题是数据库的登录地址,不要填localhost要填万网提供的那个域名.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">安装完成后,你需要将自己的域名解析到自己的虚拟主机的ip,你可以在dns.la网站上设置免费的域名解析服务,我在这里不再啰嗦.</span></span>\n\n## \n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">分享一下安装完wordpress后做的几件事:</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">首先安装主题,主题有好多,你可以根据自己的喜好选择你所喜欢的主题.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">然后安装一些必要的插件.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">然后完善一下自己的资料啥的.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">我安装的插件:</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">FCEditor 一款不错的文本编辑插件,让你的编辑更加得心应手.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">wp-player 为了让自己得博客更加炫酷,可以实现博客中添加音乐的功能,具体的安装操作网上也有比较详细的教程.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">simple local avatars 这个插件可以让你上传自己的头像.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">为了让自己得首页更加的多彩,我还条件了新浪微博的挂件,和虾米音乐.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">新浪微博的挂件安装方法:http://app.weibo.com/tool/weiboshow在新浪微博的小工具里找到微博秀,然后他会给你提供HTML的代码,在wordpress的自定义,小工具里添加文本然后粘贴相应的HTML代码,即可实现新浪微博的挂件功能.</span></span>\n\n\t<span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">虾米音乐的实现方法:登录虾米音乐的官方网站,然后搜索到o歌曲后点击more选择ai转帖到其它网站g同样也会得到一段HTML代码,根据以上类似的方法就可以实现首页的音乐播放器.</span></span>\n","slug":"wordpress-e6-90-ad-e5-bb-ba-e4-b8-aa-e4-ba-ba-e5-8d-9a-e5-ae-a2","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29re003i2sma1aho5ykq","content":"<p>#<br>    <span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">刚刚用wordpress成功的搭建了自己的个人博客主页,分享一下</span></span></p>\n<pre><code>&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;条件:虚拟主机+域名&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先你要有一个独立的空间,比如你可以申请万网的虚拟主机或者申请一个虚拟的云服务器之类的,总之你需要有一个空间放wodrpess,本人使用的万网提供的虚拟主机,小伙伴们如果也想要申请一下的话可以登录到_**http://www.net.cn/hosting/free/**_&amp;nbsp;来申请自己的个人虚拟空间(不过每个人申请一个免费的,而且期限只有一年),申请的过程也不是太繁琐,就是需要各种拍照,各种认证.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;申请到虚拟主机之后登录到万网查看自己的主机信息,大约如下&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;[![test](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test-300x109.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test.png)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;以后你就可以通过ftp登陆到相应的站点管理自己的空间了,有了这个之后,你去网上下载一个wordpress的压缩包,用ftp 上传到你的htdocs目录下,然后在万网登录自己的空间,解压一下,然后安装wordpress(网上教程和博文好多,此处不再重复),记得我当时遇到的问题是数据库的登录地址,不要填localhost要填万网提供的那个域名.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;安装完成后,你需要将自己的域名解析到自己的虚拟主机的ip,你可以在dns.la网站上设置免费的域名解析服务,我在这里不再啰嗦.&lt;/span&gt;&lt;/span&gt;\n</code></pre><p>##<br>    <span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">分享一下安装完wordpress后做的几件事:</span></span></p>\n<pre><code>&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先安装主题,主题有好多,你可以根据自己的喜好选择你所喜欢的主题.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后安装一些必要的插件.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后完善一下自己的资料啥的.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;我安装的插件:&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;FCEditor 一款不错的文本编辑插件,让你的编辑更加得心应手.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;wp-player 为了让自己得博客更加炫酷,可以实现博客中添加音乐的功能,具体的安装操作网上也有比较详细的教程.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;simple local avatars 这个插件可以让你上传自己的头像.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;为了让自己得首页更加的多彩,我还条件了新浪微博的挂件,和虾米音乐.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;新浪微博的挂件安装方法:http://app.weibo.com/tool/weiboshow在新浪微博的小工具里找到微博秀,然后他会给你提供HTML的代码,在wordpress的自定义,小工具里添加文本然后粘贴相应的HTML代码,即可实现新浪微博的挂件功能.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;虾米音乐的实现方法:登录虾米音乐的官方网站,然后搜索到o歌曲后点击more选择ai转帖到其它网站g同样也会得到一段HTML代码,根据以上类似的方法就可以实现首页的音乐播放器.&lt;/span&gt;&lt;/span&gt;\n</code></pre>","excerpt":"","more":"<p>#<br>    <span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">刚刚用wordpress成功的搭建了自己的个人博客主页,分享一下</span></span></p>\n<pre><code>&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;条件:虚拟主机+域名&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先你要有一个独立的空间,比如你可以申请万网的虚拟主机或者申请一个虚拟的云服务器之类的,总之你需要有一个空间放wodrpess,本人使用的万网提供的虚拟主机,小伙伴们如果也想要申请一下的话可以登录到_**http://www.net.cn/hosting/free/**_&amp;nbsp;来申请自己的个人虚拟空间(不过每个人申请一个免费的,而且期限只有一年),申请的过程也不是太繁琐,就是需要各种拍照,各种认证.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;申请到虚拟主机之后登录到万网查看自己的主机信息,大约如下&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;[![test](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test-300x109.png)](http://leilei.lezifang.cn/wordpress/wp-content/uploads/2015/04/test.png)&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;以后你就可以通过ftp登陆到相应的站点管理自己的空间了,有了这个之后,你去网上下载一个wordpress的压缩包,用ftp 上传到你的htdocs目录下,然后在万网登录自己的空间,解压一下,然后安装wordpress(网上教程和博文好多,此处不再重复),记得我当时遇到的问题是数据库的登录地址,不要填localhost要填万网提供的那个域名.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;安装完成后,你需要将自己的域名解析到自己的虚拟主机的ip,你可以在dns.la网站上设置免费的域名解析服务,我在这里不再啰嗦.&lt;/span&gt;&lt;/span&gt;\n</code></pre><p>##<br>    <span style=\"font-size:18px;\"><span style=\"font-family:arial,helvetica,sans-serif;\">分享一下安装完wordpress后做的几件事:</span></span></p>\n<pre><code>&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;首先安装主题,主题有好多,你可以根据自己的喜好选择你所喜欢的主题.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后安装一些必要的插件.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;然后完善一下自己的资料啥的.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;我安装的插件:&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;FCEditor 一款不错的文本编辑插件,让你的编辑更加得心应手.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;wp-player 为了让自己得博客更加炫酷,可以实现博客中添加音乐的功能,具体的安装操作网上也有比较详细的教程.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;simple local avatars 这个插件可以让你上传自己的头像.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;为了让自己得首页更加的多彩,我还条件了新浪微博的挂件,和虾米音乐.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;新浪微博的挂件安装方法:http://app.weibo.com/tool/weiboshow在新浪微博的小工具里找到微博秀,然后他会给你提供HTML的代码,在wordpress的自定义,小工具里添加文本然后粘贴相应的HTML代码,即可实现新浪微博的挂件功能.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;span style=&quot;font-family:arial,helvetica,sans-serif;&quot;&gt;虾米音乐的实现方法:登录虾米音乐的官方网站,然后搜索到o歌曲后点击more选择ai转帖到其它网站g同样也会得到一段HTML代码,根据以上类似的方法就可以实现首页的音乐播放器.&lt;/span&gt;&lt;/span&gt;\n</code></pre>"},{"title":"test1","date":"2016-06-20T16:47:26.000Z","_content":"adfa\n","source":"_posts/test1.md","raw":"---\ntitle: test1\ndate: 2016-06-21 00:47:26\ntags:\n---\nadfa\n","slug":"test1","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rf003j2smauo29xjd6","content":"<p>adfa</p>\n","excerpt":"","more":"<p>adfa</p>\n"},{"title":"代理和vpn的区别","date":"2016-06-25T12:54:12.000Z","_content":"\n之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷\n用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。\n\n## VPN\n\n### VPN的简单介绍\n首先看一下**VPN**的维基百科:\n![VPN](http://blogpicture.dreamleilei.com/blog-vpn-wiki.png)\n\nVPN : *Virtual Private Network*，是私人网络的通信方法。之前可以通过VPN进行蕃蔷\n\n构建VPN的几种方式的比较\n常见的VPN链有pptp,l2tp,openvpn\n具体的介绍可以参见以下链接:\n> [http://www.gxbay.com/1559.html](http://www.gxbay.com/1559.html)\n\n### VPN的蕃蔷原理\n &nbsp;&nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器\n（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统\n中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，\n可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止\n一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？\n&nbsp;&nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡\n进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器\n再帮你把数据流转向到真正的目的地。\n  &nbsp;&nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，\n  GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器\n  ，无形中就能达到翻墙的效果。\n  \n## 代理\n\n代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome\n插件下的switchsharp等\n\n### 正向代理\n简而言之，就是代替客户端去做某些事情。\n举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么\n办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交\n给你，这个时候你的兄弟就是正向代理。\n\n### 反向代理\n反向代理就是代理服务器的行为ie。\n还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好\n兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你\n要买东西而不是他买东西。\n\n在写博客的时候，室友说了一句特别经典的话:\n> 正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。\n\n## 参考链接\n> [http://www.gxbay.com/1559.html](http://www.gxbay.com/1559.html)\n> [http://wenda.chinabaike.com/b/38322/2013/1208/713383.html](http://wenda.chinabaike.com/b/38322/2013/1208/713383.html)\n> [http://jingpin.org/proxy-ssh-vpn](http://jingpin.org/proxy-ssh-vpn)\n> [https://www.zhihu.com/question/25143289](https://www.zhihu.com/question/25143289)\n> [https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html](https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html)\n> [https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA](https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA)\n> [http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/](http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/)\n","source":"_posts/代理和vpn的区别.md","raw":"---\ntitle: 代理和vpn的区别\ndate: 2016-06-25 20:54:12\ntags:\n - vpn\n - 代理\ncategories:\n - 折腾\n---\n\n之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷\n用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。\n\n## VPN\n\n### VPN的简单介绍\n首先看一下**VPN**的维基百科:\n![VPN](http://blogpicture.dreamleilei.com/blog-vpn-wiki.png)\n\nVPN : *Virtual Private Network*，是私人网络的通信方法。之前可以通过VPN进行蕃蔷\n\n构建VPN的几种方式的比较\n常见的VPN链有pptp,l2tp,openvpn\n具体的介绍可以参见以下链接:\n> [http://www.gxbay.com/1559.html](http://www.gxbay.com/1559.html)\n\n### VPN的蕃蔷原理\n &nbsp;&nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器\n（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统\n中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，\n可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止\n一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？\n&nbsp;&nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡\n进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器\n再帮你把数据流转向到真正的目的地。\n  &nbsp;&nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，\n  GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器\n  ，无形中就能达到翻墙的效果。\n  \n## 代理\n\n代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome\n插件下的switchsharp等\n\n### 正向代理\n简而言之，就是代替客户端去做某些事情。\n举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么\n办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交\n给你，这个时候你的兄弟就是正向代理。\n\n### 反向代理\n反向代理就是代理服务器的行为ie。\n还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好\n兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你\n要买东西而不是他买东西。\n\n在写博客的时候，室友说了一句特别经典的话:\n> 正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。\n\n## 参考链接\n> [http://www.gxbay.com/1559.html](http://www.gxbay.com/1559.html)\n> [http://wenda.chinabaike.com/b/38322/2013/1208/713383.html](http://wenda.chinabaike.com/b/38322/2013/1208/713383.html)\n> [http://jingpin.org/proxy-ssh-vpn](http://jingpin.org/proxy-ssh-vpn)\n> [https://www.zhihu.com/question/25143289](https://www.zhihu.com/question/25143289)\n> [https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html](https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html)\n> [https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA](https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA)\n> [http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/](http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/)\n","slug":"代理和vpn的区别","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rk003o2sma1tx87nk6","content":"<p>之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷<br>用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。</p>\n<h2 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h2><h3 id=\"VPN的简单介绍\"><a href=\"#VPN的简单介绍\" class=\"headerlink\" title=\"VPN的简单介绍\"></a>VPN的简单介绍</h3><p>首先看一下<strong>VPN</strong>的维基百科:<br><img src=\"http://blogpicture.dreamleilei.com/blog-vpn-wiki.png\" alt=\"VPN\"></p>\n<p>VPN : <em>Virtual Private Network</em>，是私人网络的通信方法。之前可以通过VPN进行蕃蔷</p>\n<p>构建VPN的几种方式的比较<br>常见的VPN链有pptp,l2tp,openvpn<br>具体的介绍可以参见以下链接:</p>\n<blockquote>\n<p><a href=\"http://www.gxbay.com/1559.html\" target=\"_blank\" rel=\"external\">http://www.gxbay.com/1559.html</a></p>\n</blockquote>\n<h3 id=\"VPN的蕃蔷原理\"><a href=\"#VPN的蕃蔷原理\" class=\"headerlink\" title=\"VPN的蕃蔷原理\"></a>VPN的蕃蔷原理</h3><p> &nbsp;&nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器<br>（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统<br>中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，<br>可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止<br>一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？<br>&nbsp;&nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡<br>进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器<br>再帮你把数据流转向到真正的目的地。<br>  &nbsp;&nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，<br>  GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器<br>  ，无形中就能达到翻墙的效果。</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome<br>插件下的switchsharp等</p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>简而言之，就是代替客户端去做某些事情。<br>举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么<br>办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交<br>给你，这个时候你的兄弟就是正向代理。</p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>反向代理就是代理服务器的行为ie。<br>还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好<br>兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你<br>要买东西而不是他买东西。</p>\n<p>在写博客的时候，室友说了一句特别经典的话:</p>\n<blockquote>\n<p>正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。</p>\n</blockquote>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.gxbay.com/1559.html\" target=\"_blank\" rel=\"external\">http://www.gxbay.com/1559.html</a><br><a href=\"http://wenda.chinabaike.com/b/38322/2013/1208/713383.html\" target=\"_blank\" rel=\"external\">http://wenda.chinabaike.com/b/38322/2013/1208/713383.html</a><br><a href=\"http://jingpin.org/proxy-ssh-vpn\" target=\"_blank\" rel=\"external\">http://jingpin.org/proxy-ssh-vpn</a><br><a href=\"https://www.zhihu.com/question/25143289\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/25143289</a><br><a href=\"https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html\" target=\"_blank\" rel=\"external\">https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html</a><br><a href=\"https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA\" target=\"_blank\" rel=\"external\">https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA</a><br><a href=\"http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/\" target=\"_blank\" rel=\"external\">http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/</a></p>\n</blockquote>\n","excerpt":"","more":"<p>之前理解的VPN是为了实现连接到某个局域网内而使用的技术，而代理是为了蕃蔷<br>用的，后来 经过查找资料还是发现自己的理解还是太片面不够全面。</p>\n<h2 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h2><h3 id=\"VPN的简单介绍\"><a href=\"#VPN的简单介绍\" class=\"headerlink\" title=\"VPN的简单介绍\"></a>VPN的简单介绍</h3><p>首先看一下<strong>VPN</strong>的维基百科:<br><img src=\"http://blogpicture.dreamleilei.com/blog-vpn-wiki.png\" alt=\"VPN\"></p>\n<p>VPN : <em>Virtual Private Network</em>，是私人网络的通信方法。之前可以通过VPN进行蕃蔷</p>\n<p>构建VPN的几种方式的比较<br>常见的VPN链有pptp,l2tp,openvpn<br>具体的介绍可以参见以下链接:</p>\n<blockquote>\n<p><a href=\"http://www.gxbay.com/1559.html\">http://www.gxbay.com/1559.html</a></p>\n</blockquote>\n<h3 id=\"VPN的蕃蔷原理\"><a href=\"#VPN的蕃蔷原理\" class=\"headerlink\" title=\"VPN的蕃蔷原理\"></a>VPN的蕃蔷原理</h3><p> &nbsp;&nbsp; 用VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器<br>（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统<br>中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，<br>可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止<br>一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？<br>&nbsp;&nbsp; 为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡<br>进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器<br>再帮你把数据流转向到真正的目的地。<br>  &nbsp;&nbsp; 前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，<br>  GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的VPN服务器<br>  ，无形中就能达到翻墙的效果。</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>代理一般都是局部的代理,我了解过的代理有http代理和sockets代理，例如chrome<br>插件下的switchsharp等</p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>简而言之，就是代替客户端去做某些事情。<br>举个例子：你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候呢你又不想去买饭，因为太懒了，这个时候怎么<br>办呢，我找个好的哥们去买东西，让他帮你去买东西，店主知道买东西的是他，而不是你，他把东西买来之后就交<br>给你，这个时候你的兄弟就是正向代理。</p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>反向代理就是代理服务器的行为ie。<br>还是举个例子:你撸码撸到很晚了特别饿了，想去吃饭，但是这个时候你还是想去买饭，这个时候你又想起了你的好<br>兄弟了，这次他告诉你他就是卖东西的，你把钱给他，他把东西卖给了你，其实他是代理了一些店，店主呢知道是你<br>要买东西而不是他买东西。</p>\n<p>在写博客的时候，室友说了一句特别经典的话:</p>\n<blockquote>\n<p>正向代理就是内网访问外网的时候用到的，反向代理就是外网访问内网的时候用到的。想想这句话也不无道理。</p>\n</blockquote>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.gxbay.com/1559.html\">http://www.gxbay.com/1559.html</a><br><a href=\"http://wenda.chinabaike.com/b/38322/2013/1208/713383.html\">http://wenda.chinabaike.com/b/38322/2013/1208/713383.html</a><br><a href=\"http://jingpin.org/proxy-ssh-vpn\">http://jingpin.org/proxy-ssh-vpn</a><br><a href=\"https://www.zhihu.com/question/25143289\">https://www.zhihu.com/question/25143289</a><br><a href=\"https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html\">https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html</a><br><a href=\"https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA\">https://plus.googleapis.com/+GhostAssassin/posts/c1zb7q6xKMA</a><br><a href=\"http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/\">http://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/</a></p>\n</blockquote>\n"},{"title":"如何把wordpress博客导入到hexo静态博客中","date":"2016-06-24T07:45:09.000Z","_content":"\n\n搭建完**[hexo 博客](http://blog.dreamleilei.com/2016/06/21/createGithubPage/)**之后，准备把之前自己用*wordpress*搭建的博客迁移到\n**hexo**博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy\n然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件\n,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现\n了把wordpress博客迁徙到hexo静态博客中。\n\n## 步骤\n1. 添加**hexo-migrator-wordpress**插件\n ```bash\nnpm install hexo-migrator-wordpress --save\n ```\n2. 把自己的wordpress博客中的文章导出为xml文件\n 在自己的wordpress博客里，找到工具，然后导出格式为xml文件。\n wordpress导出xml文件参考下图:\n![图片](http://blogpicture.dreamleilei.com/blog-my-pic.png)\n\n3. 通过工具把xml文件转换为多个md文件\n```bash\nhexo migrate wordpress wordpress.xml\n```\n\n## 参考链接\n> http://www.chinaz.com/web/2014/0610/354945.shtml\n\n\n    \n","source":"_posts/如何把wordpress博客导入到hexo静态博客中.md","raw":"---\ntitle: 如何把wordpress博客导入到hexo静态博客中\ndate: 2016-06-24 15:45:09\ntags:\n - 博客\n - 博客迁移\n - wordpress\n - hexo\ncategories:\n  - 折腾\n---\n\n\n搭建完**[hexo 博客](http://blog.dreamleilei.com/2016/06/21/createGithubPage/)**之后，准备把之前自己用*wordpress*搭建的博客迁移到\n**hexo**博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy\n然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件\n,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现\n了把wordpress博客迁徙到hexo静态博客中。\n\n## 步骤\n1. 添加**hexo-migrator-wordpress**插件\n ```bash\nnpm install hexo-migrator-wordpress --save\n ```\n2. 把自己的wordpress博客中的文章导出为xml文件\n 在自己的wordpress博客里，找到工具，然后导出格式为xml文件。\n wordpress导出xml文件参考下图:\n![图片](http://blogpicture.dreamleilei.com/blog-my-pic.png)\n\n3. 通过工具把xml文件转换为多个md文件\n```bash\nhexo migrate wordpress wordpress.xml\n```\n\n## 参考链接\n> http://www.chinaz.com/web/2014/0610/354945.shtml\n\n\n    \n","slug":"如何把wordpress博客导入到hexo静态博客中","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rn003q2smame27423d","content":"<p>搭建完<strong><a href=\"http://blog.dreamleilei.com/2016/06/21/createGithubPage/\" target=\"_blank\" rel=\"external\">hexo 博客</a></strong>之后，准备把之前自己用<em>wordpress</em>搭建的博客迁移到<br><strong>hexo</strong>博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy<br>然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件<br>,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现<br>了把wordpress博客迁徙到hexo静态博客中。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>添加<strong>hexo-migrator-wordpress</strong>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-wordpress --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>把自己的wordpress博客中的文章导出为xml文件<br>在自己的wordpress博客里，找到工具，然后导出格式为xml文件。<br>wordpress导出xml文件参考下图:<br><img src=\"http://blogpicture.dreamleilei.com/blog-my-pic.png\" alt=\"图片\"></p>\n</li>\n<li><p>通过工具把xml文件转换为多个md文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate wordpress wordpress.xml</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.chinaz.com/web/2014/0610/354945.shtml\" target=\"_blank\" rel=\"external\">http://www.chinaz.com/web/2014/0610/354945.shtml</a></p>\n</blockquote>\n","excerpt":"","more":"<p>搭建完<strong><a href=\"http://blog.dreamleilei.com/2016/06/21/createGithubPage/\">hexo 博客</a></strong>之后，准备把之前自己用<em>wordpress</em>搭建的博客迁移到<br><strong>hexo</strong>博客中，之前想过其它办法，最无脑的办法，就是把之前的文章，copy<br>然后paste，但是这种做法不适合于大量的文章，我们可以通过hexo的wordpress插件<br>,把之前自己的wordpress博客导出为xml文件，然后通过命令生成md文件，这样就实现<br>了把wordpress博客迁徙到hexo静态博客中。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>添加<strong>hexo-migrator-wordpress</strong>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-wordpress --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>把自己的wordpress博客中的文章导出为xml文件<br>在自己的wordpress博客里，找到工具，然后导出格式为xml文件。<br>wordpress导出xml文件参考下图:<br><img src=\"http://blogpicture.dreamleilei.com/blog-my-pic.png\" alt=\"图片\"></p>\n</li>\n<li><p>通过工具把xml文件转换为多个md文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate wordpress wordpress.xml</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.chinaz.com/web/2014/0610/354945.shtml\">http://www.chinaz.com/web/2014/0610/354945.shtml</a></p>\n</blockquote>\n"},{"title":"实习心得","date":"2017-03-11T02:14:52.000Z","_content":"## 反思\n 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。\n\n  这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。\n \n 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。\n \n 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。\n \n 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！\n","source":"_posts/实习心得.md","raw":"---\ntitle: 实习心得\ndate: 2017-03-11 10:14:52\ntags: 实习\n---\n## 反思\n 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。\n\n  这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。\n \n 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。\n \n 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。\n \n 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！\n","slug":"实习心得","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rp003u2sma3l75nbze","content":"<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p> 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。</p>\n<p>  这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。</p>\n<p> 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。</p>\n<p> 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。</p>\n<p> 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！</p>\n","excerpt":"","more":"<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p> 来百度实习一个月了，这一周自己造成了一个小case，虽然主要责任不在我，但是确实有我的责任，在这里写一遍博客，反思一下，免得以后再犯类似的错误。</p>\n<p>  这次case主要是我负责的某个接口会去调用一个底层的接口，而另一个RD修改了这个接口，导致我这调用接口的时候恒返回一个空值导致case。</p>\n<p> 这件事完全可以避免的。首先在开发阶段，如果我能够注意到这个接口有改动或者注意到各个接口之间的依赖关系，就不会有事故发生。其次在测试环节也确实比较重要，在测试的时候没有对这个功能进行充分的测试，导致到了线上才发现这个问题。</p>\n<p> 除了这个case之外，好像我每次上线都好像有点小问题，总结了一下原因可能是自己太过于着急，往往改动代码的时候没有看清楚这段代码对哪段代码有影响，尤其是一些底层的接口，可能会被外层N多个接口调用。而且每次自己coding玩之后，测试的环节也不够认真，细心（貌似一直做事都不够细心，这个以后要改),如果在测试环节能够认真测试，也能够避免一些事情的发生。</p>\n<p> 事情差不多就这么多，自己还是新人，需要学习的地方还多，以后上线前一定要谨慎！</p>\n"},{"title":"用vim + chrome 实现markdown文章的编写和实时预览","date":"2016-06-25T02:53:54.000Z","_content":"\n# 用vim + chrome 编写markdown格式的文章\n\n## vim-markdown\n\n 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做**[vim-markdown](https://github.com/plasticboy/vim-markdown)**\n 的插件，具体插件的安装方法可以参考[vim-markdown](https://github.com/plasticboy/vim-markdown)\n\n## Markdown Preview Plus\n\n在chrome中安装**Markdown Preview Plus**插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开\nmd文档，实现markdown的预览。\n\n## 参考链接\n\n> [http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html](http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html)\n> [https://github.com/plasticboy/vim-markdown](https://github.com/plasticboy/vim-markdown)\n","source":"_posts/用vim-chrome-实现markdown文章的编写和实时预览.md","raw":"---\ntitle: 用vim + chrome 实现markdown文章的编写和实时预览\ndate: 2016-06-25 10:53:54\ntags:\n - vim\n - markdown\n - 博客\ncategories:\n - 折腾\n---\n\n# 用vim + chrome 编写markdown格式的文章\n\n## vim-markdown\n\n 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做**[vim-markdown](https://github.com/plasticboy/vim-markdown)**\n 的插件，具体插件的安装方法可以参考[vim-markdown](https://github.com/plasticboy/vim-markdown)\n\n## Markdown Preview Plus\n\n在chrome中安装**Markdown Preview Plus**插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开\nmd文档，实现markdown的预览。\n\n## 参考链接\n\n> [http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html](http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html)\n> [https://github.com/plasticboy/vim-markdown](https://github.com/plasticboy/vim-markdown)\n","slug":"用vim-chrome-实现markdown文章的编写和实时预览","published":1,"updated":"2018-03-16T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetl29rr003x2smaczob4bc6","content":"<h1 id=\"用vim-chrome-编写markdown格式的文章\"><a href=\"#用vim-chrome-编写markdown格式的文章\" class=\"headerlink\" title=\"用vim + chrome 编写markdown格式的文章\"></a>用vim + chrome 编写markdown格式的文章</h1><h2 id=\"vim-markdown\"><a href=\"#vim-markdown\" class=\"headerlink\" title=\"vim-markdown\"></a>vim-markdown</h2><p> 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做<strong><a href=\"https://github.com/plasticboy/vim-markdown\" target=\"_blank\" rel=\"external\">vim-markdown</a></strong><br> 的插件，具体插件的安装方法可以参考<a href=\"https://github.com/plasticboy/vim-markdown\" target=\"_blank\" rel=\"external\">vim-markdown</a></p>\n<h2 id=\"Markdown-Preview-Plus\"><a href=\"#Markdown-Preview-Plus\" class=\"headerlink\" title=\"Markdown Preview Plus\"></a>Markdown Preview Plus</h2><p>在chrome中安装<strong>Markdown Preview Plus</strong>插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开<br>md文档，实现markdown的预览。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html\" target=\"_blank\" rel=\"external\">http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html</a><br><a href=\"https://github.com/plasticboy/vim-markdown\" target=\"_blank\" rel=\"external\">https://github.com/plasticboy/vim-markdown</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"用vim-chrome-编写markdown格式的文章\"><a href=\"#用vim-chrome-编写markdown格式的文章\" class=\"headerlink\" title=\"用vim + chrome 编写markdown格式的文章\"></a>用vim + chrome 编写markdown格式的文章</h1><h2 id=\"vim-markdown\"><a href=\"#vim-markdown\" class=\"headerlink\" title=\"vim-markdown\"></a>vim-markdown</h2><p> 为了更好的在vim下编写markdown格式的文章，我们需要安装一个叫做<strong><a href=\"https://github.com/plasticboy/vim-markdown\">vim-markdown</a></strong><br> 的插件，具体插件的安装方法可以参考<a href=\"https://github.com/plasticboy/vim-markdown\">vim-markdown</a></p>\n<h2 id=\"Markdown-Preview-Plus\"><a href=\"#Markdown-Preview-Plus\" class=\"headerlink\" title=\"Markdown Preview Plus\"></a>Markdown Preview Plus</h2><p>在chrome中安装<strong>Markdown Preview Plus</strong>插件，安装完成后需要设置允许文件访问网址,就可以在chrome中打开<br>md文档，实现markdown的预览。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html\">http://www.xiaozhou.net/chrome-vim-and-markdown-2013-08-07.html</a><br><a href=\"https://github.com/plasticboy/vim-markdown\">https://github.com/plasticboy/vim-markdown</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjetl29o400082smarznfqpz8","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29og000d2smayeu4kinq"},{"post_id":"cjetl29nr00042smamneadho4","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29oi000g2smaxjc7vflc"},{"post_id":"cjetl29oe000b2sma7lapqnbn","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29ok000i2smaeml6ha2m"},{"post_id":"cjetl29nx00052sma7e67k3zc","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29on000m2sma37i6g4dc"},{"post_id":"cjetl29o100072sma8insp6fd","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29op000o2smaxyr8dpvc"},{"post_id":"cjetl29oa00092smawbuqzg6w","category_id":"cjetl29om000l2smaepdnt9qq","_id":"cjetl29oz000u2smaqirtsxd9"},{"post_id":"cjetl29ow000s2smaw73q4gp5","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29p7000z2smakxlyrv02"},{"post_id":"cjetl29og000e2smab0y5v4wr","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29p900122sma3tzkwtku"},{"post_id":"cjetl29oj000h2smaulk9qtxx","category_id":"cjetl29p1000w2smaetjqk3pl","_id":"cjetl29pi00192smapavjsrj9"},{"post_id":"cjetl29ol000j2sma5xa8lk1e","category_id":"cjetl29pb00142smarrvtk5b5","_id":"cjetl29pm001f2smav47m3vzo"},{"post_id":"cjetl29pl001e2smaypbswgeh","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29pt001l2smazin86uoy"},{"post_id":"cjetl29on000n2smabe7uq0ws","category_id":"cjetl29pk001c2sma7vjdmxl2","_id":"cjetl29pw001p2smas7hzb7s1"},{"post_id":"cjetl29pq001j2smaym7e9enn","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29py001s2smaanomdctc"},{"post_id":"cjetl29op000p2smak42n9xev","category_id":"cjetl29pp001i2smag3ax4t3w","_id":"cjetl29q1001u2smaqzx6hn7q"},{"post_id":"cjetl29px001q2smaxj0uld6i","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29q4001z2sma8z232ahn"},{"post_id":"cjetl29ox000t2sma4ezr4thg","category_id":"cjetl29pw001o2sma7ujrbdss","_id":"cjetl29q600212smagcrtaj6z"},{"post_id":"cjetl29py001t2smamw7tpe3d","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29qa00252smaijz0vxyv"},{"post_id":"cjetl29q400202smano5bsgkq","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29qe00282smats8ezet4"},{"post_id":"cjetl29p3000x2sma7w2oxu3r","category_id":"cjetl29q2001w2smadd09cqdi","_id":"cjetl29qk002c2smaiz1w8bl5"},{"post_id":"cjetl29qa00272sma3w53gt7s","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29qm002f2smagu6664m1"},{"post_id":"cjetl29qf00292sma5ezhqfa7","category_id":"cjetl29o000062sma6ppv4tgb","_id":"cjetl29qo002j2smajnfkhchk"},{"post_id":"cjetl29pb00152sma4c61bm7n","category_id":"cjetl29qj002b2smanznej1hd","_id":"cjetl29qs002n2sman5i7zz47"},{"post_id":"cjetl29pe00172smalsad3z3a","category_id":"cjetl29qo002i2smai4xa87l7","_id":"cjetl29qw002t2smaapm6hxii"},{"post_id":"cjetl29qu002s2smafpwv6ipb","category_id":"cjetl29pb00142smarrvtk5b5","_id":"cjetl29r1002z2smatpvptgrq"},{"post_id":"cjetl29pi001a2smarudlbcwl","category_id":"cjetl29qs002p2smailof9e9f","_id":"cjetl29r400332smawpxoju6s"},{"post_id":"cjetl29qw002u2sma8iery3ng","category_id":"cjetl29ou000r2smaw691k8v0","_id":"cjetl29r600362sma9hy8ff4u"},{"post_id":"cjetl29pm001g2smavi4egz0z","category_id":"cjetl29qs002p2smailof9e9f","_id":"cjetl29ra003b2smag1mn0ytn"},{"post_id":"cjetl29q2001x2smaytbpzeme","category_id":"cjetl29r9003a2sma7jtephy8","_id":"cjetl29rh003k2sma94kbvm64"},{"post_id":"cjetl29q600222sma8cuyzx5m","category_id":"cjetl29rd003h2smafvgnlevd","_id":"cjetl29rp003s2smas852s8ys"},{"post_id":"cjetl29rk003o2sma1tx87nk6","category_id":"cjetl29om000l2smaepdnt9qq","_id":"cjetl29rr003w2sma4xnl3b2f"},{"post_id":"cjetl29rn003q2smame27423d","category_id":"cjetl29om000l2smaepdnt9qq","_id":"cjetl29rt003y2smaiydn7mz3"},{"post_id":"cjetl29p800102smatdzd91u6","category_id":"cjetl29q800242smaqgde9au2","_id":"cjetl29ru00422smawh9f0h6t"},{"post_id":"cjetl29p800102smatdzd91u6","category_id":"cjetl29rj003n2smab5v6ps8i","_id":"cjetl29ru00442smayi28pa0q"},{"post_id":"cjetl29rr003x2smaczob4bc6","category_id":"cjetl29om000l2smaepdnt9qq","_id":"cjetl29rv00472smak56p4iif"},{"post_id":"cjetl29qk002d2sma68puevyy","category_id":"cjetl29qs002p2smailof9e9f","_id":"cjetl29rv00482sma3agw8kcw"},{"post_id":"cjetl29qm002g2sma89e7p8nw","category_id":"cjetl29rt00402smao1wd625c","_id":"cjetl29rw004b2smahigeqsj2"},{"post_id":"cjetl29qp002k2smarzgnk1ii","category_id":"cjetl29rt00402smao1wd625c","_id":"cjetl29rw004c2smacikj6a2w"},{"post_id":"cjetl29qr002m2smacgvia3z5","category_id":"cjetl29rt00402smao1wd625c","_id":"cjetl29ry004h2sma8xkh14hd"},{"post_id":"cjetl29qt002q2sma96rpotdh","category_id":"cjetl29rt00402smao1wd625c","_id":"cjetl29ry004m2smacxyyu9l5"},{"post_id":"cjetl29r0002y2smack6sia7d","category_id":"cjetl29ry004j2sma5gmerqwy","_id":"cjetl29s0004r2smau6pn7eva"},{"post_id":"cjetl29r200302smaugxjlhna","category_id":"cjetl29rz004o2smaw32nh5ko","_id":"cjetl29s2004w2smagv884rc6"},{"post_id":"cjetl29r500342smaq9fo0cdx","category_id":"cjetl29ry004j2sma5gmerqwy","_id":"cjetl29s300502smacv8t28yg"},{"post_id":"cjetl29pt001m2sma365oz2gs","category_id":"cjetl29r300312smahmvm6228","_id":"cjetl29s500542smafnsd5w6v"},{"post_id":"cjetl29pt001m2sma365oz2gs","category_id":"cjetl29s2004x2smap71eedbp","_id":"cjetl29s600582smavq2e09sv"},{"post_id":"cjetl29re003i2sma1aho5ykq","category_id":"cjetl29s500562sma5rojthd3","_id":"cjetl29sd005e2smatfpdryor"},{"post_id":"cjetl29rc003e2sma2xebved3","category_id":"cjetl29rz004o2smaw32nh5ko","_id":"cjetl29se005h2smam7er4kum"},{"post_id":"cjetl29rc003e2sma2xebved3","category_id":"cjetl29sa005b2smay7l3fj3l","_id":"cjetl29se005j2smatn2pl1bk"}],"PostTag":[{"post_id":"cjetl29oa00092smawbuqzg6w","tag_id":"cjetl29of000c2sma0dw2sarx","_id":"cjetl29p6000y2smac5ilejrc"},{"post_id":"cjetl29oa00092smawbuqzg6w","tag_id":"cjetl29om000k2smal5wpqeu0","_id":"cjetl29p900112smawqixoysy"},{"post_id":"cjetl29oa00092smawbuqzg6w","tag_id":"cjetl29ou000q2smamojazduy","_id":"cjetl29pe00162smagpapmc64"},{"post_id":"cjetl29oj000h2smaulk9qtxx","tag_id":"cjetl29p1000v2smafz8e4pj6","_id":"cjetl29ph00182smad1804mog"},{"post_id":"cjetl29ol000j2sma5xa8lk1e","tag_id":"cjetl29p900132sma27v0edrh","_id":"cjetl29pk001d2smake6xi80y"},{"post_id":"cjetl29on000n2smabe7uq0ws","tag_id":"cjetl29pk001b2smadt5s3qbo","_id":"cjetl29ps001k2sma9j0doidn"},{"post_id":"cjetl29op000p2smak42n9xev","tag_id":"cjetl29po001h2smawoyqaejb","_id":"cjetl29py001r2smalbfvx6fl"},{"post_id":"cjetl29ow000s2smaw73q4gp5","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29q3001y2sma65xoitjb"},{"post_id":"cjetl29ox000t2sma4ezr4thg","tag_id":"cjetl29q1001v2smagh2pyxfq","_id":"cjetl29qa00262smaxpkqscj7"},{"post_id":"cjetl29p3000x2sma7w2oxu3r","tag_id":"cjetl29q800232smadq413hqn","_id":"cjetl29ql002e2sma7ffar4in"},{"post_id":"cjetl29p800102smatdzd91u6","tag_id":"cjetl29qj002a2smajg2yvyxz","_id":"cjetl29qq002l2smave42uhck"},{"post_id":"cjetl29pb00152sma4c61bm7n","tag_id":"cjetl29qo002h2sma4vhas1yy","_id":"cjetl29qu002r2smab34i1fnr"},{"post_id":"cjetl29qu002s2smafpwv6ipb","tag_id":"cjetl29p900132sma27v0edrh","_id":"cjetl29qz002x2sma4fbmo5xu"},{"post_id":"cjetl29pe00172smalsad3z3a","tag_id":"cjetl29qs002o2smaa95ydnea","_id":"cjetl29r600352sman04utpgx"},{"post_id":"cjetl29pe00172smalsad3z3a","tag_id":"cjetl29qy002v2smayo2mp104","_id":"cjetl29r800382smadr8cbxd7"},{"post_id":"cjetl29pi001a2smarudlbcwl","tag_id":"cjetl29qs002o2smaa95ydnea","_id":"cjetl29rb003d2smazzj8p865"},{"post_id":"cjetl29r700372sma45i6zuib","tag_id":"cjetl29po001h2smawoyqaejb","_id":"cjetl29rd003f2smaqzy4q3pm"},{"post_id":"cjetl29re003i2sma1aho5ykq","tag_id":"cjetl29of000c2sma0dw2sarx","_id":"cjetl29ri003m2smay66etewo"},{"post_id":"cjetl29pl001e2smaypbswgeh","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29rm003p2sma2ad34pfl"},{"post_id":"cjetl29pl001e2smaypbswgeh","tag_id":"cjetl29rd003g2smah9530fym","_id":"cjetl29rp003t2sma0hkve94d"},{"post_id":"cjetl29pm001g2smavi4egz0z","tag_id":"cjetl29qs002o2smaa95ydnea","_id":"cjetl29ru00412smatfv65fgd"},{"post_id":"cjetl29pm001g2smavi4egz0z","tag_id":"cjetl29rp003r2smacuh4n0vu","_id":"cjetl29ru00432smai6jpxzq0"},{"post_id":"cjetl29pq001j2smaym7e9enn","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29rx004f2sma3x6bz0k1"},{"post_id":"cjetl29pq001j2smaym7e9enn","tag_id":"cjetl29ru00452sma3cyi1y89","_id":"cjetl29rx004g2smagmy4x2re"},{"post_id":"cjetl29pq001j2smaym7e9enn","tag_id":"cjetl29rv00492smay0gas5rb","_id":"cjetl29ry004k2smas7s368fs"},{"post_id":"cjetl29pt001m2sma365oz2gs","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29ry004l2smam1r9r3tg"},{"post_id":"cjetl29px001q2smaxj0uld6i","tag_id":"cjetl29ry004i2smao50hbdjy","_id":"cjetl29s0004p2smatjen4j1x"},{"post_id":"cjetl29px001q2smaxj0uld6i","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29s0004q2smay9s1e74k"},{"post_id":"cjetl29py001t2smamw7tpe3d","tag_id":"cjetl29rz004n2smanuyh11rb","_id":"cjetl29s2004u2smabgr67jym"},{"post_id":"cjetl29py001t2smamw7tpe3d","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29s2004v2smarddle5a4"},{"post_id":"cjetl29q2001x2smaytbpzeme","tag_id":"cjetl29s1004s2smaqhl8azjn","_id":"cjetl29s3004z2smax64y2s70"},{"post_id":"cjetl29q400202smano5bsgkq","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29s400532sma3b1j2yjo"},{"post_id":"cjetl29q400202smano5bsgkq","tag_id":"cjetl29s3004y2sma8jmio8sr","_id":"cjetl29s500552sma4mhpoxof"},{"post_id":"cjetl29q600222sma8cuyzx5m","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29sa00592sma0kbm7nx3"},{"post_id":"cjetl29q600222sma8cuyzx5m","tag_id":"cjetl29s400522sma5o8o6zh9","_id":"cjetl29sa005a2smaw3gz15bv"},{"post_id":"cjetl29qa00272sma3w53gt7s","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29sd005d2smarp5dcco7"},{"post_id":"cjetl29qa00272sma3w53gt7s","tag_id":"cjetl29s600572smagdwo09ey","_id":"cjetl29sd005f2smaf7ort1zg"},{"post_id":"cjetl29qf00292sma5ezhqfa7","tag_id":"cjetl29sb005c2sma0nuhs8yi","_id":"cjetl29sf005k2sma2ibtfnmy"},{"post_id":"cjetl29qf00292sma5ezhqfa7","tag_id":"cjetl29sd005g2smah6pj7w4g","_id":"cjetl29sf005l2sma3zftao83"},{"post_id":"cjetl29qk002d2sma68puevyy","tag_id":"cjetl29qs002o2smaa95ydnea","_id":"cjetl29sg005o2sma1yiyv6fo"},{"post_id":"cjetl29qk002d2sma68puevyy","tag_id":"cjetl29sf005m2smagf63lgeq","_id":"cjetl29sg005p2sma427b67rd"},{"post_id":"cjetl29qm002g2sma89e7p8nw","tag_id":"cjetl29sf005n2smaohtdk1r5","_id":"cjetl29sh005s2smae0j6d3c9"},{"post_id":"cjetl29qm002g2sma89e7p8nw","tag_id":"cjetl29sg005q2sma5iiqf0xh","_id":"cjetl29sh005t2sma5y88ge0g"},{"post_id":"cjetl29qp002k2smarzgnk1ii","tag_id":"cjetl29sg005q2sma5iiqf0xh","_id":"cjetl29sh005w2sma24x7ifax"},{"post_id":"cjetl29qp002k2smarzgnk1ii","tag_id":"cjetl29sf005n2smaohtdk1r5","_id":"cjetl29sh005x2sma5zz224wc"},{"post_id":"cjetl29qr002m2smacgvia3z5","tag_id":"cjetl29sg005q2sma5iiqf0xh","_id":"cjetl29si00602smaamsmxwd2"},{"post_id":"cjetl29qr002m2smacgvia3z5","tag_id":"cjetl29sf005n2smaohtdk1r5","_id":"cjetl29si00612sma4z8yw4ey"},{"post_id":"cjetl29qt002q2sma96rpotdh","tag_id":"cjetl29sg005q2sma5iiqf0xh","_id":"cjetl29sk00652smappw3mpun"},{"post_id":"cjetl29qt002q2sma96rpotdh","tag_id":"cjetl29sf005n2smaohtdk1r5","_id":"cjetl29sk00662smaiigeuoy5"},{"post_id":"cjetl29qt002q2sma96rpotdh","tag_id":"cjetl29sj00632sma0bdh0edp","_id":"cjetl29sk00682smahepqbng3"},{"post_id":"cjetl29qw002u2sma8iery3ng","tag_id":"cjetl29pw001n2smah9trp2ps","_id":"cjetl29sk00692smad1xhvamg"},{"post_id":"cjetl29qw002u2sma8iery3ng","tag_id":"cjetl29sj00642smadu71o3b6","_id":"cjetl29sl006b2smaqgq6sd4p"},{"post_id":"cjetl29r0002y2smack6sia7d","tag_id":"cjetl29sk00672smahu98xk47","_id":"cjetl29sl006d2smalwo3koq2"},{"post_id":"cjetl29r0002y2smack6sia7d","tag_id":"cjetl29sl006a2smafmz2el3j","_id":"cjetl29sl006e2smajhlgudd3"},{"post_id":"cjetl29r500342smaq9fo0cdx","tag_id":"cjetl29sl006c2sma3vu3zewn","_id":"cjetl29sm006h2smat09hcn7m"},{"post_id":"cjetl29r500342smaq9fo0cdx","tag_id":"cjetl29sl006f2smarx9wa890","_id":"cjetl29sm006i2smak8w6qar2"},{"post_id":"cjetl29rk003o2sma1tx87nk6","tag_id":"cjetl29sm006g2smavb7dqrm2","_id":"cjetl29so006l2smajd1bioq5"},{"post_id":"cjetl29rk003o2sma1tx87nk6","tag_id":"cjetl29sm006j2sma88uo85lp","_id":"cjetl29so006m2smag5iagfnn"},{"post_id":"cjetl29rn003q2smame27423d","tag_id":"cjetl29of000c2sma0dw2sarx","_id":"cjetl29sp006p2sman8dop2l2"},{"post_id":"cjetl29rn003q2smame27423d","tag_id":"cjetl29sn006k2sma1i6hrp4w","_id":"cjetl29sp006q2smap5c5bph2"},{"post_id":"cjetl29rn003q2smame27423d","tag_id":"cjetl29so006n2smaa0sbtvyy","_id":"cjetl29sp006s2smal9zxif8q"},{"post_id":"cjetl29rn003q2smame27423d","tag_id":"cjetl29om000k2smal5wpqeu0","_id":"cjetl29sp006t2smah6pf94eb"},{"post_id":"cjetl29rp003u2sma3l75nbze","tag_id":"cjetl29so006o2smarrhrq8ra","_id":"cjetl29sq006v2sma6coa60nw"},{"post_id":"cjetl29rr003x2smaczob4bc6","tag_id":"cjetl29sp006r2smakni2oknh","_id":"cjetl29sq006w2smaga4qr9qe"},{"post_id":"cjetl29rr003x2smaczob4bc6","tag_id":"cjetl29sp006u2smav8cht8yb","_id":"cjetl29sq006x2smab5dw0o4s"},{"post_id":"cjetl29rr003x2smaczob4bc6","tag_id":"cjetl29of000c2sma0dw2sarx","_id":"cjetl29sq006y2smahha6w6sv"}],"Tag":[{"name":"博客","_id":"cjetl29of000c2sma0dw2sarx"},{"name":"hexo","_id":"cjetl29om000k2smal5wpqeu0"},{"name":"折腾","_id":"cjetl29ou000q2smamojazduy"},{"name":"spring MVC","_id":"cjetl29p1000v2smafz8e4pj6"},{"name":"redis","_id":"cjetl29p900132sma27v0edrh"},{"name":"oauth","_id":"cjetl29pk001b2smadt5s3qbo"},{"name":"test","_id":"cjetl29po001h2smawoyqaejb"},{"name":"Java","_id":"cjetl29pw001n2smah9trp2ps"},{"name":"软酷实训总结","_id":"cjetl29q1001v2smagh2pyxfq"},{"name":"-blog -折腾","_id":"cjetl29q800232smadq413hqn"},{"name":"git","_id":"cjetl29qj002a2smajg2yvyxz"},{"name":"hibernate","_id":"cjetl29qo002h2sma4vhas1yy"},{"name":"Intellij IDEA","_id":"cjetl29qs002o2smaa95ydnea"},{"name":"tomcat","_id":"cjetl29qy002v2smayo2mp104"},{"name":"内部类","_id":"cjetl29rd003g2smah9530fym"},{"name":"smart key","_id":"cjetl29rp003r2smacuh4n0vu"},{"name":"闭包","_id":"cjetl29ru00452sma3cyi1y89"},{"name":"类的加载与初始化","_id":"cjetl29rv00492smay0gas5rb"},{"name":"Java nio","_id":"cjetl29ry004i2smao50hbdjy"},{"name":"资料整理","_id":"cjetl29rz004n2smanuyh11rb"},{"name":"-Java -Java进阶","_id":"cjetl29s1004s2smaqhl8azjn"},{"name":"JSP","_id":"cjetl29s3004y2sma8jmio8sr"},{"name":"JNI","_id":"cjetl29s400522sma5o8o6zh9"},{"name":"nio","_id":"cjetl29s600572smagdwo09ey"},{"name":"js","_id":"cjetl29sb005c2sma0nuhs8yi"},{"name":"正则","_id":"cjetl29sd005g2smah6pj7w4g"},{"name":"github","_id":"cjetl29sf005m2smagf63lgeq"},{"name":"mysql","_id":"cjetl29sf005n2smaohtdk1r5"},{"name":"数据库","_id":"cjetl29sg005q2sma5iiqf0xh"},{"name":"mysql triggl","_id":"cjetl29sj00632sma0bdh0edp"},{"name":"Servlet","_id":"cjetl29sj00642smadu71o3b6"},{"name":"strus2","_id":"cjetl29sk00672smahu98xk47"},{"name":"学习总结","_id":"cjetl29sl006a2smafmz2el3j"},{"name":"struts2","_id":"cjetl29sl006c2sma3vu3zewn"},{"name":"Rest","_id":"cjetl29sl006f2smarx9wa890"},{"name":"vpn","_id":"cjetl29sm006g2smavb7dqrm2"},{"name":"代理","_id":"cjetl29sm006j2sma88uo85lp"},{"name":"博客迁移","_id":"cjetl29sn006k2sma1i6hrp4w"},{"name":"wordpress","_id":"cjetl29so006n2smaa0sbtvyy"},{"name":"实习","_id":"cjetl29so006o2smarrhrq8ra"},{"name":"vim","_id":"cjetl29sp006r2smakni2oknh"},{"name":"markdown","_id":"cjetl29sp006u2smav8cht8yb"}]}}